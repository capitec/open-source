{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/button/Button.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "default": "{\n    render: (args: Args) => html`\n    <omni-button\n      data-testid=\"test-button\"\n      type=\"${args.type}\"\n      label=\"${ifNotEmpty(args.label)}\"\n      slot-position=\"${args.slotPosition}\"\n      ?disabled=${args.disabled}>\n      ${unsafeHTML(args['[Default Slot]'])}\n    </omni-button>\n  `,\n    name: 'Interactive',\n    args: {\n        type: 'secondary',\n        label: 'Button',\n        slotPosition: 'top',\n        disabled: false,\n        '[Default Slot]': raw`<omni-icon icon=\"@material/thumb_up\"></omni-icon>`\n    },\n    play: async (context) => {\n        const button = within(context.canvasElement).getByTestId<Button>('test-button');\n        const click = jest.fn();\n        button.addEventListener('click', () => click());\n        await userEvent.click(button, {\n            pointerEventsCheck: 0\n        });\n        await userEvent.click(button, {\n            pointerEventsCheck: 0\n        });\n        await expect(click).toBeCalledTimes(2);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Type",
          "default": "{\n    render: (args: Args) => html` <omni-button type=\"${args.type}\" label=\"${args.label}\" data-testid=\"test-button\"></omni-button> `,\n    name: 'Type',\n    args: {\n        type: 'primary',\n        label: 'Click'\n    },\n    play: async (context) => {\n        const button = within(context.canvasElement).getByTestId<Button>('test-button');\n        const buttonElement = button.shadowRoot.getElementById('button');\n        const foundPrimaryClass = buttonElement.classList.contains('primary');\n        await expect(foundPrimaryClass).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "default": "{\n    render: (args: Args) => html` <omni-button label=\"${args.label}\" data-testid=\"test-button\"></omni-button> `,\n    name: 'Label',\n    args: {\n        label: 'Click'\n    },\n    play: async (context) => {\n        const button = within(context.canvasElement).getByTestId<Button>('test-button');\n        const labelElement = button.shadowRoot.getElementById('label');\n        const labelMatches = labelElement.innerText === Label.args.label;\n        await expect(labelMatches).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Slot",
          "default": "{\n    render: () => html`\n    <omni-button data-testid=\"test-button\">\n      <omni-icon size=\"default\" icon=\"./assets/images/direction.svg\"></omni-icon>\n    </omni-button>\n  `,\n    name: 'Slot',\n    args: {},\n    play: async (context) => {\n        const button = within(context.canvasElement).getByTestId<Button>('test-button');\n        const slotElement = button.shadowRoot.querySelector('slot');\n        const foundSlottedOmniIconElement = slotElement.assignedElements().find((e) => e.tagName.toLowerCase() === 'omni-icon');\n        await expect(foundSlottedOmniIconElement).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "default": "{\n    render: (args: Args) => html` <omni-button disabled label=\"${args.label}\" data-testid=\"test-button\"></omni-button> `,\n    name: 'Disabled',\n    args: {\n        label: 'Disabled'\n    },\n    play: async (context) => {\n        const button = within(context.canvasElement).getByTestId<Button>('test-button'); // Test for disabled CSS.\n\n        const buttonElement = button.shadowRoot.getElementById('button');\n        const foundDisabledClass = buttonElement.classList.contains('disabled');\n        await expect(foundDisabledClass).toBeTruthy(); // Test for not clickable.\n\n        const click = jest.fn();\n        button.addEventListener('click', (e) => {\n            click();\n        });\n        await expect(() => userEvent.click(button)).rejects.toThrow(/pointer-events: none/);\n        await expect(() => userEvent.click(button)).rejects.toThrow(/pointer-events: none/);\n        await expect(click).toBeCalledTimes(0);\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Type",
          "declaration": {
            "name": "Type",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slot",
          "declaration": {
            "name": "Slot",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/button/Button.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/Button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control that allows an action to be executed.",
          "name": "Button",
          "cssProperties": [
            {
              "description": "Component font family.",
              "name": "--omni-button-font-family"
            },
            {
              "description": "Component font size.",
              "name": "--omni-button-font-size"
            },
            {
              "description": "Component font weight.",
              "name": "--omni-button-font-weight"
            },
            {
              "description": "Component line height.",
              "name": "--omni-button-line-height"
            },
            {
              "description": "Component border radius.",
              "name": "--omni-button-border-radius"
            },
            {
              "description": "Component padding top.",
              "name": "--omni-button-padding-top"
            },
            {
              "description": "Component padding bottom.",
              "name": "--omni-button-padding-bottom"
            },
            {
              "description": "Component padding left.",
              "name": "--omni-button-padding-left"
            },
            {
              "description": "Component padding right.",
              "name": "--omni-button-padding-right"
            },
            {
              "description": "Primary \"type\" background color.",
              "name": "--omni-button-primary-background-color"
            },
            {
              "description": "Primary \"type\" border color.",
              "name": "--omni-button-primary-border-color"
            },
            {
              "description": "Primary \"type\" border width.",
              "name": "--omni-button-primary-border-width"
            },
            {
              "description": "Primary \"type\" color.",
              "name": "--omni-button-primary-color"
            },
            {
              "description": "Primary \"type\" active back color.",
              "name": "--omni-button-primary-active-background-color"
            },
            {
              "description": "Secondary \"type\" background color.",
              "name": "--omni-button-secondary-background-color"
            },
            {
              "description": "Secondary \"type\" border color.",
              "name": "--omni-button-secondary-border-color"
            },
            {
              "description": "Secondary \"type\" border width.",
              "name": "--omni-button-secondary-border-width"
            },
            {
              "description": "Secondary \"type\" color.",
              "name": "--omni-button-secondary-color"
            },
            {
              "description": "Secondary \"type\" active background color.",
              "name": "--omni-button-secondary-active-background-color"
            },
            {
              "description": "Clear \"type\" background color.",
              "name": "--omni-button-clear-background-color"
            },
            {
              "description": "Clear \"type\" border color.",
              "name": "--omni-button-clear-border-color"
            },
            {
              "description": "Clear \"type\" border width.",
              "name": "--omni-button-clear-border-width"
            },
            {
              "description": "Clear \"type\" color.",
              "name": "--omni-button-clear-color"
            },
            {
              "description": "Clear \"type\" hover background color.",
              "name": "--omni-button-clear-hover-background-color"
            },
            {
              "description": "Clear \"type\" active background color.",
              "name": "--omni-button-clear-active-background-color"
            },
            {
              "description": "Clear \"type\" active border color.",
              "name": "--omni-button-clear-active-border-color"
            },
            {
              "description": "Clear \"type\" active border width.",
              "name": "--omni-button-clear-active-border-width"
            },
            {
              "description": "White \"type\" background color.",
              "name": "--omni-button-white-background-color"
            },
            {
              "description": "White \"type\" border color.",
              "name": "--omni-button-white-border-color"
            },
            {
              "description": "White \"type\" border width.",
              "name": "--omni-button-white-border-width"
            },
            {
              "description": "White \"type\" color.",
              "name": "--omni-button-white-color"
            },
            {
              "description": "White \"type\" hover background color.",
              "name": "--omni-button-white-hover-background-color"
            },
            {
              "description": "White \"type\" active background color.",
              "name": "--omni-button-white-active-background-color"
            },
            {
              "description": "White \"type\" active border color.",
              "name": "--omni-button-white-active-border-color"
            },
            {
              "description": "White \"type\" active border width.",
              "name": "--omni-button-white-active-border-width"
            },
            {
              "description": "Disabled border color.",
              "name": "--omni-button-disabled-border-color"
            },
            {
              "description": "Disabled background color.",
              "name": "--omni-button-disabled-background-color"
            },
            {
              "description": "Disabled active background color.",
              "name": "--omni-button-disabled-active-hover-background-color"
            },
            {
              "description": "Slot margin left (When positioned right of label).",
              "name": "--omni-button-slot-margin-right"
            },
            {
              "description": "Slot margin bottom (When positioned top of label).",
              "name": "--omni-button-slot-margin-bottom"
            },
            {
              "description": "Slot margin left (When positioned right of label).",
              "name": "--omni-button-slot-margin-left"
            },
            {
              "description": "Slot margin top (When positioned bottom of label).",
              "name": "--omni-button-slot-margin-top"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside button, can be positioned using {@link slotPosition} property.",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'primary' | 'secondary' | 'clear' | 'white'"
              },
              "default": "'secondary'",
              "description": "Display type.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "slotPosition",
              "type": {
                "text": "'left' | 'top' | 'right' | 'bottom'"
              },
              "default": "'left'",
              "description": "Position of slotted content.",
              "attribute": "slot-position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'primary' | 'secondary' | 'clear' | 'white'"
              },
              "default": "'secondary'",
              "description": "Display type.",
              "fieldName": "type",
              "attribute": "type"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "slot-position",
              "type": {
                "text": "'left' | 'top' | 'right' | 'bottom'"
              },
              "default": "'left'",
              "description": "Position of slotted content.",
              "fieldName": "slotPosition",
              "attribute": "slot-position"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "tagName": "omni-button",
          "import": "```js\nimport '@capitec/omni-components/button';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "src/button/Button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-button",
          "declaration": {
            "name": "Button",
            "module": "src/button/Button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/button/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/check/Check.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args) => html`\n    <omni-check\n      data-testid=\"test-check\"\n      label=\"${ifNotEmpty(args.label)}\"\n      .data=\"${args.data}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?checked=\"${args.checked}\"\n      ?disabled=\"${args.disabled}\"\n      ?indeterminate=\"${args.indeterminate}\"\n      >${args.indeterminate_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('indeterminate_icon', args.indeterminate_icon))}` : nothing}${\n        args.check_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('check_icon', args.check_icon))}` : nothing\n    }${args.check_icon || args.indeterminate_icon ? '\\r\\n' : nothing}</omni-check\n    >\n  `,\n    name: 'Interactive',\n    args: {\n        label: '',\n        data: {},\n        hint: '',\n        error: '',\n        checked: false,\n        disabled: false,\n        indeterminate: false,\n        check_icon: '',\n        indeterminate_icon: ''\n    },\n    play: async (context) => {\n        const check = within(context.canvasElement).getByTestId<Check>('test-check');\n        const valueChange = jest.fn();\n        check.addEventListener('value-change', valueChange);\n        await userEvent.click(check, {\n            pointerEventsCheck: 0\n        });\n\n        const content = check.shadowRoot.getElementById('content');\n\n        await fireEvent.keyDown(content, {\n            key: ' ',\n            code: 'Space'\n        });\n        await expect(valueChange).toBeCalledTimes(2);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\"></omni-check> `,\n    args: {\n        label: 'Label'\n    },\n    play: async (context) => {\n        const check = within(context.canvasElement).getByTestId<Check>('test-check');\n        const labelElement = check.shadowRoot.querySelector('label');\n        await expect(labelElement).toBeTruthy();\n        await expect(labelElement).toHaveTextContent(Label.args.label);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Hint",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\" hint=\"${args.hint}\"></omni-check> `,\n    args: {\n        label: 'Hint',\n        hint: 'This is a hint'\n    },\n    play: async (context) => {\n        const check = within(context.canvasElement).getByTestId<Check>('test-check');\n        const hintElement = check.shadowRoot.querySelector<HTMLElement>('.hint');\n        await expect(hintElement).toBeTruthy();\n        await expect(hintElement).toHaveTextContent(Hint.args.hint);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Error_Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    name: 'Error', // Explicitly named as error, the exported name cannot be 'Error' as that is reserved\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\" error=\"${args.error}\"></omni-check> `,\n    args: {\n        label: 'Error',\n        error: 'This is an error state'\n    },\n    play: async (context) => {\n        const check = within(context.canvasElement).getByTestId<Check>('test-check');\n        const errorElement = check.shadowRoot.querySelector<HTMLElement>('.error');\n        await expect(errorElement).toBeTruthy();\n        await expect(errorElement).toHaveTextContent(Error_Label.args.error);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Checked",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?checked=\"${args.checked}\"></omni-check> `,\n    args: {\n        label: 'Checked',\n        checked: true\n    },\n    play: async (context) => {\n        const check = within(context.canvasElement).getByTestId<Check>('test-check');\n        const checkedElement = check.shadowRoot.querySelector<HTMLElement>('.checked');\n        await expect(checkedElement).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Indeterminate",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?indeterminate=\"${args.indeterminate}\"></omni-check> `,\n    args: {\n        label: 'Indeterminate',\n        indeterminate: true\n    },\n    play: async (context) => {\n        const check = within(context.canvasElement).getByTestId<Check>('test-check');\n        const indeterminateElement = check.shadowRoot.querySelector<HTMLElement>('.indeterminate');\n        await expect(indeterminateElement).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?disabled=\"${args.disabled}\"></omni-check> `,\n    args: {\n        label: 'Disabled',\n        disabled: true\n    },\n    play: async (context) => {\n        const check = within(context.canvasElement).getByTestId<Check>('test-check');\n        const valueChange = jest.fn();\n        check.addEventListener('value-change', valueChange);\n\n        const disabledElement = check.shadowRoot.querySelector<HTMLElement>('.disabled');\n        await expect(disabledElement).toBeTruthy();\n\n        const content = check.shadowRoot.getElementById('content');\n        await userEvent.click(content, {\n            pointerEventsCheck: 0\n        });\n        await fireEvent.keyDown(content, {\n            key: ' ',\n            code: 'Space'\n        });\n        await expect(valueChange).toBeCalledTimes(0);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Custom_Check_Icon",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?checked=\"${args.checked}\"> ${unsafeHTML(args.check_icon)} </omni-check>\n  `,\n    args: {\n        label: 'Custom Check Icon',\n        checked: true,\n        check_icon: raw`<svg slot=\"check_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 442.79 410.38\" version=\"1.0\" width=\"100%\"\n                      height=\"100%\">\n                      <path style=\"stroke:#000;stroke-width:19.892;fill:#ffffff\"\n                        d=\"m-1747.2-549.3 287.72 333.9c146.6-298.83 326.06-573.74 614.52-834.75-215.89 121.82-453.86 353.14-657.14 639.38l-245.1-138.53z\"\n                        transform=\"translate(843.77 509.04) scale(.48018)\" />\n                    </svg>`\n    },\n    play: async (context) => {\n        const check = within(context.canvasElement).getByTestId<Check>('test-check');\n        const slotElement = check.shadowRoot.querySelector<HTMLSlotElement>('slot[name=check_icon]');\n        await expect(slotElement).toBeTruthy();\n\n        const foundSlottedSvgElement = slotElement.assignedElements().find((e) => e.tagName.toLowerCase() === 'svg');\n        await expect(foundSlottedSvgElement).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Custom_Indeterminate_Icon",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?indeterminate=\"${args.indeterminate}\">\n      ${unsafeHTML(args.indeterminate_icon)}\n    </omni-check>\n  `,\n    args: {\n        label: 'Custom Indeterminate Icon',\n        indeterminate: true,\n        indeterminate_icon: raw`\n\t\t\t<svg slot=\"indeterminate_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"100%\" height=\"100%\">\n\t\t\t\t<defs>\n\t\t\t\t<linearGradient id=\"b\" y2=\"28.275\" gradientUnits=\"userSpaceOnUse\" x2=\"20.07\" y1=\"3.976\" x1=\"12.113\">\n\t\t\t\t\t<stop style=\"stop-color:#ffffff\" offset=\"0\" />\n\t\t\t\t\t<stop style=\"stop-color:#ffffff\" offset=\"1\" />\n\t\t\t\t</linearGradient>\n\t\t\t\t<linearGradient id=\"a\" y2=\"30\" gradientUnits=\"userSpaceOnUse\" x2=\"20.214\" y1=\"2\" x1=\"12.031\">\n\t\t\t\t\t<stop style=\"stop-color:#ffffff\" offset=\"0\" />\n\t\t\t\t\t<stop style=\"stop-color:#ffffff\" offset=\"1\" />\n\t\t\t\t</linearGradient>\n\t\t\t\t</defs>\n\t\t\t\t<path d=\"M2.875 13C1.281 13 0 14.338 0 16s1.28 3 2.875 3h26.25C30.719 19 32 17.662 32 16s-1.281-3-2.875-3H2.875z\" />\n\t\t\t\t<path style=\"fill:url(#b)\" transform=\"translate(-.063 .063)\"\n\t\t\t\td=\"M2.875 13.938c-1.067 0-1.938.884-1.938 2.062s.87 2.062 1.938 2.062h26.25c1.067 0 1.937-.884 1.937-2.062s-.87-2.062-1.937-2.062H2.875z\" />\n\t\t\t</svg>\n\t\t`\n    },\n    play: async (context) => {\n        const check = within(context.canvasElement).getByTestId<Check>('test-check');\n        const slotElement = check.shadowRoot.querySelector<HTMLSlotElement>('slot[name=indeterminate_icon]');\n        await expect(slotElement).toBeTruthy();\n\n        const foundSlottedSvgElement = slotElement.assignedElements().find((e) => e.tagName.toLowerCase() === 'svg');\n        await expect(foundSlottedSvgElement).toBeTruthy();\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checked",
          "declaration": {
            "name": "Checked",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Indeterminate",
          "declaration": {
            "name": "Indeterminate",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Check_Icon",
          "declaration": {
            "name": "Custom_Check_Icon",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Indeterminate_Icon",
          "declaration": {
            "name": "Custom_Indeterminate_Icon",
            "module": "src/check/Check.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/check/Check.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control that allows a selection to be made.",
          "name": "Check",
          "cssProperties": [
            {
              "description": "Label font color.",
              "name": "--omni-check-label-font-color"
            },
            {
              "description": "Label font family.",
              "name": "--omni-check-label-font-family"
            },
            {
              "description": "Label font size.",
              "name": "--omni-check-label-font-size"
            },
            {
              "description": "Label font weight.",
              "name": "--omni-check-label-font-weight"
            },
            {
              "description": "Label spacing.",
              "name": "--omni-check-label-spacing"
            },
            {
              "description": "Hint font color.",
              "name": "--omni-check-hint-label-font-color"
            },
            {
              "description": "Hint font family.",
              "name": "--omni-check-hint-label-font-family"
            },
            {
              "description": "Hint font size.",
              "name": "--omni-check-hint-label-font-size"
            },
            {
              "description": "Hint font weight.",
              "name": "--omni-check-hint-label-font-weight"
            },
            {
              "description": "Hint top padding.",
              "name": "--omni-check-hint-label-padding-top"
            },
            {
              "description": "Error font color.",
              "name": "--omni-check-error-label-font-color"
            },
            {
              "description": "Error font family.",
              "name": "--omni-check-error-label-font-family"
            },
            {
              "description": "Error font size.",
              "name": "--omni-check-error-label-font-size"
            },
            {
              "description": "Error font weight.",
              "name": "--omni-check-error-label-font-weight"
            },
            {
              "description": "Error top padding.",
              "name": "--omni-check-error-label-padding-top"
            },
            {
              "description": "Width.",
              "name": "--omni-check-width"
            },
            {
              "description": "Height.",
              "name": "--omni-check-height"
            },
            {
              "description": "Background color.",
              "name": "--omni-check-background-color"
            },
            {
              "description": "Border width.",
              "name": "--omni-check-border-width"
            },
            {
              "description": "Border color.",
              "name": "--omni-check-border-color"
            },
            {
              "description": "Border radius.",
              "name": "--omni-check-border-radius"
            },
            {
              "description": "Indicator Border width.",
              "name": "--omni-check-indicator-border-width"
            },
            {
              "description": "Indicator Border color.",
              "name": "--omni-check-indicator-border-color"
            },
            {
              "description": "Indicator color.",
              "name": "--omni-check-indicator-color"
            },
            {
              "description": "Checked Background color.",
              "name": "--omni-check-checked-background-color"
            },
            {
              "description": "Indeterminate Background color.",
              "name": "--omni-check-indeterminate-background-color"
            },
            {
              "description": "Disabled Background color.",
              "name": "--omni-check-disabled-background-color"
            },
            {
              "description": "Disabled border color.",
              "name": "--omni-check-disabled-border-color"
            },
            {
              "description": "Hover box shadow.",
              "name": "--omni-check-hover-box-shadow"
            },
            {
              "description": "Hover background color.",
              "name": "--omni-check-hover-background-color"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the indeterminate state",
              "name": "indeterminate_icon"
            },
            {
              "description": "Replaces the icon for the checked state",
              "name": "check_icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is checked or not.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is in and indeterminate state.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "_click",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_toggleChecked",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent | KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "value-change",
              "type": {
                "text": "CustomEvent<{ old: Boolean; new: Boolean; }>"
              },
              "description": "Dispatched when the control value is changed to either on or off."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint"
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "fieldName": "error",
              "attribute": "error"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is checked or not.",
              "fieldName": "checked",
              "attribute": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is in and indeterminate state.",
              "fieldName": "indeterminate",
              "attribute": "indeterminate"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "tagName": "omni-check",
          "import": "```js\nimport '@capitec/omni-components/check';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Check",
          "declaration": {
            "name": "Check",
            "module": "src/check/Check.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-check",
          "declaration": {
            "name": "Check",
            "module": "src/check/Check.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/check/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/check/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Check.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/chip/Chip.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\" ?closable=${args.closable} ?disabled=\"${args.disabled}\"\n      >${args.chip_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('chip_icon', args.chip_icon))}` : nothing}${\n        args.close_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('close_icon', args.close_icon))}` : nothing\n    }\n    </omni-chip>\n  `,\n    name: 'Interactive',\n    args: {\n        label: 'Chip',\n        closable: true,\n        disabled: false,\n        chip_icon: raw`<svg slot=\"chip_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>`,\n        close_icon: ''\n    },\n    play: async (context) => {\n        const chip = within(context.canvasElement).getByTestId<Chip>('test-chip');\n        const click = jest.fn();\n\n        chip.addEventListener('click', click);\n        await userEvent.click(chip, {\n            pointerEventsCheck: 0\n        });\n        await userEvent.click(chip, {\n            pointerEventsCheck: 0\n        });\n\n        await expect(click).toBeCalledTimes(2);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\"> </omni-chip> `,\n    name: 'Label',\n    args: {\n        label: 'Label'\n    },\n    play: async (context) => {\n        const chip = within(context.canvasElement).getByTestId<Chip>('test-chip');\n        await expect(chip.shadowRoot.getElementById('label')).toHaveTextContent(Label.args.label);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Closable",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\" ?closable=${args.closable}> </omni-chip> `,\n    name: 'Closable',\n    args: {\n        label: 'Closable',\n        closable: true\n    },\n    play: async (context) => {\n        const chip = within(context.canvasElement).getByTestId<Chip>('test-chip');\n        const remove = jest.fn();\n        chip.addEventListener('remove', remove);\n\n        const closeButton = chip.shadowRoot.getElementById('closeButton');\n\n        await userEvent.click(closeButton, {\n            pointerEventsCheck: 0\n        });\n        await userEvent.click(closeButton, {\n            pointerEventsCheck: 0\n        });\n        await expect(remove).toBeCalledTimes(2);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\" ?disabled=\"${args.disabled}\"> </omni-chip> `,\n    name: 'Disabled',\n    args: {\n        label: 'Disabled',\n        disabled: true\n    },\n    play: async (context) => {\n        const chip = within(context.canvasElement).getByTestId<Chip>('test-chip');\n        const chipElement = chip.shadowRoot.getElementById('chip');\n        const foundDisabledClass = chipElement.classList.contains('disabled');\n        await expect(foundDisabledClass).toBeTruthy(); // Test for not clickable.\n\n        const click = jest.fn();\n        chip.addEventListener('click', click);\n        await expect(() => userEvent.click(chip)).rejects.toThrow(/pointer-events: none/);\n        await expect(() => userEvent.click(chip)).rejects.toThrow(/pointer-events: none/);\n\n        await expect(click).toBeCalledTimes(0);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Chip_Slot_Icon",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\" ?closable=${args.closable}> ${unsafeHTML(args.chip_icon)} </omni-chip>\n  `,\n    name: 'Chip Icon',\n    args: {\n        label: 'Chip',\n        closable: false,\n        chip_icon: raw`<svg slot=\"chip_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>`\n    },\n    play: async (context) => {\n        const chip = within(context.canvasElement).getByTestId<Chip>('test-chip');\n        const slotElement = chip.shadowRoot.querySelector<HTMLSlotElement>('slot[name=\"chip_icon\"]');\n        await expect(slotElement).toBeTruthy();\n\n        const foundSlottedSvgElement = slotElement.assignedElements().find((e) => e.tagName.toLowerCase() === 'svg');\n        await expect(foundSlottedSvgElement).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Custom_Close_Icon",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\" ?closable=${args.closable}>\n      ${unsafeHTML(args.chip_icon)} ${unsafeHTML(args.close_icon)}\n    </omni-chip>\n  `,\n    name: 'Custom Close Icon',\n    args: {\n        label: 'Close',\n        closable: true,\n        close_icon: raw`<svg slot=\"close_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\"><path d=\"m7.446 6.397.084.073L13 11.939l5.47-5.47a.75.75 0 0 1 1.133.977l-.073.084L14.061 13l5.47 5.47a.75.75 0 0 1-.977 1.133l-.084-.073L13 14.061l-5.47 5.47a.75.75 0 0 1-1.133-.977l.073-.084L11.939 13l-5.47-5.47a.75.75 0 0 1 .977-1.133Z\"/></svg>`\n    },\n    play: async (context) => {\n        const chip = within(context.canvasElement).getByTestId<Chip>('test-chip');\n        const slotElement = chip.shadowRoot.querySelector<HTMLSlotElement>('slot[name=close_icon]');\n        await expect(slotElement).toBeTruthy();\n\n        const foundSlottedSvgElement = slotElement.assignedElements().find((e) => e.tagName.toLocaleLowerCase() === 'svg');\n        await expect(foundSlottedSvgElement).toBeTruthy();\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/chip/Chip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/chip/Chip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/chip/Chip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Closable",
          "declaration": {
            "name": "Closable",
            "module": "src/chip/Chip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/chip/Chip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Chip_Slot_Icon",
          "declaration": {
            "name": "Chip_Slot_Icon",
            "module": "src/chip/Chip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Close_Icon",
          "declaration": {
            "name": "Custom_Close_Icon",
            "module": "src/chip/Chip.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/chip/Chip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control that can be used for input, setting attributes, or performing actions.",
          "name": "Chip",
          "cssProperties": [
            {
              "description": "Component height.",
              "name": "--omni-chip-height"
            },
            {
              "description": "Component maximum height.",
              "name": "--omni-chip-max-height"
            },
            {
              "description": "Component border radius.",
              "name": "--omni-chip-border-radius"
            },
            {
              "description": "Component background color.",
              "name": "--omni-chip-background-color"
            },
            {
              "description": "Component padding.",
              "name": "--omni-chip-padding"
            },
            {
              "description": "Component hover border.",
              "name": "--omni-chip-hover-border"
            },
            {
              "description": "Component hover shadow.",
              "name": "--omni-chip-hover-shadow"
            },
            {
              "description": "Component label left padding.",
              "name": "--omni-chip-label-padding-left"
            },
            {
              "description": "Component label right padding.",
              "name": "--omni-chip-label-padding-right"
            },
            {
              "description": "Component label color.",
              "name": "--omni-chip-label-color"
            },
            {
              "description": "Component label font family.",
              "name": "--omni-chip-label-font-family"
            },
            {
              "description": "Component label font size.",
              "name": "--omni-chip-label-font-size"
            },
            {
              "description": "Component label font weight.",
              "name": "--omni-chip-label-font-weight"
            },
            {
              "description": "Component label line height.",
              "name": "--omni-chip-label-line-height"
            },
            {
              "description": "Component disabled border color.",
              "name": "--omni-chip-disabled-border-color"
            },
            {
              "description": "Component disabled background color.",
              "name": "--omni-chip-disabled-background-color"
            },
            {
              "description": "Component icon left padding.",
              "name": "--omni-chip-disabled-hover-background-color"
            },
            {
              "description": "Component slotted icon width.",
              "name": "--omni-chip-icon-width"
            },
            {
              "description": "Component close icon width.",
              "name": "--omni-chip-close-icon-width"
            },
            {
              "description": "Component close icon color.",
              "name": "--omni-chip-close-icon-color"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the chip slot",
              "name": "chip_icon"
            },
            {
              "description": "Replaces the icon for the closed slot",
              "name": "close_icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "description": "Sets if the chip has a close button.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_removeClicked",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "remove",
              "type": {
                "text": "CustomEvent<{}>"
              },
              "description": "Dispatched when the close icon is clicked."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "description": "Sets if the chip has a close button.",
              "fieldName": "closable",
              "attribute": "closable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "tagName": "omni-chip",
          "import": "```js\nimport '@capitec/omni-components/chip';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Chip",
          "declaration": {
            "name": "Chip",
            "module": "src/chip/Chip.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-chip",
          "declaration": {
            "name": "Chip",
            "module": "src/chip/Chip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/chip/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/chip/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Chip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/color-field/ColorField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`\n    <omni-color-field\n      data-testid=\"test-color-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\"\n      >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix ? '\\r\\n' : nothing}</omni-color-field\n    >\n  `,\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        data: {},\n        hint: '',\n        error: '',\n        disabled: false,\n        prefix: '',\n        suffix: ''\n    },\n    play: async (context) => {\n        const field = within(context.canvasElement).getByTestId<ColorField>('test-color-field');\n\n        const inputField = field.shadowRoot.getElementById('inputField') as HTMLInputElement;\n\n        await expect(inputField.type).toBe('color');\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`<omni-color-field data-testid=\"test-field\" label=\"${ifNotEmpty(args.label)}\" disabled></omni-color-field>`,\n    name: 'Disabled',\n    args: {\n        label: 'Disabled',\n        disabled: true\n    },\n    play: async (context) => {\n        const input = within(context.canvasElement).getByTestId<ColorField>('test-field');\n\n        //Disabled class test.\n        const disabledAttribute = input.attributes.getNamedItem('disabled');\n        await expect(disabledAttribute).toBeTruthy();\n\n        //Input event test.\n        const inputTest = jest.fn();\n        input.addEventListener('input', inputTest);\n\n        const inputField = input.shadowRoot.getElementById('inputField') as OmniFormElement;\n\n        await userEvent.type(inputField, 'Value Update 3', {\n            pointerEventsCheck: 0\n        });\n\n        // TODO: Fix race conditions in tests\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n        } else {\n            await waitFor(() => expect(input.value).toBeFalsy(), {\n                timeout: 3000\n            });\n            await waitFor(() => expect(inputTest).toBeCalledTimes(0), {\n                timeout: 3000\n            });\n        }\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/color-field/ColorField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/color-field/ColorField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Color input control.",
          "name": "ColorField",
          "cssProperties": [
            {
              "description": "Color field text align.",
              "name": "--omni-color-field-text-align"
            },
            {
              "description": "Color field font color.",
              "name": "--omni-color-field-font-color"
            },
            {
              "description": "Color field font family.",
              "name": "--omni-color-field-font-family"
            },
            {
              "description": "Color field font size.",
              "name": "--omni-color-field-font-size"
            },
            {
              "description": "Color field font weight.",
              "name": "--omni-color-field-font-weight"
            },
            {
              "description": "Color field picker height.",
              "name": "--omni-color-field-picker-height"
            },
            {
              "description": "Color field picker width.",
              "name": "--omni-color-field-picker-width"
            },
            {
              "description": "Color field height.",
              "name": "--omni-color-field-height"
            },
            {
              "description": "Color field width.",
              "name": "--omni-color-field-padding"
            },
            {
              "description": "Color field min height.",
              "name": "--omni-color-field-min-height"
            },
            {
              "description": "Color field min width.",
              "name": "--omni-color-field-min-width"
            },
            {
              "description": "Color field text selection.",
              "name": "--omni-color-field-text-select"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_keyInput"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formContainerElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prefixSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setLabelPosition",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusGained",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusLost",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "/src/core/OmniFormElement.js"
          },
          "tagName": "omni-color-field",
          "import": "```js\nimport '@capitec/omni-components/color-field';\n```",
          "customElement": true,
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ColorField",
          "declaration": {
            "name": "ColorField",
            "module": "src/color-field/ColorField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-color-field",
          "declaration": {
            "name": "ColorField",
            "module": "src/color-field/ColorField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/color-field/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/color-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./ColorField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/core/DOMTreeElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An custom web component that renders the template directly into the main DOM tree instead of the ShadowRoot",
          "name": "DOMTreeElement",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DOMTreeElement",
          "declaration": {
            "name": "DOMTreeElement",
            "module": "src/core/DOMTreeElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DOMTreeElement",
            "module": "src/core/DOMTreeElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/core/OmniElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Base element class that manages element properties and attributes, and\nrenders a lit template with asynchronous rendering support and themed styles.",
          "name": "OmniElement",
          "cssProperties": [
            {
              "description": "Theme primary color.",
              "name": "--omni-theme-primary-color"
            },
            {
              "description": "Theme primary hover color.",
              "name": "--omni-theme-primary-hover-color"
            },
            {
              "description": "Theme primary active color.",
              "name": "--omni-theme-primary-active-color"
            },
            {
              "description": "Theme accent color.",
              "name": "--omni-theme-accent-color"
            },
            {
              "description": "Theme accent hover color.",
              "name": "--omni-theme-accent-hover-color"
            },
            {
              "description": "Theme accent active color.",
              "name": "--omni-theme-accent-active-color"
            },
            {
              "description": "Theme background color.",
              "name": "--omni-theme-background-color"
            },
            {
              "description": "Theme background hover color.",
              "name": "--omni-theme-background-hover-color"
            },
            {
              "description": "Theme background active color.",
              "name": "--omni-theme-background-active-color"
            },
            {
              "description": "Theme font color.",
              "name": "--omni-theme-font-color"
            },
            {
              "description": "Theme disabled border color.",
              "name": "--omni-theme-disabled-border-color"
            },
            {
              "description": "Theme disabled background color.",
              "name": "--omni-theme-disabled-background-color"
            },
            {
              "description": "Theme disabled background color.",
              "name": "--omni-theme-error-font-color"
            },
            {
              "description": "Theme error border color.",
              "name": "--omni-theme-error-border-color"
            },
            {
              "description": "Theme hint font color.",
              "name": "--omni-theme-hint-font-color"
            },
            {
              "description": "Theme inactive color.",
              "name": "--omni-theme-inactive-color"
            },
            {
              "description": "Theme inactive color.",
              "name": "--omni-theme-box-shadow-color"
            },
            {
              "description": "Theme font family.",
              "name": "--omni-theme-font-family"
            },
            {
              "description": "Theme font size.",
              "name": "--omni-theme-font-size"
            },
            {
              "description": "Theme font weight.",
              "name": "--omni-theme-font-weight"
            },
            {
              "description": "Theme border radius.",
              "name": "--omni-theme-border-radius"
            },
            {
              "description": "Theme border width.",
              "name": "--omni-theme-border-width"
            },
            {
              "description": "Theme box shadow.",
              "name": "--omni-theme-box-shadow"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir"
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang"
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "cssCategory": "Theme Variables",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OmniElement",
          "declaration": {
            "name": "OmniElement",
            "module": "src/core/OmniElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "OmniElement",
            "module": "src/core/OmniElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/core/OmniFormElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Base class used by form components to share common properties, styles and functionality.",
          "name": "OmniFormElement",
          "cssProperties": [
            {
              "description": "Container width.",
              "name": "--omni-container-width"
            },
            {
              "description": "Container height.",
              "name": "--omni-container-height"
            },
            {
              "description": "Layout border radius.",
              "name": "--omni-form-layout-border-radius"
            },
            {
              "description": "Layout background color.",
              "name": "--omni-form-layout-background-color"
            },
            {
              "description": "Layout height.",
              "name": "--omni-form-layout-height"
            },
            {
              "description": "Layout width.",
              "name": "--omni-form-layout-width"
            },
            {
              "description": "Form container width.",
              "name": "--omni-form-container-width"
            },
            {
              "description": "Form container font family.",
              "name": "--omni-form-container-font-family"
            },
            {
              "description": "Form layout background color.",
              "name": "--omni-form-field-background-color"
            },
            {
              "description": "Form border top.",
              "name": "--omni-form-border-top"
            },
            {
              "description": "Form border bottom.",
              "name": "--omni-form-border-bottom"
            },
            {
              "description": "Form border left.",
              "name": "--omni-form-border-left"
            },
            {
              "description": "Form border right.",
              "name": "--omni-form-border-right"
            },
            {
              "description": "Form border width.",
              "name": "--omni-form-border-width"
            },
            {
              "description": "Form border radius.",
              "name": "--omni-form-border-radius"
            },
            {
              "description": "Form border style.",
              "name": "--omni-form-border-style"
            },
            {
              "description": "Form border color.",
              "name": "--omni-form-border-color"
            },
            {
              "description": "Form label text align",
              "name": "--omni-form-label-transform-origin"
            },
            {
              "description": "Form label text align.",
              "name": "--omni-form-label-text-align"
            },
            {
              "description": "Form label color.",
              "name": "--omni-form-label-color"
            },
            {
              "description": "Form label font size.",
              "name": "--omni-form-label-font-size"
            },
            {
              "description": "Form label font weight.",
              "name": "--omni-form-label-font-weight"
            },
            {
              "description": "Form label left margin.",
              "name": "--omni-form-label-left"
            },
            {
              "description": "Form label z-index.",
              "name": "--omni-form-label-z-index"
            },
            {
              "description": "Form focussed border width.",
              "name": "--omni-form-focussed-border-width"
            },
            {
              "description": "Form focussed border color.",
              "name": "--omni-form-focussed-border-color"
            },
            {
              "description": "Form focussed label color.",
              "name": "--omni-form-focussed-label-color"
            },
            {
              "description": "Form focussed error label color.",
              "name": "--omni-form-focussed-label-error-color"
            },
            {
              "description": "Form error label color.",
              "name": "--omni-form-error-label-color"
            },
            {
              "description": "Form error border color.",
              "name": "--omni-form-error-border-color"
            },
            {
              "description": "Form label disabled color.",
              "name": "--omni-form-label-disabled-color"
            },
            {
              "description": "Form disabled border color.",
              "name": "--omni-form-disabled-border-color"
            },
            {
              "description": "Form disabled background color.",
              "name": "--omni-form-disabled-background-color"
            },
            {
              "description": "Form disabled label focussed background color.",
              "name": "--omni-form-disabled-focussed-label-background-color"
            },
            {
              "description": "Form hint label font color.",
              "name": "--omni-form-hint-label-font-color"
            },
            {
              "description": "Form hint label font family.",
              "name": "--omni-form-hint-label-font-family"
            },
            {
              "description": "Form hint label font size.",
              "name": "--omni-form-hint-label-font-size"
            },
            {
              "description": "Form hint label font weight.",
              "name": "--omni-form-hint-label-font-weight"
            },
            {
              "description": "Form hint label top padding.",
              "name": "--omni-form-hint-label-padding-top"
            },
            {
              "description": "Form hint label left padding.",
              "name": "--omni-form-hint-label-padding-left"
            },
            {
              "description": "Form hint label border width.",
              "name": "--omni-form-hint-label-border-width"
            },
            {
              "description": "Form error label font color.",
              "name": "--omni-form-error-label-font-color"
            },
            {
              "description": "Form error label font family.",
              "name": "--omni-form-error-label-font-family"
            },
            {
              "description": "Form error label font size.",
              "name": "--omni-form-error-label-font-size"
            },
            {
              "description": "Form error label font weight.",
              "name": "--omni-form-error-label-font-weight"
            },
            {
              "description": "Form error label top padding.",
              "name": "--omni-form-error-label-padding-top"
            },
            {
              "description": "Form error label left padding.",
              "name": "--omni-form-error-label-padding-left"
            },
            {
              "name": "--omni-form-error-label-border-width"
            },
            {
              "description": "Form hover color.",
              "name": "--omni-form-hover-color"
            },
            {
              "description": "Form disabled hover color.",
              "name": "--omni-form-disabled-hover-color"
            },
            {
              "description": "Form error hover color.",
              "name": "--omni-form-error-hover-color"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix"
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_formContainerElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_labelElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_prefixSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_setLabelPosition"
            },
            {
              "kind": "method",
              "name": "_focusGained"
            },
            {
              "kind": "method",
              "name": "_focusLost"
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint"
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "cssCategory": "Base Form Variables"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ifDefined",
          "declaration": {
            "name": "ifDefined",
            "package": "lit/directives/if-defined.js"
          }
        },
        {
          "kind": "js",
          "name": "OmniFormElement",
          "declaration": {
            "name": "OmniFormElement",
            "module": "src/core/OmniFormElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/core/OmniInputStories.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "LabelStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "HintStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "ErrorStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "ValueStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "inputValue",
              "default": "'The input value'",
              "type": {
                "text": "string | number | string[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "PrefixStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "SuffixStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "DisabledStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LabelStory",
          "declaration": {
            "name": "LabelStory",
            "module": "src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HintStory",
          "declaration": {
            "name": "HintStory",
            "module": "src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ErrorStory",
          "declaration": {
            "name": "ErrorStory",
            "module": "src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ValueStory",
          "declaration": {
            "name": "ValueStory",
            "module": "src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "PrefixStory",
          "declaration": {
            "name": "PrefixStory",
            "module": "src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SuffixStory",
          "declaration": {
            "name": "SuffixStory",
            "module": "src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledStory",
          "declaration": {
            "name": "DisabledStory",
            "module": "src/core/OmniInputStories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/currency-field/CurrencyField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args) => html`\n        <omni-currency-field\n            data-testId=\"test-currency-field\"\n            label=\"${ifNotEmpty(args.label)}\"\n            value=\"${ifNotEmpty(args.value)}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            ?disabled=\"${args.disabled}\"\n            fractional-precision=\"${args.fractionalPrecision}\"\n            fractional-separator=\"${ifNotEmpty(args.fractionalSeparator)}\"\n            thousands-separator=\"${ifNotEmpty(args.thousandsSeparator)}\"\n            currency-symbol=\"${ifNotEmpty(args.currencySymbol)}\"\n            formatter=\"${ifNotEmpty(args.formatter)}\"           \n            >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix ? '\\r\\n' : nothing}</omni-currency-field>\n    `,\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '123456789',\n        hint: '',\n        error: '',\n        disabled: false,\n        prefix: '',\n        suffix: '',\n        fractionalPrecision: 2,\n        fractionalSeparator: '.',\n        thousandsSeparator: ',',\n        currencySymbol: '$',\n        formatter: '\\\\B(?=(\\\\d{3})+(?!\\\\d))'\n    },\n    play: async (context) => {\n        const currencyField = within(context.canvasElement).getByTestId<CurrencyField>('test-currency-field');\n\n        const inputField = currencyField.shadowRoot.getElementById('inputField') as HTMLInputElement;\n        // Required to clear userEvent Symbol that keeps hidden state of previously typed values via userEvent. If not cleared this cannot be run multiple times with the same results\n        setUIValueClean(inputField);\n        inputField.value = '';\n\n        const input = jest.fn();\n        currencyField.addEventListener('input', input);\n\n        const value = '1200000.15';\n        await userEvent.type(inputField, value);\n\n        // TODO: Fix race conditions in tests\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n        } else {\n            // Check the following value as input value is formatted to currency value;\n            await waitFor(() => expect(inputField).toHaveValue('1,200,000.15'), {\n                timeout: 3000\n            });\n            await waitFor(() => expect(input).toBeCalledTimes(value.length), {\n                timeout: 3000\n            });\n        }\n\n        // Backspacing to cover the removal of cents and cents separator\n        const backspace = '{Backspace}';\n        // Required to clear userEvent Symbol that keeps hidden state of previously typed values via userEvent. If not cleared this cannot be run multiple times with the same results\n        setUIValueClean(inputField);\n        await userEvent.type(inputField, backspace, {\n            initialSelectionStart: 10,\n            initialSelectionEnd: 10\n        });\n\n        await currencyField.updateComplete;\n\n        // TODO: Fix race conditions in tests\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n        } else {\n            await waitFor(() => expect(inputField).toHaveValue('1,200,000'), {\n                timeout: 3000\n            });\n        }\n\n        // Use left arrow key to position the caret after the currency separator.\n        const leftArrow = '{ArrowLeft>3/}{Backspace}';\n        await userEvent.type(inputField, leftArrow);\n\n        // TODO: Fix race conditions in tests\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n        } else {\n            await waitFor(() => expect(inputField).toHaveValue('120,000'), {\n                timeout: 3000\n            });\n        }\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/currency-field/CurrencyField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to enter a formatted currency value.",
          "name": "CurrencyField",
          "cssProperties": [
            {
              "description": "Currency field text align.",
              "name": "--omni-currency-field-text-align"
            },
            {
              "description": "Currency field font color.",
              "name": "--omni-currency-field-font-color"
            },
            {
              "description": "Currency field font family.",
              "name": "--omni-currency-field-font-family"
            },
            {
              "description": "Currency field font size.",
              "name": "--omni-currency-field-font-size"
            },
            {
              "description": "Currency field font weight.",
              "name": "--omni-currency-field-font-weight"
            },
            {
              "description": "Currency field padding.",
              "name": "--omni-currency-field-padding"
            },
            {
              "description": "Currency field height.",
              "name": "--omni-currency-field-height"
            },
            {
              "description": "Currency field width.",
              "name": "--omni-currency-field-width"
            },
            {
              "description": "Currency field symbol font size.",
              "name": "--omni-currency-field-symbol-font-size"
            },
            {
              "description": "Currency field symbol font color.",
              "name": "--omni-currency-field-symbol-color"
            },
            {
              "description": "Currency field symbol left padding.",
              "name": "--omni-currency-field-symbol-left-padding"
            },
            {
              "description": "Currency field symbol selectable state.",
              "name": "--omni-currency-field-symbol-select"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currencySymbol",
              "type": {
                "text": "string"
              },
              "default": "'$'",
              "description": "Currency symbol.",
              "attribute": "currency-symbol",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "thousandsSeparator",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Thousands separator.",
              "attribute": "thousands-separator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fractionalSeparator",
              "type": {
                "text": "string"
              },
              "default": "'.'",
              "description": "Fractional separator.",
              "attribute": "fractional-separator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fractionalPrecision",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "Fractional precision.",
              "attribute": "fractional-precision",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "formatter",
              "type": {
                "text": "string"
              },
              "default": "'\\\\B(?=(\\\\d{3})+(?!\\\\d))'",
              "description": "Formatter provided to format the value.",
              "attribute": "formatter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_stringValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "method",
              "name": "_isIOS"
            },
            {
              "kind": "method",
              "name": "_parseAmount",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_parseFraction",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_formatToCurrency",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "preFormattedValue",
                  "type": {
                    "text": "number | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_formatToFloat",
              "return": {
                "type": {
                  "text": "string | number"
                }
              },
              "parameters": [
                {
                  "name": "formattedValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_blur",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_keyDown",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyInput",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formContainerElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prefixSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setLabelPosition",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusGained",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusLost",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "currency-symbol",
              "type": {
                "text": "string"
              },
              "default": "'$'",
              "description": "Currency symbol.",
              "fieldName": "currencySymbol",
              "attribute": "currency-symbol"
            },
            {
              "name": "thousands-separator",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Thousands separator.",
              "fieldName": "thousandsSeparator",
              "attribute": "thousands-separator"
            },
            {
              "name": "fractional-separator",
              "type": {
                "text": "string"
              },
              "default": "'.'",
              "description": "Fractional separator.",
              "fieldName": "fractionalSeparator",
              "attribute": "fractional-separator"
            },
            {
              "name": "fractional-precision",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "Fractional precision.",
              "fieldName": "fractionalPrecision",
              "attribute": "fractional-precision"
            },
            {
              "name": "formatter",
              "type": {
                "text": "string"
              },
              "default": "'\\\\B(?=(\\\\d{3})+(?!\\\\d))'",
              "description": "Formatter provided to format the value.",
              "fieldName": "formatter",
              "attribute": "formatter"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "/src/core/OmniFormElement.js"
          },
          "tagName": "omni-currency-field",
          "import": "```js\nimport '@capitec/omni-components/currency-field';\n```",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CurrencyField",
          "declaration": {
            "name": "CurrencyField",
            "module": "src/currency-field/CurrencyField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-currency-field",
          "declaration": {
            "name": "CurrencyField",
            "module": "src/currency-field/CurrencyField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/currency-field/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/currency-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./CurrencyField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/email-field/EmailField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`\n    <omni-email-field\n      data-testid=\"test-email-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\"\n      >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix ? '\\r\\n' : nothing}</omni-email-field>\n  `,\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        prefix: '',\n        suffix: ''\n    },\n    play: async (context) => {\n        const textField = within(context.canvasElement).getByTestId<EmailField>('test-email-field');\n        const input = jest.fn();\n        textField.addEventListener('input', input);\n\n        const inputField = textField.shadowRoot.getElementById('inputField');\n\n        await userEvent.type(inputField, 'JohnDoe@gmail.com', {\n            pointerEventsCheck: 0\n        });\n        const value = 'JohnDoe@gmail.com';\n        await expect(inputField).toHaveValue(value);\n\n        await expect(input).toBeCalledTimes(value.length);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/email-field/EmailField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/email-field/EmailField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Email input control, used in forms for input validation and to display correct virtual keyboard on mobile.",
          "name": "EmailField",
          "cssProperties": [
            {
              "description": "Email field text align.",
              "name": "--omni-email-field-text-align"
            },
            {
              "description": "Email field font color.",
              "name": "--omni-email-field-font-color"
            },
            {
              "description": "Email field font family.",
              "name": "--omni-email-field-font-family"
            },
            {
              "description": "Email field font size.",
              "name": "--omni-email-field-font-size"
            },
            {
              "description": "Email field font weight.",
              "name": "--omni-email-field-font-weight"
            },
            {
              "description": "Email field padding.",
              "name": "--omni-email-field-padding"
            },
            {
              "description": "Email field height.",
              "name": "--omni-email-field-height"
            },
            {
              "description": "Email field width.",
              "name": "--omni-email-field-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_keyInput"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formContainerElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prefixSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setLabelPosition",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusGained",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusLost",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "/src/core/OmniFormElement.js"
          },
          "tagName": "omni-email-field",
          "import": "```js\nimport '@capitec/omni-components/email-field';\n```",
          "customElement": true,
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EmailField",
          "declaration": {
            "name": "EmailField",
            "module": "src/email-field/EmailField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-email-field",
          "declaration": {
            "name": "EmailField",
            "module": "src/email-field/EmailField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/email-field/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/email-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./EmailField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/hyperlink/Hyperlink.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-hyperlink\n      data-testid=\"test-hyperlink\"\n      label=\"${ifNotEmpty(args.label)}\"\n      href=\"${ifNotEmpty(args.href)}\"\n      target=\"${ifNotEmpty(args.target)}\"\n      ?disabled=\"${args.disabled}\"\n      ?inline=\"${args.inline}\"\n      size=\"${args.size}\"></omni-hyperlink>\n  `,\n    name: 'Interactive',\n    args: {\n        label: 'Click',\n        href: '',\n        disabled: false,\n        inline: false,\n        size: ''\n    },\n    play: async (context) => {\n        const canvas = within(context.canvasElement);\n        const Hyperlink = canvas.getByTestId('test-hyperlink');\n        const click = jest.fn();\n        Hyperlink.addEventListener('click', () => click());\n        await userEvent.click(Hyperlink, {\n            pointerEventsCheck: 0\n        });\n        await userEvent.click(Hyperlink, {\n            pointerEventsCheck: 0\n        });\n        await expect(click).toBeCalledTimes(2);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`<omni-hyperlink data-testid=\"test-hyperlink\" label=\"${args.label}\"></omni-hyperlink>`,\n    name: 'Label',\n    args: {\n        label: 'Click'\n    },\n    play: async (context) => {\n        const canvas = within(context.canvasElement);\n        const Hyperlink = canvas.getByTestId('test-hyperlink');\n        await expect(Hyperlink.shadowRoot.querySelector('a')).toHaveTextContent(Label.args.label);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Size",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`<omni-hyperlink data-testid=\"test-hyperlink\" label=\"${args.label}\" size=\"${args.size}\"></omni-hyperlink>`,\n    name: 'Size',\n    args: {\n        label: 'Click',\n        size: 'small'\n    },\n    play: async (context) => {\n        const canvas = within(context.canvasElement);\n        const Hyperlink = canvas.getByTestId('test-hyperlink');\n        await expect(Hyperlink).toHaveAttribute('size', Size.args.size);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Href",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) =>\n        html`<omni-hyperlink data-testid=\"test-hyperlink\" label=\"${args.label}\" href=\"${args.href}\" target=\"_blank\"></omni-hyperlink>`,\n    name: 'Href',\n    args: {\n        label: 'Click',\n        href: 'https://example.com'\n    },\n    play: async (context) => {\n        const canvas = within(context.canvasElement);\n        const Hyperlink = canvas.getByTestId('test-hyperlink');\n        await expect(Hyperlink).toHaveAttribute('href', Href.args.href);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) =>\n        html`<omni-hyperlink\n      data-testid=\"test-hyperlink\"\n      href=\"https://example.com\"\n      label=\"${args.label}\"\n      ?disabled=\"${args.disabled}\"></omni-hyperlink>`,\n    name: 'Disabled',\n    args: {\n        label: 'Click',\n        disabled: true\n    },\n    play: async (context) => {\n        const canvas = within(context.canvasElement);\n\n        const Hyperlink = canvas.getByTestId('test-hyperlink');\n\n        const click = jest.fn();\n        Hyperlink.addEventListener('click', () => click());\n\n        await userEvent.click(Hyperlink, {\n            pointerEventsCheck: 0\n        });\n        await userEvent.click(Hyperlink, {\n            pointerEventsCheck: 0\n        });\n        await expect(click).toBeCalledTimes(0);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Inline",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) =>\n        html`<p data-testid=\"test-paragraph\"> Inline <omni-hyperlink label=\"${args.label}\" ?inline=\"${args.inline}\"></omni-hyperlink> example </p>`,\n    name: 'Inline',\n    args: {\n        label: 'click',\n        inline: true\n    },\n    play: async (context) => {\n        const canvas = within(context.canvasElement);\n\n        const paragraph = canvas.getByTestId('test-paragraph');\n        const hyperlinkElement = paragraph.querySelector<HTMLElement>('omni-hyperlink');\n\n        await expect(paragraph).toContainElement(hyperlinkElement);\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Size",
          "declaration": {
            "name": "Size",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Href",
          "declaration": {
            "name": "Href",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inline",
          "declaration": {
            "name": "Inline",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/hyperlink/Hyperlink.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to indicate an action to be executed. Typically used for navigational purposes.",
          "name": "Hyperlink",
          "cssProperties": [
            {
              "description": "Hyperlink disabled color.",
              "name": "--omni-hyperlink-color-disabled"
            },
            {
              "description": "Hyperlink font size.",
              "name": "--omni-hyperlink-font-size"
            },
            {
              "description": "Hyperlink font weight.",
              "name": "--omni-hyperlink-font-family"
            },
            {
              "description": "Hyperlink font weight.",
              "name": "--omni-hyperlink-font-weight"
            },
            {
              "description": "Hyperlink color.",
              "name": "--omni-hyperlink-color"
            },
            {
              "description": "Hyperlink text decorator",
              "name": "--omni-hyperlink-text-decorator"
            },
            {
              "description": "Hyperlink small font size variation",
              "name": "--omni-hyperlink-font-size-small"
            },
            {
              "description": "Hyperlink small font family variation",
              "name": "--omni-font-family-small"
            },
            {
              "description": "Hyperlink small font weight",
              "name": "--omni-hyperlink-font-weight-small"
            },
            {
              "description": "Hyperlink color when in an active state.",
              "name": "--omni-hyperlink-color-active"
            },
            {
              "description": "Hyperlink text decorator in active state.",
              "name": "--omni-hyperlink-text-decorator-active"
            },
            {
              "description": "Hyperlink text decorator when in hover state.",
              "name": "--omni-hyperlink-text-decorator-hover"
            },
            {
              "description": "Hyperlink color when visited",
              "name": "--omni-hyperlink-color-visited"
            },
            {
              "description": "Hyperlink text decorator when visited.",
              "name": "--omni-hyperlink-text-decorator-visited"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "URL to link to.",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top'"
              },
              "default": "'_self'",
              "description": "Where to load the URL specified in \"href\"",
              "attribute": "target",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the link is used as part of a sentence.",
              "attribute": "inline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "description": "Size of the Hyperlink text.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_click",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "URL to link to.",
              "fieldName": "href",
              "attribute": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top'"
              },
              "default": "'_self'",
              "description": "Where to load the URL specified in \"href\"",
              "fieldName": "target",
              "attribute": "target"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the link is used as part of a sentence.",
              "fieldName": "inline",
              "attribute": "inline"
            },
            {
              "name": "size",
              "type": {
                "text": "string"
              },
              "description": "Size of the Hyperlink text.",
              "fieldName": "size",
              "attribute": "size"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "tagName": "omni-hyperlink",
          "import": "```js\nimport '@capitec/omni-components/hyperlink';\n```",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Hyperlink",
          "declaration": {
            "name": "Hyperlink",
            "module": "src/hyperlink/Hyperlink.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-hyperlink",
          "declaration": {
            "name": "Hyperlink",
            "module": "src/hyperlink/Hyperlink.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/hyperlink/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/hyperlink/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Hyperlink.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icon/Icon.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <!-- Icons loaded by content path instead of font-based or slotted content will not be able to be styled directly -->\n\n    <omni-icon data-testid=\"test-icon\" size=\"${ifNotEmpty(args.size)}\" icon=\"${ifNotEmpty(args.icon)}\">\n      ${unsafeHTML(args['[Default Slot]'])}\n    </omni-icon>\n  `,\n    name: 'Interactive',\n    args: {\n        size: 'default',\n        '[Default Slot]': raw`<svg\n    version=\"1.1\"\n    viewBox=\"0 0 16 16\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100%\"\n    height=\"100%\"\n  >\n    <g transform=\"translate(-2,-2)\">\n      <path d=\"m8.229 14.062-3.521-3.541L5.75 9.479l2.479 2.459 6.021-6L15.292 7Z\" />\n    </g>\n  </svg>`,\n        icon: undefined as string\n    },\n    play: async (context) => {\n        const icon = within(context.canvasElement).getByTestId<Icon>('test-icon');\n        const slotElement = icon.shadowRoot.querySelector('slot');\n        const foundSlottedSvgElement = slotElement.assignedElements().find((e) => e.tagName.toLowerCase() === 'svg');\n        await expect(foundSlottedSvgElement).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "SVG",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-icon data-testid=\"test-icon\" size=\"${args.size}\"> ${unsafeHTML(args['[Default Slot]'])} </omni-icon> `,\n    name: 'SVG',\n    args: {\n        size: 'large',\n        '[Default Slot]': `<svg\n                version=\"1.1\"\n                viewBox=\"0 0 16 16\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"100%\"\n                height=\"100%\"\n              >\n                <g transform=\"translate(-2,-2)\">\n                  <path d=\"m8.229 14.062-3.521-3.541L5.75 9.479l2.479 2.459 6.021-6L15.292 7Z\" />\n                </g>\n              </svg>`\n    },\n    play: async (context) => {\n        const icon = within(context.canvasElement).getByTestId<Icon>('test-icon');\n        const slotElement = icon.shadowRoot.querySelector('slot');\n        const foundSlottedSvgElement = slotElement.assignedElements().find((e) => e.tagName.toLowerCase() === 'svg');\n        await expect(foundSlottedSvgElement).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Icon_Path",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <!-- Icons loaded by content path instead of font-based or slotted content will not be able to be styled directly -->\n\n    <omni-icon data-testid=\"test-icon\" size=\"${args.size}\" icon=\"${args.icon}\"></omni-icon>\n  `,\n    name: 'Local Source',\n    args: {\n        size: 'default',\n        icon: './assets/images/colors.svg'\n    },\n    play: async (context) => {\n        const icon = within(context.canvasElement).getByTestId<Icon>('test-icon');\n        const imgElement = icon.shadowRoot.querySelector('img');\n        await expect(imgElement).toBeTruthy();\n        await expect(imgElement.src.endsWith(Icon_Path.args.icon.replace('./', '/'))).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "URL",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <!-- Icons loaded by content path instead of font-based or slotted content will not be able to be styled directly -->\n\n    <omni-icon data-testid=\"test-icon\" size=\"${args.size}\" icon=\"${args.icon}\"></omni-icon>\n  `,\n    name: 'Remote Source',\n    args: {\n        size: 'default',\n        icon: 'https://img.shields.io/badge/Source-remote-lightgrey.svg'\n    },\n    play: async (context) => {\n        const icon = within(context.canvasElement).getByTestId<Icon>('test-icon');\n        const imgElement = icon.shadowRoot.querySelector('img');\n        await expect(imgElement).toBeTruthy();\n        await expect(imgElement.src).toEqual(URL.args.icon);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Material",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <!-- Add Material to your project, e.g. Adding below link in <head>-->\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\" />\n    <!-- ------------------------------------------------------------- -->\n\n    <omni-icon data-testid=\"test-icon\" size=\"${args.size}\" icon=\"${args.icon}\"> </omni-icon>\n  `,\n    args: {\n        size: 'default',\n        icon: '@material/receipt_long'\n    },\n    play: async (context) => {\n        const icon = within(context.canvasElement).getByTestId<Icon>('test-icon');\n        const materialElement = icon.shadowRoot.querySelector<HTMLElement>('.material-icon');\n        await expect(materialElement).toBeTruthy();\n        await expect(materialElement.innerText).toEqual(Material.args.icon.replace('@material/', ''));\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SVG",
          "declaration": {
            "name": "SVG",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Icon_Path",
          "declaration": {
            "name": "Icon_Path",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "URL",
          "declaration": {
            "name": "URL",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Material",
          "declaration": {
            "name": "Material",
            "module": "src/icon/Icon.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icon/Icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component that displays an icon.",
          "name": "Icon",
          "cssProperties": [
            {
              "description": "Icon fill color.",
              "name": "--omni-icon-fill"
            },
            {
              "description": "Icon background color.",
              "name": "--omni-icon-background-color"
            },
            {
              "description": "Icon large size.",
              "name": "--omni-icon-size-large"
            },
            {
              "description": "Icon medium size.",
              "name": "--omni-icon-size-medium"
            },
            {
              "description": "Icon small size.",
              "name": "--omni-icon-size-small"
            },
            {
              "description": "Icon extra small size.",
              "name": "--omni-icon-size-extra-small"
            },
            {
              "description": "Icon default size.",
              "name": "--omni-icon-size-default"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "description": "The icon to be displayed",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'default' | 'extra-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'default'",
              "description": "Size to display the icon at",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "Name of the icon to display. Takes preference over the slotted icon.",
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'default' | 'extra-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'default'",
              "description": "Size to display the icon at",
              "fieldName": "size",
              "attribute": "size"
            },
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "Name of the icon to display. Takes preference over the slotted icon.",
              "fieldName": "icon",
              "attribute": "icon"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "tagName": "omni-icon",
          "import": "```js\nimport '@capitec/omni-components/icon';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "src/icon/Icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-icon",
          "declaration": {
            "name": "Icon",
            "module": "src/icon/Icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icon/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/icon/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Check.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Check icon component.",
          "name": "CheckIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-check-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Check.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CheckIcon",
          "declaration": {
            "name": "CheckIcon",
            "module": "src/icons/Check.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-check-icon",
          "declaration": {
            "name": "CheckIcon",
            "module": "src/icons/Check.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/ChevronDown.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Chevron down icon component.",
          "name": "ChevronDownIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-chevron-down-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/ChevronDown.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChevronDownIcon",
          "declaration": {
            "name": "ChevronDownIcon",
            "module": "src/icons/ChevronDown.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-chevron-down-icon",
          "declaration": {
            "name": "ChevronDownIcon",
            "module": "src/icons/ChevronDown.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Clear.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Clear icon component.",
          "name": "ClearIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-clear-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Clear.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ClearIcon",
          "declaration": {
            "name": "ClearIcon",
            "module": "src/icons/Clear.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-clear-icon",
          "declaration": {
            "name": "ClearIcon",
            "module": "src/icons/Clear.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Close.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Close icon component.",
          "name": "CloseIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-close-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Close.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CloseIcon",
          "declaration": {
            "name": "CloseIcon",
            "module": "src/icons/Close.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-close-icon",
          "declaration": {
            "name": "CloseIcon",
            "module": "src/icons/Close.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/EyeHidden.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Hidden eye icon component",
          "name": "EyeHiddenIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-eye-hidden-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/EyeHidden.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EyeHiddenIcon",
          "declaration": {
            "name": "EyeHiddenIcon",
            "module": "src/icons/EyeHidden.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-eye-hidden-icon",
          "declaration": {
            "name": "EyeHiddenIcon",
            "module": "src/icons/EyeHidden.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/EyeVisible.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Visible eye icon component.",
          "name": "EyeVisibleIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-eye-visible-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/EyeVisible.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EyeVisibleIcon",
          "declaration": {
            "name": "EyeVisibleIcon",
            "module": "src/icons/EyeVisible.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-eye-visible-icon",
          "declaration": {
            "name": "EyeVisibleIcon",
            "module": "src/icons/EyeVisible.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Indeterminate.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Indeterminate icon component.",
          "name": "IndeterminateIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-indeterminate-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Indeterminate.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IndeterminateIcon",
          "declaration": {
            "name": "IndeterminateIcon",
            "module": "src/icons/Indeterminate.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-indeterminate-icon",
          "declaration": {
            "name": "IndeterminateIcon",
            "module": "src/icons/Indeterminate.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Loading.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Loading icon component.",
          "name": "LoadingIcon",
          "members": [
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "tagName": "omni-loading-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Loading.icon.js';\n```",
          "customElement": true,
          "attributes": [
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LoadingIcon",
          "declaration": {
            "name": "LoadingIcon",
            "module": "src/icons/Loading.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-loading-icon",
          "declaration": {
            "name": "LoadingIcon",
            "module": "src/icons/Loading.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/LockClosed.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Closed lock icon component.",
          "name": "LockClosedIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement"
          },
          "tagName": "omni-lock-closed-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/LockClosed.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LockClosedIcon",
          "declaration": {
            "name": "LockClosedIcon",
            "module": "src/icons/LockClosed.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-lock-closed-icon",
          "declaration": {
            "name": "LockClosedIcon",
            "module": "src/icons/LockClosed.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/LockOpen.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Open lock icon component.",
          "name": "LockOpenIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement"
          },
          "tagName": "omni-lock-open-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/LockOpen.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LockOpenIcon",
          "declaration": {
            "name": "LockOpenIcon",
            "module": "src/icons/LockOpen.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-lock-open-icon",
          "declaration": {
            "name": "LockOpenIcon",
            "module": "src/icons/LockOpen.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Minus.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Minus icon component.",
          "name": "MinusIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement"
          },
          "tagName": "omni-minus-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Minus.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MinusIcon",
          "declaration": {
            "name": "MinusIcon",
            "module": "src/icons/Minus.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-minus-icon",
          "declaration": {
            "name": "MinusIcon",
            "module": "src/icons/Minus.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/More.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "More icon component.",
          "name": "MoreIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-more-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/More.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MoreIcon",
          "declaration": {
            "name": "MoreIcon",
            "module": "src/icons/More.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-more-icon",
          "declaration": {
            "name": "MoreIcon",
            "module": "src/icons/More.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Plus.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Plus icon component.",
          "name": "PlusIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement"
          },
          "tagName": "omni-plus-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Plus.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PlusIcon",
          "declaration": {
            "name": "PlusIcon",
            "module": "src/icons/Plus.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-plus-icon",
          "declaration": {
            "name": "PlusIcon",
            "module": "src/icons/Plus.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Search.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Search icon component.",
          "name": "SearchIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-search-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Search.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchIcon",
          "declaration": {
            "name": "SearchIcon",
            "module": "src/icons/Search.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-search-icon",
          "declaration": {
            "name": "SearchIcon",
            "module": "src/icons/Search.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Check.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Close.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./EyeHidden.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./EyeVisible.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Indeterminate.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Loading.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./LockClosed.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./LockOpen.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Minus.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Plus.icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/label/Label.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-label data-testid=\"test-label\" label=\"${ifNotEmpty(args.label)}\" type=\"${args.type}\"> </omni-label> `,\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        type: 'default'\n    },\n    play: async (context) => {\n        const label = within(context.canvasElement).getByTestId<Label>('test-label');\n        await expect(label.shadowRoot).toHaveTextContent(Interactive.args.label);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Title",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-label data-testid=\"test-label\" label=\"${args.label}\" type=\"${args.type}\"> </omni-label> `,\n    args: {\n        label: 'Title',\n        type: 'title'\n    },\n    play: async (context) => {\n        const label = within(context.canvasElement).getByTestId<Label>('test-label');\n        await expect(label.shadowRoot).toHaveTextContent(Title.args.label);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Subtitle",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-label data-testid=\"test-label\" label=\"${args.label}\" type=\"${args.type}\"> </omni-label> `,\n    args: {\n        label: 'Subtitle',\n        type: 'subtitle'\n    },\n    play: async (context) => {\n        const label = within(context.canvasElement).getByTestId<Label>('test-label');\n        await expect(label.shadowRoot).toHaveTextContent(Subtitle.args.label);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Strong",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-label data-testid=\"test-label\" label=\"${args.label}\" type=\"${args.type}\"> </omni-label> `,\n    args: {\n        label: 'Strong',\n        type: 'strong'\n    },\n    play: async (context) => {\n        const label = within(context.canvasElement).getByTestId<Label>('test-label');\n        await expect(label.shadowRoot).toHaveTextContent(Strong.args.label);\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Title",
          "declaration": {
            "name": "Title",
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Subtitle",
          "declaration": {
            "name": "Subtitle",
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Strong",
          "declaration": {
            "name": "Strong",
            "module": "src/label/Label.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/label/Label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Label component that renders styled text.",
          "name": "Label",
          "cssProperties": [
            {
              "description": "Label font color.",
              "name": "--omni-label-font-color"
            },
            {
              "description": "Label font family.",
              "name": "--omni-label-font-family"
            },
            {
              "description": "Label font size.",
              "name": "--omni-label-font-size"
            },
            {
              "description": "Label font weight.",
              "name": "--omni-label-font-weight"
            },
            {
              "description": "Label cursor.",
              "name": "--omni-label-cursor"
            },
            {
              "description": "Title label font size.",
              "name": "--omni-label-title-font-size"
            },
            {
              "description": "Title label font weight.",
              "name": "--omni-label-title-font-weight"
            },
            {
              "description": "Subtitle label font size.",
              "name": "--omni-label-subtitle-font-size"
            },
            {
              "description": "Subtitle label font weight.",
              "name": "--omni-label-subtitle-font-weight"
            },
            {
              "description": "Strong label font size.",
              "name": "--omni-label-strong-font-size"
            },
            {
              "description": "Strong label font weight.",
              "name": "--omni-label-strong-font-weight"
            },
            {
              "description": "Default label font size.",
              "name": "--omni-label-default-font-size"
            },
            {
              "description": "Default label font weight.",
              "name": "--omni-label-default-font-weight"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'default' | 'title' | 'subtitle' | 'strong'"
              },
              "default": "'default'",
              "description": "Type of label to display.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "type",
              "type": {
                "text": "'default' | 'title' | 'subtitle' | 'strong'"
              },
              "default": "'default'",
              "description": "Type of label to display.",
              "fieldName": "type",
              "attribute": "type"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "tagName": "omni-label",
          "import": "```js\nimport '@capitec/omni-components/label';\n```",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/label/Label.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-label",
          "declaration": {
            "name": "Label",
            "module": "src/label/Label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/label/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/label/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/number-field/NumberField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`\n    <omni-number-field\n      data-testid=\"test-number-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\"\n      >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix ? '\\r\\n' : nothing}</omni-number-field>\n  `,\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        prefix: '',\n        suffix: ''\n    },\n    play: async (context) => {\n        const numberField = within(context.canvasElement).getByTestId<NumberField>('test-number-field');\n        numberField.value = '';\n\n        const input = jest.fn();\n        numberField.addEventListener('input', input);\n\n        const inputField = numberField.shadowRoot.getElementById('inputField') as HTMLInputElement;\n        // Required to clear userEvent Symbol that keeps hidden state of previously typed values via userEvent. If not cleared this cannot be run multiple times with the same results\n        setUIValueClean(inputField);\n\n        const value = '12345';\n        await userEvent.type(inputField, value, {\n            pointerEventsCheck: 0\n        });\n\n        // TODO: Fix race conditions in tests\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n        } else {\n            await waitFor(() => expect(inputField).toHaveValue(parseInt(value)), {\n                timeout: 3000\n            });\n            await waitFor(() => expect(input).toBeCalledTimes(value.length), {\n                timeout: 3000\n            });\n        }\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/number-field/NumberField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/number-field/NumberField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Input control to enter a single line of numbers.",
          "name": "NumberField",
          "cssProperties": [
            {
              "description": "Number field text align.",
              "name": "--omni-number-field-text-align"
            },
            {
              "description": "Number field font color.",
              "name": "--omni-number-field-font-color"
            },
            {
              "description": "Number field font family.",
              "name": "--omni-number-field-font-family"
            },
            {
              "description": "Number field font size.",
              "name": "--omni-number-field-font-size"
            },
            {
              "description": "Number field font weight.",
              "name": "--omni-number-field-font-weight"
            },
            {
              "description": "Number field padding.",
              "name": "--omni-number-field-padding"
            },
            {
              "description": "Number field height.",
              "name": "--omni-number-field-height"
            },
            {
              "description": "Number field width.",
              "name": "--omni-number-field-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_keyDown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyInput"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formContainerElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prefixSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setLabelPosition",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusGained",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusLost",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "/src/core/OmniFormElement.js"
          },
          "tagName": "omni-number-field",
          "import": "```js\nimport '@capitec/omni-components/number-field';\n```",
          "customElement": true,
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NumberField",
          "declaration": {
            "name": "NumberField",
            "module": "src/number-field/NumberField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-number-field",
          "declaration": {
            "name": "NumberField",
            "module": "src/number-field/NumberField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/number-field/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/number-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./NumberField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/password-field/PasswordField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-password-field\n      data-testid=\"test-password-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\">\n      ${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.hide ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('hide', args.hide))}` : nothing}${\n        args.show ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('show', args.show))}` : nothing\n    }</omni-password-field>\n  `,\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        prefix: '',\n        suffix: '',\n        hide: '',\n        show: ''\n    },\n    play: async (context) => {\n        const passwordField = within(context.canvasElement).getByTestId<PasswordField>('test-password-field');\n        const interactions = jest.fn();\n        passwordField.addEventListener('input', interactions);\n        passwordField.addEventListener('click', interactions);\n\n        const inputField = passwordField.shadowRoot.getElementById('inputField');\n\n        const showSlotElement = passwordField.shadowRoot.querySelector<HTMLSlotElement>('slot[name=show]');\n        await expect(showSlotElement).toBeTruthy();\n        await userEvent.click(showSlotElement, {\n            pointerEventsCheck: 0\n        });\n        const hideSlotElement = passwordField.shadowRoot.querySelector<HTMLSlotElement>('slot[name=hide]');\n        await expect(hideSlotElement).toBeTruthy();\n        await userEvent.click(hideSlotElement, {\n            pointerEventsCheck: 0\n        });\n\n        await userEvent.type(inputField, 'Value Update', {\n            pointerEventsCheck: 0\n        });\n        const value = 'Value Update';\n\n        // TODO: Fix race conditions in tests\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n        } else {\n            await waitFor(() => expect(inputField).toHaveValue(value), {\n                timeout: 3000\n            });\n\n            await waitFor(() => expect(interactions).toBeCalledTimes(value.length + 1), {\n                timeout: 3000\n            });\n        }\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        },
        {
          "kind": "variable",
          "name": "Custom_Icon_Slot",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-password-field data-testid=\"test-password-field\" label=\"${ifNotEmpty(args.label)}\" ?disabled=\"${args.disabled}\">\n      <omni-lock-open-icon slot=\"show\"></omni-lock-open-icon>\n      <omni-lock-closed-icon slot=\"hide\"></omni-lock-closed-icon>\n    </omni-password-field>\n  `,\n    name: 'Custom Icon Slot',\n    args: {\n        label: 'Custom Icon Slot'\n    },\n    play: async (context) => {\n        const passwordField = within(context.canvasElement).getByTestId<PasswordField>('test-password-field');\n        const slotElement = passwordField.shadowRoot.querySelector<HTMLSlotElement>('slot[name=show]');\n        await expect(slotElement).toBeTruthy();\n\n        const foundSlottedSvgElement = slotElement.assignedElements().find((e) => e.tagName.toLocaleLowerCase() === 'omni-lock-open-icon');\n        await expect(foundSlottedSvgElement).toBeTruthy();\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Icon_Slot",
          "declaration": {
            "name": "Custom_Icon_Slot",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/password-field/PasswordField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Password input control.",
          "name": "PasswordField",
          "cssProperties": [
            {
              "description": "Password field control padding right.",
              "name": "--omni-password-field-control-padding-right"
            },
            {
              "description": "Password field control padding left.",
              "name": "--omni-password-field-control-padding-left"
            },
            {
              "description": "Password field control padding top.",
              "name": "--omni-password-field-control-padding-top"
            },
            {
              "description": "Password field control padding bottom.",
              "name": "--omni-password-field-control-padding-bottom"
            },
            {
              "description": "Password field slot icon color.",
              "name": "--omni-password-field-icon-color"
            },
            {
              "description": "Password field slot width.",
              "name": "--omni-password-field-icon-width"
            },
            {
              "description": "Password field slot height.",
              "name": "--omni-password-field-icon-height"
            },
            {
              "description": "Password field text align.",
              "name": "--omni-password-field-text-align"
            },
            {
              "description": "Password field font color.",
              "name": "--omni-password-field-font-color"
            },
            {
              "description": "Password field font family.",
              "name": "--omni-password-field-font-family"
            },
            {
              "description": "Password field font size.",
              "name": "--omni-password-field-font-size"
            },
            {
              "description": "Password field font weight.",
              "name": "--omni-password-field-font-weight"
            },
            {
              "description": "Password field padding.",
              "name": "--omni-password-field-padding"
            },
            {
              "description": "Password field height.",
              "name": "--omni-password-field-height"
            },
            {
              "description": "Password field width.",
              "name": "--omni-password-field-width"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the password value hidden state.",
              "name": "hide"
            },
            {
              "description": "Replaces the icon for the checked value visible state.",
              "name": "show"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_keyInput"
            },
            {
              "kind": "method",
              "name": "_iconClicked",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formContainerElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prefixSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setLabelPosition",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusGained",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusLost",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "/src/core/OmniFormElement.js"
          },
          "tagName": "omni-password-field",
          "import": "```js\nimport '@capitec/omni-components/password-field';\n```",
          "customElement": true,
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PasswordField",
          "declaration": {
            "name": "PasswordField",
            "module": "src/password-field/PasswordField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-password-field",
          "declaration": {
            "name": "PasswordField",
            "module": "src/password-field/PasswordField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/password-field/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/password-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./PasswordField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pin-field/PinField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-pin-field\n      data-testid=\"test-pin-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\">${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.hide ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('hide', args.hide))}` : nothing}${\n        args.show ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('show', args.show))}` : nothing\n    }</omni-pin-field>\n  `,\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        prefix: '',\n        suffix: '',\n        hide: '',\n        show: ''\n    },\n    play: async (context) => {\n        const pinField = within(context.canvasElement).getByTestId<PinField>('test-pin-field');\n        // Required to clear userEvent Symbol that keeps hidden state of previously typed values via userEvent. If not cleared this cannot be run multiple times with the same results\n\n        const interactions = jest.fn();\n        pinField.addEventListener('input', interactions);\n        pinField.addEventListener('click', interactions);\n\n        const inputField = pinField.shadowRoot.getElementById('inputField') as HTMLInputElement;\n        setUIValueClean(inputField);\n\n        const showSlotElement = pinField.shadowRoot.querySelector<HTMLSlotElement>('slot[name=hide]');\n        await expect(showSlotElement).toBeTruthy();\n        await userEvent.click(showSlotElement, {\n            pointerEventsCheck: 0\n        });\n        const hideSlotElement = pinField.shadowRoot.querySelector<HTMLSlotElement>('slot[name=show]');\n        await expect(hideSlotElement).toBeTruthy();\n        await userEvent.click(hideSlotElement, {\n            pointerEventsCheck: 0\n        });\n\n        await userEvent.type(inputField, '1234', {\n            pointerEventsCheck: 0\n        });\n        const value = 1234;\n\n        // Required to clear userEvent Symbol that keeps hidden state of previously typed values via userEvent. If not cleared this cannot be run multiple times with the same results\n        setUIValueClean(inputField);\n\n        // TODO: Fix race conditions in tests\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n        } else {\n            await waitFor(() => expect(inputField).toHaveValue(value), {\n                timeout: 3000\n            });\n\n            await waitFor(() => expect(interactions).toBeCalledTimes(value.toString().length + 1), {\n                timeout: 3000\n            });\n        }\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/pin-field/PinField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pin-field/PinField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Pin input control.",
          "name": "PinField",
          "cssProperties": [
            {
              "description": "Pin field control padding right.",
              "name": "--omni-pin-field-control-padding-right"
            },
            {
              "description": "Pin field control padding left.",
              "name": "--omni-pin-field-control-padding-left"
            },
            {
              "description": "Pin field control padding top.",
              "name": "--omni-pin-field-control-padding-top"
            },
            {
              "description": "Pin field control padding bottom.",
              "name": "--omni-pin-field-control-padding-bottom"
            },
            {
              "description": "Pin field slot icon color.",
              "name": "--omni-pin-field-icon-color"
            },
            {
              "description": "Pin field slot width.",
              "name": "--omni-pin-field-icon-width"
            },
            {
              "description": "Pin field slot height.",
              "name": "--omni-pin-field-icon-height"
            },
            {
              "description": "Pin field text align.",
              "name": "--omni-pin-field-text-align"
            },
            {
              "description": "Pin field font color.",
              "name": "--omni-pin-field-font-color"
            },
            {
              "description": "Pin field font family.",
              "name": "--omni-pin-field-font-family"
            },
            {
              "description": "Pin field font size.",
              "name": "--omni-pin-field-font-size"
            },
            {
              "description": "Pin field font weight.",
              "name": "--omni-pin-field-font-weight"
            },
            {
              "description": "Pin field padding.",
              "name": "--omni-pin-field-padding"
            },
            {
              "description": "Pin field height.",
              "name": "--omni-pin-field-height"
            },
            {
              "description": "Pin field width.",
              "name": "--omni-pin-field-width"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the pin value hidden state.",
              "name": "hide"
            },
            {
              "description": "Replaces the icon for the checked value visible state.",
              "name": "show"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "showPin",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isWebkit",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_keyDown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyInput"
            },
            {
              "kind": "method",
              "name": "_iconClicked",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formContainerElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prefixSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setLabelPosition",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusGained",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusLost",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "/src/core/OmniFormElement.js"
          },
          "tagName": "omni-pin-field",
          "import": "```js\nimport '@capitec/omni-components/pin-field';\n```",
          "customElement": true,
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PinField",
          "declaration": {
            "name": "PinField",
            "module": "src/pin-field/PinField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-pin-field",
          "declaration": {
            "name": "PinField",
            "module": "src/pin-field/PinField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pin-field/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/pin-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./PinField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/Radio.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-radio\n      data-testid=\"test-radio\"\n      label=\"${ifNotEmpty(args.label)}\"\n      .data=\"${args.data}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?checked=\"${args.checked}\"\n      ?disabled=\"${args.disabled}\"></omni-radio>\n  `,\n    name: 'Interactive',\n    args: {\n        label: '',\n        data: {},\n        hint: '',\n        error: '',\n        checked: false,\n        disabled: false\n    },\n    play: async (context) => {\n        const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n        radio.focus();\n\n        const content = radio.shadowRoot.getElementById('content');\n        const valueChange = jest.fn();\n        radio.addEventListener('value-change', valueChange);\n\n        await userEvent.click(content, {\n            pointerEventsCheck: 0\n        });\n        await fireEvent.keyDown(content, {\n            key: ' ',\n            code: 'Space'\n        });\n\n        await expect(valueChange).toBeCalledTimes(2);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-radio data-testid=\"test-radio\" label=\"${args.label}\"></omni-radio> `,\n    args: {\n        label: 'Label'\n    },\n    play: async (context) => {\n        const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n        const labelElement = radio.shadowRoot.getElementById('label');\n        await expect(labelElement).toHaveTextContent(Label.args.label);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Hint",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" hint=\"${args.hint}\"></omni-radio> `,\n    args: {\n        label: 'Hint',\n        hint: 'This is a hint'\n    },\n    play: async (context) => {\n        const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n        const element = radio.shadowRoot.querySelector<HTMLElement>('.hint');\n        await expect(element).toHaveTextContent(Hint.args.hint);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Error_Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    name: 'Error', // Explicitly named as error, the exported name cannot be 'Error' as that is reserved\n    render: (args: Args) => html` <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" error=\"${args.error}\"></omni-radio> `,\n    args: {\n        label: 'Error',\n        error: 'This is an error state'\n    },\n    play: async (context) => {\n        const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n        const element = radio.shadowRoot.querySelector<HTMLElement>('.error');\n        await expect(element).toHaveTextContent(Error_Label.args.error);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Checked",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" ?checked=\"${args.checked}\"></omni-radio> `,\n    args: {\n        label: 'Checked',\n        checked: true\n    },\n    play: async (context) => {\n        const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n        const checkedElement = radio.shadowRoot.querySelector<HTMLElement>('.checked');\n        await expect(checkedElement).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" ?disabled=\"${args.disabled}\"></omni-radio> `,\n    args: {\n        label: 'Disabled',\n        disabled: true\n    },\n    play: async (context) => {\n        const radio = within(context.canvasElement).getByTestId<Radio>('test-radio');\n        const valueChange = jest.fn();\n        radio.addEventListener('value-change', valueChange);\n\n        const disabledElement = radio.shadowRoot.querySelector<HTMLElement>('.disabled');\n        await expect(disabledElement).toBeTruthy();\n\n        const content = radio.shadowRoot.getElementById('content');\n        await userEvent.click(content, {\n            pointerEventsCheck: 0\n        });\n        await fireEvent.keyDown(content, {\n            key: ' ',\n            code: 'Space'\n        });\n        await expect(valueChange).toBeCalledTimes(0);\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checked",
          "declaration": {
            "name": "Checked",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/radio/Radio.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/Radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to select a single value from a group of values.",
          "name": "Radio",
          "cssProperties": [
            {
              "description": "Width.",
              "name": "--omni-radio-width"
            },
            {
              "description": "Height.",
              "name": "--omni-radio-height"
            },
            {
              "description": "Padding.",
              "name": "--omni-radio-padding"
            },
            {
              "description": "Label Font Color.",
              "name": "--omni-label-font-color"
            },
            {
              "description": "Label Font Family.",
              "name": "--omni-label-font-family"
            },
            {
              "description": "Label Font Size.",
              "name": "--omni-label-font-size"
            },
            {
              "description": "Label Font Weight.",
              "name": "--omni-radio-label-font-weight"
            },
            {
              "description": "Label Line Height.",
              "name": "--omni-radio-label-line-height"
            },
            {
              "description": "Label Spacing.",
              "name": "--omni-radio-label-spacing"
            },
            {
              "description": "Hint Font Color.",
              "name": "--omni-input-hint-label-font-color"
            },
            {
              "description": "Hint Font Family.",
              "name": "--omni-input-hint-label-font-family"
            },
            {
              "description": "Hint Font Size.",
              "name": "--omni-input-hint-label-font-size"
            },
            {
              "description": "Hint Font Weight.",
              "name": "--omni-input-hint-label-font-weight"
            },
            {
              "description": "Error Font Color.",
              "name": "--omni-input-error-label-font-color"
            },
            {
              "description": "Error Font Family.",
              "name": "--omni-input-error-label-font-family"
            },
            {
              "description": "Error Font Size.",
              "name": "--omni-input-error-label-font-size"
            },
            {
              "description": "Error Font Weight.",
              "name": "--omni-input-error-label-font-weight"
            },
            {
              "description": "Background Color.",
              "name": "--omni-radio-background-color"
            },
            {
              "description": "Border Width.",
              "name": "--omni-radio-border-width"
            },
            {
              "description": "Border Style.",
              "name": "--omni-radio-border-style"
            },
            {
              "description": "Border Color.",
              "name": "--omni-radio-border-color"
            },
            {
              "description": "Border Radius.",
              "name": "--omni-radio-border-radius"
            },
            {
              "description": "Indicator Border Width.",
              "name": "--omni-radio-indicator-border-width"
            },
            {
              "description": "Indicator Border Color.",
              "name": "--omni-radio-indicator-border-color"
            },
            {
              "description": "Indicator Border Radius.",
              "name": "--omni-radio-border-radius"
            },
            {
              "description": "Indicator Color.",
              "name": "--omni-radio-indicator-color"
            },
            {
              "description": "Checked Background color.",
              "name": "--omni-radio-checked-background-color"
            },
            {
              "description": "Hover Box Shadow.",
              "name": "--omni-radio-hover-box-shadow"
            },
            {
              "description": "Hover Background Color.",
              "name": "--omni-radio-hover-background-color"
            },
            {
              "description": "Disabled Border Color.",
              "name": "--omni-radio-disabled-border-color"
            },
            {
              "description": "Disabled Background Color.",
              "name": "--omni-radio-disabled-background-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "A hint message to assist the user.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is checked or not.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "_click",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_toggleChecked",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "value-change",
              "type": {
                "text": "CustomEvent<{ old: Boolean; new: Boolean; }>"
              },
              "description": "Dispatched when the control value is changed to either on or off."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "A hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint"
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "fieldName": "error",
              "attribute": "error"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is checked or not.",
              "fieldName": "checked",
              "attribute": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "tagName": "omni-radio",
          "import": "```js\nimport '@capitec/omni-components/radio';\n```",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Radio",
          "declaration": {
            "name": "Radio",
            "module": "src/radio/Radio.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-radio",
          "declaration": {
            "name": "Radio",
            "module": "src/radio/Radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Radio.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/render-element/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/render-element/RenderElement.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "As_Lit",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    source: () => `\n                \n<!-- Bound function used (<script> tags only for syntax highlighting) -->\n<script>\nasync function renderAsLit(data: object) {\n    await new Promise<void>((r) => setTimeout(() => r(), 3000));\n    return html\\`<span>\\${JSON.stringify(data)}</span>\\`;\n}\n</script>\n\n...\n                \n<omni-render-element .data=\"\\${this.someData}\" .renderer=\"\\${this.renderAsLit}\"></omni-render-element>\n`,\n    name: 'As Lit',\n    render: (args: Args) => html`\n    <omni-render-element data-testid=\"test-render\" .data=\"${args.data}\" .renderer=\"${args.renderer}\"\n      >${\n          args.loading_indicator ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('loading_indicator', args.loading_indicator))}${'\\r\\n'}` : nothing\n      }</omni-render-element\n    >\n  `,\n    args: {\n        data: {\n            hello: 'world',\n            'other-data': false\n        },\n        renderer: renderAsLit,\n        loading_indicator: ''\n    } as Args,\n    play: async (context) => {\n        const renderElement = within(context.canvasElement).getByTestId<RenderElement>('test-render');\n        const data = JSON.parse(JSON.stringify(context.args.data));\n\n        // await expect(renderElement.renderRoot.querySelector('omni-loading-icon')).toBeTruthy();\n\n        console.log(`Running as '${navigator.userAgent}'`);\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n            await new Promise<void>((r) => setTimeout(() => r(), 3000));\n        } else {\n            await new Promise<void>((r) => setTimeout(() => r(), 10000));\n        }\n\n        const span1 = await querySelectorAsync(renderElement.renderRoot, 'span');\n        await expect(span1).toHaveTextContent(JSON.stringify(data));\n\n        data.hello = 'everyone';\n        renderElement.data = { ...data };\n\n        const loading = await querySelectorAsync(renderElement.renderRoot, 'omni-loading-icon');\n        await expect(loading).toBeTruthy();\n\n        const span2 = await querySelectorAsync(renderElement.renderRoot, 'span');\n        await expect(span2).toHaveTextContent(JSON.stringify(data));\n\n        // Cleanup\n        renderElement.data = context.args.data;\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "As_HTML_Element",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => {\n        const addValues = async () => {\n            let renderEl: RenderElement = undefined;\n            while (!renderEl) {\n                await new Promise<void>((r) => setTimeout(() => r(), 200));\n                renderEl = document.getElementById('renderElI') as RenderElement;\n            }\n\n            renderEl.renderer = args.renderer;\n            renderEl.data = args.data;\n        };\n        addValues();\n        return html` <omni-render-element id=\"renderElI\" data-testid=\"test-render\"></omni-render-element> `;\n    },\n    name: 'As HTML Element',\n    source: () => `\n<omni-render-element id=\"renderElI\"></omni-render-element>\n<script defer>\n    async function renderAsElement(data) {\n        await new Promise((r) => setTimeout(() => r(), 3000));\n        const span = document.createElement('span');\n        span.appendChild(document.createTextNode(JSON.stringify(data)));\n        span.addEventListener('click', (ev) => alert('Clicked'));\n        return span;\n    }\n    renderEl = document.getElementById('renderElI');\n\n\n    renderEl.renderer = renderAsElement;\n    renderEl.data = {\n            hello: 'world',\n            'other-data': false\n    };\n</script>`,\n    args: {\n        data: {\n            hello: 'world',\n            'other-data': false\n        },\n        renderer: renderAsElement\n    } as Args,\n    play: async (context) => {\n        const renderElement = within(context.canvasElement).getByTestId<RenderElement>('test-render');\n        const data = JSON.parse(JSON.stringify(context.args.data));\n        clicked = jest.fn();\n\n        // await expect(renderElement.renderRoot.querySelector('omni-loading-icon')).toBeTruthy();\n\n        console.log(`Running as '${navigator.userAgent}'`);\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n            await new Promise<void>((r) => setTimeout(() => r(), 3000));\n        } else {\n            await new Promise<void>((r) => setTimeout(() => r(), 10000));\n        }\n\n        const span1 = (await querySelectorAsync(renderElement.renderRoot, 'span')) as HTMLSpanElement;\n        await expect(span1).toHaveTextContent(JSON.stringify(data));\n\n        data.hello = 'everyone';\n        renderElement.data = { ...data };\n\n        const load = await querySelectorAsync(renderElement.renderRoot, 'omni-loading-icon');\n        await expect(load).toBeTruthy();\n\n        const span2 = (await querySelectorAsync(renderElement.renderRoot, 'span')) as HTMLSpanElement;\n        await expect(span2).toHaveTextContent(JSON.stringify(data));\n        await userEvent.click(span2, {\n            pointerEventsCheck: 0\n        });\n        await userEvent.click(span2, {\n            pointerEventsCheck: 0\n        });\n        await expect(clicked).toBeCalledTimes(2);\n\n        clicked = () => alert('Clicked');\n\n        // Cleanup\n        renderElement.data = context.args.data;\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "As_String",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => {\n        const addValues = async () => {\n            let renderEl: RenderElement = undefined;\n            while (!renderEl) {\n                renderEl = document.getElementById('renderElS') as RenderElement;\n                if (!renderEl) await new Promise<void>((r) => setTimeout(() => r(), 200));\n            }\n\n            renderEl.renderer = args.renderer;\n            renderEl.data = args.data;\n        };\n        addValues();\n        return html` <omni-render-element id=\"renderElS\" data-testid=\"test-render\"> </omni-render-element> `;\n    },\n    name: 'As String',\n    source: () => `\n<omni-render-element id=\"renderElS\"></omni-render-element>\n<script defer>\n    async function renderAsString(data) {\n        await new Promise<void>((r) => setTimeout(() => r(), 3000));\n        return \\`<span>\\${JSON.stringify(data)}</span>\\`;\n    }\n    renderEl = document.getElementById('renderElS');\n\n\n    renderEl.renderer = renderAsString;\n    renderEl.data = {\n            hello: 'world',\n            'other-data': false\n    };\n</script>`,\n    args: {\n        data: {\n            hello: 'world',\n            'other-data': false\n        },\n        renderer: renderAsString\n    } as Args,\n    play: async (context) => {\n        const renderElement = within(context.canvasElement).getByTestId<RenderElement>('test-render');\n        const data = JSON.parse(JSON.stringify(context.args.data));\n\n        // await expect(renderElement.renderRoot.querySelector('omni-loading-icon')).toBeTruthy();\n\n        console.log(`Running as '${navigator.userAgent}'`);\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n            await new Promise<void>((r) => setTimeout(() => r(), 3000));\n        } else {\n            await new Promise<void>((r) => setTimeout(() => r(), 10000));\n        }\n\n        const span1 = await querySelectorAsync(renderElement.renderRoot, 'span');\n        await expect(span1).toHaveTextContent(JSON.stringify(data));\n\n        data.hello = 'everyone';\n        renderElement.data = { ...data };\n\n        const loading = await querySelectorAsync(renderElement.renderRoot, 'omni-loading-icon');\n        await expect(loading).toBeTruthy();\n\n        const span2 = await querySelectorAsync(renderElement.renderRoot, 'span');\n        await expect(span2).toHaveTextContent(JSON.stringify(data));\n\n        // Cleanup\n        renderElement.data = context.args.data;\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/render-element/RenderElement.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "As_Lit",
          "declaration": {
            "name": "As_Lit",
            "module": "src/render-element/RenderElement.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "As_HTML_Element",
          "declaration": {
            "name": "As_HTML_Element",
            "module": "src/render-element/RenderElement.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "As_String",
          "declaration": {
            "name": "As_String",
            "module": "src/render-element/RenderElement.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/render-element/RenderElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Element that defers content rendering to a provided function / promise.",
          "name": "RenderElement",
          "cssProperties": [
            {
              "description": "Loading Indicator width",
              "name": "--omni-render-element-loading-indicator-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "RenderFunction"
              },
              "description": "Renderer function"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | Promise<object>"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setChildInstance",
              "privacy": "private",
              "parameters": [
                {
                  "name": "result",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateChildInstance",
              "privacy": "private",
              "parameters": [
                {
                  "name": "result",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_internalRenderer",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<TemplateResult | typeof nothing>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_clearElements",
              "privacy": "private",
              "parameters": [
                {
                  "name": "el",
                  "default": "undefined",
                  "type": {
                    "text": "Element | ShadowRoot"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "data",
              "type": {
                "text": "object | Promise<object>"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "tagName": "omni-render-element",
          "import": "```js\nimport '@capitec/omni-components/render-element';\n```",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RenderElement",
          "declaration": {
            "name": "RenderElement",
            "module": "src/render-element/RenderElement.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-render-element",
          "declaration": {
            "name": "RenderElement",
            "module": "src/render-element/RenderElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/render-element/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./RenderElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-field/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/search-field/SearchField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`\n        <omni-search-field\n            data-testid=\"test-search-field\"\n            label=\"${ifNotEmpty(args.label)}\"\n            value=\"${args.value}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            ?disabled=\"${args.disabled}\">\n            ${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix ? '\\r\\n' : nothing}</omni-search-field>\n    `,\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        prefix: '',\n        suffix: ''\n    },\n    play: async (context) => {\n        const searchField = within(context.canvasElement).getByTestId<SearchField>('test-search-field');\n        const interaction = jest.fn();\n        const click = jest.fn();\n        searchField.addEventListener('input', interaction);\n        searchField.addEventListener('click', click);\n\n        const inputField = searchField.shadowRoot.getElementById('inputField') as HTMLInputElement;\n        // Required to clear userEvent Symbol that keeps hidden state of previously typed values via userEvent. If not cleared this cannot be run multiple times with the same results\n        setUIValueClean(inputField);\n\n        const value = 'Batman';\n        await userEvent.type(inputField, value);\n\n        // TODO: Fix race conditions in tests\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n        } else {\n            await waitFor(() => expect(inputField).toHaveValue(value), {\n                timeout: 3000\n            });\n            await waitFor(() => expect(interaction).toBeCalledTimes(value.length), {\n                timeout: 3000\n            });\n        }\n\n        const clearButton = searchField.shadowRoot.getElementById(`control`);\n        await userEvent.click(clearButton);\n\n        // TODO: Fix race conditions in tests\n        if (navigator.userAgent === 'Test Runner') {\n            console.log('CICD Test - Not Visual');\n        } else {\n            await waitFor(() => expect(inputField).toHaveValue(''), {\n                timeout: 3000\n            });\n        }\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "ErrorLabel"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ErrorLabel",
          "declaration": {
            "name": "ErrorLabel",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/search-field/SearchField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-field/SearchField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Search input control.",
          "name": "SearchField",
          "cssProperties": [
            {
              "description": "Search field text align.",
              "name": "--omni-search-field-text-align"
            },
            {
              "description": "Search field font color.",
              "name": "--omni-search-field-font-color"
            },
            {
              "description": "Search field font family.",
              "name": "--omni-search-field-font-family"
            },
            {
              "description": "Search field font size.",
              "name": "--omni-search-field-font-size"
            },
            {
              "description": "Search field font weight.",
              "name": "--omni-search-field-font-weight"
            },
            {
              "description": "Search field padding.",
              "name": "--omni-search-field-padding"
            },
            {
              "description": "Search field height.",
              "name": "--omni-search-field-height"
            },
            {
              "description": "Search field width.",
              "name": "--omni-search-field-width"
            },
            {
              "description": "Search field control right margin.",
              "name": "--omni-search-field-control-margin-right"
            },
            {
              "description": "Search field control left margin.",
              "name": "--omni-search-field-control-margin-left"
            },
            {
              "description": "Search field control width.",
              "name": "--omni-search-field-control-width"
            },
            {
              "description": "Search field clear icon color.",
              "name": "--omni-search-field-clear-icon-color"
            },
            {
              "description": "Search field clear icon width.",
              "name": "--omni-search-field-clear-icon-width"
            },
            {
              "description": "Search field search icon color.",
              "name": "--omni-search-field-search-icon-color"
            },
            {
              "description": "Search field search icon width.",
              "name": "--omni-search-field-search-icon-width"
            },
            {
              "description": "Search field search icon left margin.",
              "name": "--omni-search-field-search-icon-margin-left"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_keyInput"
            },
            {
              "kind": "method",
              "name": "_clearField",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formContainerElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prefixSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setLabelPosition",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusGained",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusLost",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "/src/core/OmniFormElement.js"
          },
          "tagName": "omni-search-field",
          "import": "```js\nimport '@capitec/omni-components/search-field';\n```",
          "customElement": true,
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchField",
          "declaration": {
            "name": "SearchField",
            "module": "src/search-field/SearchField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-search-field",
          "declaration": {
            "name": "SearchField",
            "module": "src/search-field/SearchField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./SearchField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/select/Select.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select\n            data-testid=\"test-select\"\n            label=\"${ifNotEmpty(args.label)}\"\n            value=\"${args.value}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            .items=\"${args.items}\"\n            display-field=\"${args.displayField}\"\n            .renderItem=\"${args.renderItem}\"\n            idField=\"${args.idField}\"\n            ?disabled=\"${args.disabled}\"\n            >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }\n            ${args.loading_indicator ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('loading_indicator', args.loading_indicator))}${'\\r\\n'}` : nothing}${\n        args.prefix || args.suffix ? '\\r\\n' : nothing\n    }</omni-select\n        >\n    `,\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        prefix: '',\n        suffix: '',\n        items: displayItems as Record<string, unknown>[],\n        displayField: 'label',\n        idField: 'id',\n        loading_indicator: ''\n    } as Args,\n    play: async (context) => {\n        const select = within(context.canvasElement).getByTestId<Select>('test-select');\n        const click = jest.fn();\n        const change = jest.fn();\n        select.addEventListener('click', click);\n        select.addEventListener('change', change);\n\n        await userEvent.click(select);\n        await userEvent.click(select);\n\n        await expect(click).toBeCalledTimes(2);\n\n        const controlButton = select.shadowRoot.getElementById('control');\n\n        await expect(controlButton).toBeTruthy();\n\n        await userEvent.click(select);\n\n        const itemContainer = await querySelectorAsync(select.shadowRoot, '#items-container');\n        await expect(itemContainer).toBeTruthy();\n\n        const items = select.shadowRoot.getElementById('items');\n        await expect(items).toBeTruthy();\n\n        const item = await querySelectorAsync(select.shadowRoot, '.item');\n\n        await expect(item).toBeTruthy();\n        await userEvent.click(item as HTMLDivElement);\n\n        const selectField = select.shadowRoot.getElementById('select');\n        await expect(selectField).toHaveValue(displayItems[0].label);\n\n        await expect(change).toBeCalledTimes(1);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Async_Per_Item",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select\n            data-testid=\"test-select\"\n            label=\"${ifNotEmpty(args.label)}\"\n            .data=\"${args.data}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            .items=\"${args.items}\"\n            display-field=\"${args.displayField}\"\n            .renderItem=\"${args.renderItem}\"\n            idField=\"${args.idField}\">\n        </omni-select>\n    `,\n    name: 'Async',\n    args: {\n        label: 'Async item renderer function',\n        data: {},\n        items: () => promiseDisplayItems(displayItems),\n        displayField: 'label',\n        idField: 'id',\n        renderItem: async (item: any) => {\n            await new Promise((resolve, reject) => {\n                // Setting 2000 ms time\n                setTimeout(resolve, 2000);\n            });\n            const i = document.createElement('i');\n            i.innerText = item.label;\n            i.style.color = 'red';\n\n            return i;\n        }\n    } as Args,\n    play: async (context) => {\n        const select = within(context.canvasElement).getByTestId<Select>('test-select');\n        const click = jest.fn();\n        const change = jest.fn();\n        select.addEventListener('click', click);\n        select.addEventListener('change', change);\n\n        await userEvent.click(select);\n\n        let item;\n        // TODO: Fix race conditions in tests\n        if (navigator.userAgent === 'Test Runner') {\n            item = await querySelectorAsync(select.shadowRoot, '.item', undefined, 3000);\n        } else {\n            item = await querySelectorAsync(select.shadowRoot, '.item', undefined, 5000);\n        }\n        await userEvent.click(item as HTMLDivElement);\n\n        const selectField = select.shadowRoot.getElementById('select');\n        await expect(selectField).toHaveValue(displayItems[0].label);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Loading_Slot",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select\n            data-testid=\"test-select\"\n            label=\"${ifNotEmpty(args.label)}\"\n            .data=\"${args.data}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            .items=\"${args.items}\"\n            display-field=\"${args.displayField}\"\n            .renderItem=\"${args.renderItem}\"\n            idField=\"${args.idField}\">\n            ${unsafeHTML(assignToSlot('loading_indicator', args.loading_indicator))}\n        </omni-select>\n    `,\n    name: 'Loading Slot',\n    args: {\n        label: 'Loading Slot',\n        data: {},\n        items: () => promiseDisplayItems(displayItems),\n        displayField: 'label',\n        idField: 'id',\n        renderItem: async (item: any) => {\n            await new Promise((resolve, reject) => {\n                // Setting 2000 ms time\n                setTimeout(resolve, 2000);\n            });\n            const i = document.createElement('i');\n            i.innerText = item.label;\n            i.style.color = 'red';\n\n            return i;\n        },\n        loading_indicator: raw`<span>...</span>`\n    } as Args,\n    play: async (context) => {\n        const select = within(context.canvasElement).getByTestId<Select>('test-select');\n        const click = jest.fn();\n        const change = jest.fn();\n        select.addEventListener('click', click);\n        select.addEventListener('change', change);\n\n        await userEvent.click(select);\n\n        let item;\n        // TODO: Fix race conditions in tests\n        if (navigator.userAgent === 'Test Runner') {\n            item = await querySelectorAsync(select.shadowRoot, '.item', undefined, 3000);\n        } else {\n            item = await querySelectorAsync(select.shadowRoot, '.item', undefined, 5000);\n        }\n        await userEvent.click(item as HTMLDivElement);\n\n        const selectField = select.shadowRoot.getElementById('select');\n        await expect(selectField).toHaveValue(displayItems[0].label);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "String_Array",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select\n            data-testid=\"test-select\"\n            label=\"${ifNotEmpty(args.label)}\"\n            .data=\"${args.data}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            .items=\"${args.items}\"\n            display-field=\"${args.displayField}\"\n            .renderItem=\"${args.renderItem}\"\n            idField=\"${args.idField}\">\n        </omni-select>\n    `,\n    name: 'String',\n    args: {\n        label: 'String',\n        data: {},\n        items: stringItems,\n        displayField: 'label',\n        idField: 'id'\n    } as Args,\n    play: async (context) => {\n        const select = within(context.canvasElement).getByTestId<Select>('test-select');\n        const click = jest.fn();\n        const change = jest.fn();\n        select.addEventListener('click', click);\n        select.addEventListener('change', change);\n\n        await userEvent.click(select);\n\n        const item = await querySelectorAsync(select.shadowRoot, '.item');\n        await userEvent.click(item as HTMLDivElement);\n\n        const selectField = select.shadowRoot.getElementById('select');\n        await expect(selectField).toHaveValue(stringItems[0]);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Empty",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select\n            data-testid=\"test-select\"\n            label=\"${ifNotEmpty(args.label)}\"\n            .items=\"${args.items}\"\n            display-field=\"${args.displayField}\"\n            idField=\"${args.idField}\">\n        </omni-select>\n    `,\n    name: 'Empty',\n    args: {\n        label: 'Empty',\n        items: [],\n        displayField: 'label',\n        idField: 'id'\n    } as Args,\n    play: async (context) => {\n        const select = within(context.canvasElement).getByTestId<Select>('test-select');\n        const click = jest.fn();\n        select.addEventListener('click', click);\n        await userEvent.click(select);\n\n        const item = await querySelectorAsync(select.shadowRoot, '.none');\n        await expect(item).toHaveTextContent('No items provided');\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select data-testid=\"test-select\" label=\"${ifNotEmpty(args.label)}\" .items=\"${args.items}\" ?disabled=\"${args.disabled}\">\n        </omni-select>\n    `,\n    name: 'Disabled',\n    args: {\n        label: 'Disabled',\n        disabled: true,\n        items: displayItems as Record<string, unknown>[]\n    } as Args,\n    play: async (context) => {\n        const select = within(context.canvasElement).getByTestId<Select>('test-select');\n        const click = jest.fn();\n        select.addEventListener('click', click);\n        await expect(() => userEvent.click(select)).rejects.toThrow(/pointer-events: none/);\n        await expect(click).toBeCalledTimes(0);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Async_Per_Item",
          "declaration": {
            "name": "Async_Per_Item",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Loading_Slot",
          "declaration": {
            "name": "Loading_Slot",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "String_Array",
          "declaration": {
            "name": "String_Array",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Empty",
          "declaration": {
            "name": "Empty",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/select/Select.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select/Select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to get / set a value within a list of options.",
          "name": "Select",
          "cssProperties": [
            {
              "description": "Select component input field text align.",
              "name": "--omni-select-field-text-align"
            },
            {
              "description": " Select component input field font color.",
              "name": "--omni-select-field-font-color"
            },
            {
              "description": "Select component input field font family.",
              "name": "--omni-select-field-font-family"
            },
            {
              "description": "Select component input field font size.",
              "name": "--omni-select-field-font-size"
            },
            {
              "description": "Select component input field font weight.",
              "name": "--omni-select-field-font-weight"
            },
            {
              "description": "Select component input field padding.",
              "name": "--omni-select-field-padding"
            },
            {
              "description": "Select component input field height.",
              "name": "--omni-select-field-height"
            },
            {
              "description": "Select component input field width.",
              "name": "--omni-select-field-width"
            },
            {
              "description": "Select control right margin.",
              "name": "--omni-select-control-margin-right"
            },
            {
              "description": "Select control left margin.",
              "name": "--omni-select-control-margin-left"
            },
            {
              "description": "Select control width.",
              "name": "--omni-select-control-width"
            },
            {
              "description": "Select control icon width.",
              "name": "--omni-select-control-icon-width"
            },
            {
              "description": "Select control icon color.",
              "name": "--omni-select-control-icon-color"
            },
            {
              "description": "Select items container box shadow.",
              "name": "--omni-select-items-container-box-shadow"
            },
            {
              "description": "Select items container background color.",
              "name": "--omni-select-items-container-background-color"
            },
            {
              "description": "Select item container for mobile left.",
              "name": "--omni-select-mobile-items-container-left"
            },
            {
              "description": "Select item container for mobile right.",
              "name": "--omni-select-mobile-items-container-right"
            },
            {
              "description": "Select item container for mobile bottom.",
              "name": "--omni-select-mobile-items-container-bottom"
            },
            {
              "description": "Select item container for mobile top left radius.",
              "name": "--omni-select-mobile-items-container-border-top-left-radius"
            },
            {
              "description": "Select item container for mobile right left radius.",
              "name": "--omni-select-mobile-items-container-border-top-right-radius"
            },
            {
              "description": "Select items container width",
              "name": "--omni-select-items-container-width"
            },
            {
              "description": "Select items container top.",
              "name": "--omni-select-items-container-top"
            },
            {
              "description": "Select items container top when rendered at the bottom.",
              "name": "--omni-select-items-container-render-bottom-top"
            },
            {
              "description": "Select item header left.",
              "name": "--omni-select-item-header-left"
            },
            {
              "description": "Select item header right.",
              "name": "--omni-select-item-header-right"
            },
            {
              "description": "Select item header font family.",
              "name": "--omni-select-item-header-font-family"
            },
            {
              "description": "Select item header font size.",
              "name": "--omni-select-item-header-font-size"
            },
            {
              "description": "Select item header font weight.",
              "name": "--omni-select-item-header-font-weight"
            },
            {
              "description": "Select item header font background color.",
              "name": "--omni-select-item-header-font-background-color"
            },
            {
              "description": "Select item header top padding.",
              "name": "--omni-select-item-header-padding-top"
            },
            {
              "description": "Select item head bottom padding.",
              "name": "--omni-select-item-header-padding-bottom"
            },
            {
              "description": "Select item head right padding.",
              "name": "--omni-select-item-header-padding-right"
            },
            {
              "description": "Select item head left padding.",
              "name": "--omni-select-item-header-padding-left"
            },
            {
              "description": "Select item header top left border radius.",
              "name": "--omni-select-item-header-item-border-top-left-radius"
            },
            {
              "description": "Select item header top right border radius.",
              "name": "--omni-select-item-header-item-border-top-right-radius"
            },
            {
              "description": "Select items height.",
              "name": "--omni-select-items-height"
            },
            {
              "description": "Select items width.",
              "name": "--omni-select-items-width"
            },
            {
              "description": "Select item font color.",
              "name": "--omni-select-item-font-color"
            },
            {
              "description": "Select item font family.",
              "name": "--omni-select-item-font-family"
            },
            {
              "description": "Select item font weight.",
              "name": "--omni-select-item-font-weight"
            },
            {
              "description": "Select item top padding.",
              "name": "--omni-select-item-padding-top"
            },
            {
              "description": "Select item bottom padding.",
              "name": "--omni-select-item-padding-bottom"
            },
            {
              "description": "Select item left padding.",
              "name": "--omni-select-item-padding-left"
            },
            {
              "description": "Select item right padding.",
              "name": "--omni-select-item-padding-right"
            },
            {
              "description": "Select item width.",
              "name": "--omni-select-item-width"
            },
            {
              "description": "Select item hover background color.",
              "name": "--omni-select-item-hover-background-color"
            },
            {
              "description": "Selected item color.",
              "name": "--omni-select-item-selected-color"
            },
            {
              "description": "Select item hover.",
              "name": "--omni-select-item-none-hover"
            },
            {
              "description": "Select loading indicator width.",
              "name": "--omni-select-loading-indicator-width"
            },
            {
              "description": "Select loading indicator height.",
              "name": "--omni-select-loading-indicator-height"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_selectElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_itemsContainer",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "SelectItems | (() => SelectItems)"
              },
              "description": "Selectable items of the select component.",
              "attribute": "items",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "displayField",
              "type": {
                "text": "string"
              },
              "description": "Field of the item to display as one of the selectable options.",
              "attribute": "display-field",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "idField",
              "type": {
                "text": "string"
              },
              "default": "'id'",
              "description": "Id field of the items provided.",
              "attribute": "id-field",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emptyMessage",
              "type": {
                "text": "string"
              },
              "default": "'No items provided'",
              "description": "Message displayed in the items container when no items are bound to the component.",
              "attribute": "empty-message",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderItem",
              "type": {
                "text": "RenderFunction"
              },
              "description": "Render function for each item."
            },
            {
              "kind": "field",
              "name": "_popUp",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_bottomOfViewport",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isMobile",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_inputClick"
            },
            {
              "kind": "method",
              "name": "_windowClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_controlClick"
            },
            {
              "kind": "method",
              "name": "_togglePopup"
            },
            {
              "kind": "method",
              "name": "_onItemClick",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "Record<string, unknown> | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dimensionsCheck"
            },
            {
              "kind": "method",
              "name": "_bottomCheck"
            },
            {
              "kind": "method",
              "name": "_mobileCheck"
            },
            {
              "kind": "method",
              "name": "_itemsMaxHeightChange",
              "parameters": [
                {
                  "name": "el",
                  "optional": true,
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderOptions"
            },
            {
              "kind": "method",
              "name": "_renderOption",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "Record<string, unknown> | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formContainerElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prefixSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setLabelPosition",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusGained",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusLost",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "items",
              "type": {
                "text": "SelectItems | (() => SelectItems)"
              },
              "description": "Selectable items of the select component.",
              "fieldName": "items",
              "attribute": "items"
            },
            {
              "name": "display-field",
              "type": {
                "text": "string"
              },
              "description": "Field of the item to display as one of the selectable options.",
              "fieldName": "displayField",
              "attribute": "display-field"
            },
            {
              "name": "id-field",
              "type": {
                "text": "string"
              },
              "default": "'id'",
              "description": "Id field of the items provided.",
              "fieldName": "idField",
              "attribute": "id-field"
            },
            {
              "name": "empty-message",
              "type": {
                "text": "string"
              },
              "default": "'No items provided'",
              "description": "Message displayed in the items container when no items are bound to the component.",
              "fieldName": "emptyMessage",
              "attribute": "empty-message"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "/src/core/OmniFormElement.js"
          },
          "tagName": "omni-select",
          "import": "```js\nimport '@capitec/omni-components/select';\n```",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "src/select/Select.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-select",
          "declaration": {
            "name": "Select",
            "module": "src/select/Select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Select.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/Switch.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-switch\n      data-testid=\"test-switch\"\n      label=\"${ifNotEmpty(args.label)}\"\n      .data=\"${args.data}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?checked=\"${args.checked}\"\n      ?disabled=\"${args.disabled}\"></omni-switch>\n  `,\n    name: 'Interactive',\n    args: {\n        label: '',\n        data: {},\n        hint: '',\n        error: '',\n        checked: false,\n        disabled: false\n    },\n    play: async (context) => {\n        const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n        const valueChange = jest.fn();\n        switchElement.addEventListener('value-change', valueChange);\n\n        const content = switchElement.shadowRoot.getElementById('content');\n        await userEvent.click(content, {\n            pointerEventsCheck: 0\n        });\n        await fireEvent.keyDown(content, {\n            key: ' ',\n            code: 'Space'\n        });\n\n        await expect(valueChange).toBeCalledTimes(2);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-switch data-testid=\"test-switch\" label=\"${args.label}\"></omni-switch> `,\n    args: {\n        label: 'Label'\n    },\n    play: async (context) => {\n        const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n        const labelElement = switchElement.shadowRoot.querySelector<HTMLElement>('.label');\n        await expect(labelElement).toHaveTextContent(Label.args.label);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Hint",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-switch data-testid=\"test-switch\" label=\"${args.label}\" hint=\"${args.hint}\"></omni-switch> `,\n    args: {\n        label: 'Hint',\n        hint: 'This is a hint'\n    },\n    play: async (context) => {\n        const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n        const element = switchElement.shadowRoot.querySelector<HTMLElement>('.hint');\n        await expect(element).toHaveTextContent(Hint.args.hint);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Error_Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    name: 'Error', // Explicitly named as error, the exported name cannot be 'Error' as that is reserved\n    render: (args: Args) => html` <omni-switch data-testid=\"test-switch\" label=\"${args.label}\" error=\"${args.error}\"></omni-switch> `,\n    args: {\n        label: 'Error',\n        error: 'This is an error state'\n    },\n    play: async (context) => {\n        const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n        const element = switchElement.shadowRoot.querySelector<HTMLElement>('.error');\n        await expect(element).toHaveTextContent(Error_Label.args.error);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Checked",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-switch data-testid=\"test-switch\" label=\"${args.label}\" ?checked=\"${args.checked}\"></omni-switch> `,\n    args: {\n        label: 'Checked',\n        checked: true\n    },\n    play: async (context) => {\n        const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n        const checkedElement = switchElement.shadowRoot.querySelector<HTMLElement>('.checked');\n        await expect(checkedElement).toBeTruthy();\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-switch data-testid=\"test-switch\" label=\"${args.label}\" ?disabled=\"${args.disabled}\"></omni-switch> `,\n    args: {\n        label: 'Disabled',\n        disabled: true\n    },\n    play: async (context) => {\n        const switchElement = within(context.canvasElement).getByTestId<Switch>('test-switch');\n        const valueChange = jest.fn();\n        switchElement.addEventListener('value-change', valueChange);\n\n        const disabledElement = switchElement.shadowRoot.querySelector<HTMLElement>('.disabled');\n        await expect(disabledElement).toBeTruthy();\n\n        const content = switchElement.shadowRoot.getElementById('content');\n        await userEvent.click(content, {\n            pointerEventsCheck: 0\n        });\n        await fireEvent.keyDown(content, {\n            key: ' ',\n            code: 'Space'\n        });\n        await expect(valueChange).toBeCalledTimes(0);\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checked",
          "declaration": {
            "name": "Checked",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/switch/Switch.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/Switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to switch a value on or off.",
          "name": "Switch",
          "cssProperties": [
            {
              "description": "Label font color.",
              "name": "--omni-switch-label-font-color"
            },
            {
              "description": "Label font family.",
              "name": "--omni-switch-label-font-family"
            },
            {
              "description": "Label font size.",
              "name": "--omni-switch-label-font-size"
            },
            {
              "description": "Label font weight.",
              "name": "--omni-switch-label-font-weight"
            },
            {
              "description": "Label left margin spacing.",
              "name": "--omni-switch-label-spacing"
            },
            {
              "description": "Hint text font color.",
              "name": "--omni-switch-input-hint-label-font-color"
            },
            {
              "description": "Hint text font family.",
              "name": "--omni-switch-input-hint-label-font-family"
            },
            {
              "description": "Hint text font size.",
              "name": "--omni-switch-input-hint-label-font-size"
            },
            {
              "description": "Hint text font weight.",
              "name": "--omni-switch-input-hint-label-font-weight"
            },
            {
              "description": "Error text font color.",
              "name": "--omni-switch-input-error-label-font-color"
            },
            {
              "description": "Error text font family.",
              "name": "--omni-switch-input-error-label-font-family"
            },
            {
              "description": "Error text font size.",
              "name": "--omni-switch-input-error-label-font-size"
            },
            {
              "description": "Error text font weight.",
              "name": "--omni-switch-input-error-label-font-weight"
            },
            {
              "description": "Track width.",
              "name": "--omni-switch-track-width"
            },
            {
              "description": "Track height.",
              "name": "--omni-switch-track-height"
            },
            {
              "description": "Track background color.",
              "name": "--omni-switch-track-background-color"
            },
            {
              "description": "Track checked background color.",
              "name": "--omni-switch-checked-track-background-color"
            },
            {
              "description": "Track disabled background color.",
              "name": "--omni-switch-disabled-track-background-color"
            },
            {
              "description": "Track border radius.",
              "name": "--omni-switch-track-border-radius"
            },
            {
              "description": "Track inset margins.",
              "name": "--omni-switch-track-inset"
            },
            {
              "description": "Knob height.",
              "name": "--omni-switch-knob-height"
            },
            {
              "description": "Knob width.",
              "name": "--omni-switch-knob-width"
            },
            {
              "description": "Knob background color.",
              "name": "--omni-switch-knob-background-color"
            },
            {
              "description": "Knob checked background color.",
              "name": "--omni-switch-checked-knob-background-color"
            },
            {
              "description": "Knob disabled background color.",
              "name": "--omni-switch-disabled-knob-background-color"
            },
            {
              "description": "Knob box shadow.",
              "name": "--omni-switch-knob-box-shadow"
            },
            {
              "description": "Knob hover box shadow.",
              "name": "--omni-switch-knob-hover-box-shadow"
            },
            {
              "description": "Knob checked hover box shadow.",
              "name": "--omni-switch-checked-hover-knob-box-shadow"
            },
            {
              "description": "Knob disabled hover box shadow.",
              "name": "--omni-switch-disabled-knob-box-shadow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is checked or not.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "_click",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_switchChecked",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_keyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "value-change",
              "type": {
                "text": "CustomEvent<{ old: Boolean; new: Boolean; }>"
              },
              "description": "Dispatched when the switch checked state is changed."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint"
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "An error message to guide users to correct a mistake.",
              "fieldName": "error",
              "attribute": "error"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is checked or not.",
              "fieldName": "checked",
              "attribute": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "tagName": "omni-switch",
          "import": "```js\nimport '@capitec/omni-components/switch';\n```",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Switch",
          "declaration": {
            "name": "Switch",
            "module": "src/switch/Switch.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-switch",
          "declaration": {
            "name": "Switch",
            "module": "src/switch/Switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Switch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field/TextField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`\n    <omni-text-field\n      data-testid=\"test-text-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\"\n      >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix ? '\\r\\n' : nothing}</omni-text-field>\n  `,\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        prefix: '',\n        suffix: ''\n    },\n    play: async (context) => {\n        const textField = within(context.canvasElement).getByTestId<TextField>('test-text-field');\n        const input = jest.fn();\n        textField.addEventListener('input', input);\n\n        const inputField = textField.shadowRoot.getElementById('inputField');\n\n        await userEvent.type(inputField, 'Value Update', {\n            pointerEventsCheck: 0\n        });\n        const value = 'Value Update';\n        await expect(inputField).toHaveValue(value);\n\n        await expect(input).toBeCalledTimes(value.length);\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/text-field/TextField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field/TextField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to input text.",
          "name": "TextField",
          "cssProperties": [
            {
              "description": "Text field text align.",
              "name": "--omni-text-field-text-align"
            },
            {
              "description": "Text field font color.",
              "name": "--omni-text-field-font-color"
            },
            {
              "description": "Text field font family.",
              "name": "--omni-text-field-font-family"
            },
            {
              "description": "Text field font size.",
              "name": "--omni-text-field-font-size"
            },
            {
              "description": "Text field font weight.",
              "name": "--omni-text-field-font-weight"
            },
            {
              "description": "Text field padding.",
              "name": "--omni-text-field-padding"
            },
            {
              "description": "Text field height.",
              "name": "--omni-text-field-height"
            },
            {
              "description": "Text field width.",
              "name": "--omni-text-field-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_keyInput"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formContainerElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prefixSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setLabelPosition",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusGained",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_focusLost",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "/src/core/OmniFormElement.js"
          },
          "tagName": "omni-text-field",
          "import": "```js\nimport '@capitec/omni-components/text-field';\n```",
          "customElement": true,
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown>"
              },
              "default": "null",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextField",
          "declaration": {
            "name": "TextField",
            "module": "src/text-field/TextField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-text-field",
          "declaration": {
            "name": "TextField",
            "module": "src/text-field/TextField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./TextField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/CodeEditor.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CodeEditor",
          "members": [
            {
              "kind": "field",
              "name": "extensions",
              "type": {
                "text": "() => Extension | Promise<Extension>"
              },
              "attribute": "extensions"
            },
            {
              "kind": "field",
              "name": "transformSource",
              "type": {
                "text": "(source: string) => string | Promise<string>"
              },
              "attribute": "transformSource"
            },
            {
              "kind": "field",
              "name": "code",
              "type": {
                "text": "string | Promise<string>"
              },
              "attribute": "code",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "attribute": "read-only",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noTab",
              "type": {
                "text": "boolean"
              },
              "attribute": "no-tab",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "codeParent",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "slotElement",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "editor",
              "type": {
                "text": "EditorView"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "readonlyOrDisabled",
              "privacy": "private",
              "default": "new Compartment()"
            },
            {
              "kind": "field",
              "name": "userExtensions",
              "privacy": "private",
              "default": "new Compartment()"
            },
            {
              "kind": "method",
              "name": "refresh",
              "privacy": "public",
              "parameters": [
                {
                  "name": "getCode",
                  "default": "undefined",
                  "type": {
                    "text": "() => string | Promise<string>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateExtensions",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_copyCode",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_fallbackCopyTextToClipboard",
              "privacy": "private",
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_copyTextToClipboard",
              "privacy": "private",
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_slotChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_readCode",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "slotElement",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_clearElements",
              "privacy": "private",
              "parameters": [
                {
                  "name": "el",
                  "default": "undefined",
                  "type": {
                    "text": "Element | ShadowRoot"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_clearOtherElements",
              "privacy": "private",
              "parameters": [
                {
                  "name": "el",
                  "default": "undefined",
                  "type": {
                    "text": "Element | ShadowRoot"
                  }
                },
                {
                  "name": "onlyChild",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "codemirror-update",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "codemirror-source-change",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "codemirror-loaded",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "extensions",
              "type": {
                "text": "() => Extension | Promise<Extension>"
              },
              "fieldName": "extensions"
            },
            {
              "name": "transformSource",
              "type": {
                "text": "(source: string) => string | Promise<string>"
              },
              "fieldName": "transformSource"
            },
            {
              "name": "code",
              "type": {
                "text": "string | Promise<string>"
              },
              "fieldName": "code"
            },
            {
              "name": "read-only",
              "type": {
                "text": "boolean"
              },
              "fieldName": "readOnly"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "fieldName": "disabled"
            },
            {
              "name": "no-tab",
              "type": {
                "text": "boolean"
              },
              "fieldName": "noTab"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "code-editor",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "code-editor",
          "declaration": {
            "name": "CodeEditor",
            "module": "src/utils/CodeEditor.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/ComponentStoryFormat.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/Directives.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "ifNotEmpty",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Lit directive that only applies when provided value is not falsy(undefined, null, or empty string)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ifNotEmpty",
          "declaration": {
            "name": "ifNotEmpty",
            "module": "src/utils/Directives.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/ExpectDOM.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/utils/ExpectDOM.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/LivePropertyEditor.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LivePropertyEditor",
          "members": [
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "ComponentStoryFormat<any>"
              },
              "attribute": "data"
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "string"
              },
              "attribute": "element",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "ignoreAttributes",
              "type": {
                "text": "string"
              },
              "attribute": "ignore-attributes",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "customElementsPath",
              "type": {
                "text": "string"
              },
              "default": "'./custom-elements.json'",
              "attribute": "custom-elements",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            },
            {
              "kind": "field",
              "name": "slotCodeEditors",
              "type": {
                "text": "NodeListOf<CodeEditor>"
              }
            },
            {
              "kind": "field",
              "name": "_firstRenderCompleted",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "resetSlots",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_propertyChanged",
              "privacy": "private",
              "parameters": [
                {
                  "name": "propertyChangeDetail",
                  "type": {
                    "text": "PropertyChangeEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_currentCodeTheme",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "property-change",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "component-render-complete",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "data",
              "type": {
                "text": "ComponentStoryFormat<any>"
              },
              "fieldName": "data"
            },
            {
              "name": "element",
              "type": {
                "text": "string"
              },
              "fieldName": "element"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "fieldName": "disabled"
            },
            {
              "name": "ignore-attributes",
              "type": {
                "text": "string"
              },
              "fieldName": "ignoreAttributes"
            },
            {
              "name": "custom-elements",
              "type": {
                "text": "string"
              },
              "default": "'./custom-elements.json'",
              "fieldName": "customElementsPath"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "/src/core/OmniElement.js"
          },
          "tagName": "live-property-editor",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "live-property-editor",
          "declaration": {
            "name": "LivePropertyEditor",
            "module": "src/utils/LivePropertyEditor.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/PlayFunction.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/README.md",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/StoryController.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StoryController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              }
            },
            {
              "kind": "field",
              "name": "storyPath",
              "type": {
                "text": "string"
              },
              "default": "storyPath"
            },
            {
              "kind": "field",
              "name": "story",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StoryController",
          "declaration": {
            "name": "StoryController",
            "module": "src/utils/StoryController.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/StoryRenderer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StoryRenderer",
          "members": [
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string"
              },
              "attribute": "path",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tag",
              "type": {
                "text": "string"
              },
              "attribute": "tag",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "string"
              },
              "attribute": "key",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "interactive",
              "type": {
                "text": "boolean"
              },
              "attribute": "interactive",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_interactiveSrc",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_isBusyPlaying",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "_playError",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_showStylesDialog",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "codeEditor",
              "type": {
                "text": "CodeEditor"
              }
            },
            {
              "kind": "field",
              "name": "propertyEditor",
              "type": {
                "text": "LivePropertyEditor"
              }
            },
            {
              "kind": "field",
              "name": "originalInteractiveSrc",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "overrideInteractive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "StoryController"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "customCss",
              "type": {
                "text": "HTMLStyleElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "story",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "customElements",
              "type": {
                "text": "Package"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cssVariables",
              "type": {
                "text": "CSSVariable[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "modal",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleCustomThemeCSSVariableSearch",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderCssVariable",
              "parameters": [
                {
                  "name": "variable",
                  "type": {
                    "text": "CSSVariable"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              }
            },
            {
              "kind": "method",
              "name": "_sortCssVariables",
              "privacy": "private",
              "parameters": [
                {
                  "name": "a",
                  "type": {
                    "text": "CSSVariable"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "text": "CSSVariable"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_cssChanged",
              "privacy": "private",
              "parameters": [
                {
                  "name": "changed",
                  "type": {
                    "text": "CSSVariable"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_showComponentStyles",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_checkCloseModal",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_resetLivePropertyEditor",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getSourceFromLit",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "res",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_play",
              "privacy": "private",
              "parameters": [
                {
                  "name": "story",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "canvasElementQuery",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_createStoryContext",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "story",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "canvasElementQuery",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_transformSource",
              "privacy": "private",
              "parameters": [
                {
                  "name": "input",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_currentCodeTheme",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "path",
              "type": {
                "text": "string"
              },
              "fieldName": "path"
            },
            {
              "name": "tag",
              "type": {
                "text": "string"
              },
              "fieldName": "tag"
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              },
              "fieldName": "key"
            },
            {
              "name": "interactive",
              "type": {
                "text": "boolean"
              },
              "fieldName": "interactive"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "story-renderer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "story-renderer",
          "declaration": {
            "name": "StoryRenderer",
            "module": "src/utils/StoryRenderer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/StoryUtils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "loadCssProperties",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            },
            {
              "name": "cssDeclarations",
              "default": "undefined",
              "type": {
                "text": "Record<\n        string,\n        {\n            control: 'color' | 'text';\n            description: string;\n            category: string;\n            subcategory: string;\n            value: string;\n        }\n    >"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadCustomElementsModuleByFileFor",
          "parameters": [
            {
              "name": "moduleName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadCustomElementsModuleFor",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadSlotFor",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "slotName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadSlotForModule",
          "return": {
            "type": {
              "text": "{ name: string; description: string }"
            }
          },
          "parameters": [
            {
              "name": "elementModule",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "slotName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadDefaultSlotFor",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadDefaultSlotForModule",
          "parameters": [
            {
              "name": "elementModule",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "assignToSlot",
          "parameters": [
            {
              "name": "slotName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "rawHtml",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "markdownCode",
          "parameters": [
            {
              "name": "code",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lang",
              "default": "''",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadFileRemote",
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "formatMarkdownCodeElements",
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lang",
              "default": "'js'",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "markdownCodeToHtml",
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lang",
              "default": "'js'",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "enhanceCodeBlocks",
          "parameters": [
            {
              "name": "parent",
              "type": {
                "text": "Element"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadCustomElementsCodeMirrorCompletions",
          "parameters": [
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadCustomElementsCodeMirrorCompletionsRemote",
          "parameters": [
            {
              "name": "path",
              "default": "'./custom-elements.json'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadCustomElements",
          "parameters": [
            {
              "name": "path",
              "default": "'./custom-elements.json'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "filterJsDocLinks",
          "parameters": [
            {
              "name": "jsdoc",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "raw",
          "parameters": [
            {
              "name": "strings",
              "type": {
                "text": "TemplateStringsArray"
              }
            },
            {
              "name": "values",
              "type": {
                "text": "unknown[]"
              }
            }
          ],
          "description": "Interprets a template literal as a raw HTML string.\n\n```ts\nconst header = (title: string) => raw`<h1>${title}</h1>`;\n```\n\nThe `raw` tag returns a string that can be used directly as ```innerHTML``` or as ```unsafeHTML``` via lit."
        },
        {
          "kind": "function",
          "name": "asRenderString",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "strings",
              "type": {
                "text": "TemplateStringsArray"
              }
            },
            {
              "name": "values",
              "type": {
                "text": "unknown[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "querySelectorAsync",
          "parameters": [
            {
              "name": "parent",
              "type": {
                "text": "Element | ShadowRoot"
              }
            },
            {
              "name": "selector",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "checkFrequencyMs",
              "default": "500",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "timeoutMs",
              "default": "3000",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "setupThemes"
        },
        {
          "kind": "function",
          "name": "setupEleventy"
        },
        {
          "kind": "function",
          "name": "setupTheming"
        },
        {
          "kind": "function",
          "name": "uploadTheme",
          "parameters": [
            {
              "name": "e",
              "type": {
                "text": "Event"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Package",
          "declaration": {
            "name": "Package",
            "package": "custom-elements-manifest/schema"
          }
        },
        {
          "kind": "js",
          "name": "ClassDeclaration",
          "declaration": {
            "name": "ClassDeclaration",
            "package": "custom-elements-manifest/schema"
          }
        },
        {
          "kind": "js",
          "name": "CustomElementDeclaration",
          "declaration": {
            "name": "CustomElementDeclaration",
            "package": "custom-elements-manifest/schema"
          }
        },
        {
          "kind": "js",
          "name": "Declaration",
          "declaration": {
            "name": "Declaration",
            "package": "custom-elements-manifest/schema"
          }
        },
        {
          "kind": "js",
          "name": "CustomElement",
          "declaration": {
            "name": "CustomElement",
            "package": "custom-elements-manifest/schema"
          }
        },
        {
          "kind": "js",
          "name": "ComponentStoryFormat",
          "declaration": {
            "name": "ComponentStoryFormat",
            "module": "./ComponentStoryFormat.js"
          }
        },
        {
          "kind": "js",
          "name": "CSFIdentifier",
          "declaration": {
            "name": "CSFIdentifier",
            "module": "./ComponentStoryFormat.js"
          }
        },
        {
          "kind": "js",
          "name": "PlayFunction",
          "declaration": {
            "name": "PlayFunction",
            "module": "./PlayFunction.js"
          }
        },
        {
          "kind": "js",
          "name": "PlayFunctionContext",
          "declaration": {
            "name": "PlayFunctionContext",
            "module": "./PlayFunction.js"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElements",
          "declaration": {
            "name": "loadCustomElements",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElementsModuleByFileFor",
          "declaration": {
            "name": "loadCustomElementsModuleByFileFor",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElementsModuleFor",
          "declaration": {
            "name": "loadCustomElementsModuleFor",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElementsCodeMirrorCompletions",
          "declaration": {
            "name": "loadCustomElementsCodeMirrorCompletions",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElementsCodeMirrorCompletionsRemote",
          "declaration": {
            "name": "loadCustomElementsCodeMirrorCompletionsRemote",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadSlotFor",
          "declaration": {
            "name": "loadSlotFor",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadSlotForModule",
          "declaration": {
            "name": "loadSlotForModule",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadDefaultSlotFor",
          "declaration": {
            "name": "loadDefaultSlotFor",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadDefaultSlotForModule",
          "declaration": {
            "name": "loadDefaultSlotForModule",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCssProperties",
          "declaration": {
            "name": "loadCssProperties",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadFileRemote",
          "declaration": {
            "name": "loadFileRemote",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "markdownCode",
          "declaration": {
            "name": "markdownCode",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "asRenderString",
          "declaration": {
            "name": "asRenderString",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "filterJsDocLinks",
          "declaration": {
            "name": "filterJsDocLinks",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "formatMarkdownCodeElements",
          "declaration": {
            "name": "formatMarkdownCodeElements",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "markdownCodeToHtml",
          "declaration": {
            "name": "markdownCodeToHtml",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "assignToSlot",
          "declaration": {
            "name": "assignToSlot",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "enhanceCodeBlocks",
          "declaration": {
            "name": "enhanceCodeBlocks",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "raw",
          "declaration": {
            "name": "raw",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "querySelectorAsync",
          "declaration": {
            "name": "querySelectorAsync",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "setupThemes",
          "declaration": {
            "name": "setupThemes",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "setupEleventy",
          "declaration": {
            "name": "setupEleventy",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "setupTheming",
          "declaration": {
            "name": "setupTheming",
            "module": "src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "uploadTheme",
          "declaration": {
            "name": "uploadTheme",
            "module": "src/utils/StoryUtils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Directives.js"
          }
        }
      ]
    }
  ]
}
