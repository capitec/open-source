{"version":3,"file":"PasswordField.spec.js","sourceRoot":"","sources":["../../src/password-field/PasswordField.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    testLabelBehaviour,\n    testHintBehaviour,\n    testErrorBehaviour,\n    testValueBehaviour,\n    testClearableBehaviour,\n    testCustomClearableSlotBehaviour,\n    testPrefixBehaviour,\n    testSuffixBehaviour,\n    testDisabledBehaviour\n} from '../core/OmniInputPlaywright.js';\nimport { test, expect, mockEventListener, withCoverage } from '../utils/JestPlaywright.js';\nimport type { PasswordField } from './PasswordField.js';\n\ntest(`Password Field - Visual and Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/password-field/');\n        await page.evaluate(() => document.fonts.ready);\n\n        const passwordField = page.locator('[data-testid]').first();\n        passwordField.evaluate(async (t: PasswordField) => {\n            t.value = '';\n            await t.updateComplete;\n        });\n        await expect(passwordField).toHaveScreenshot('password-field.png');\n\n        const inputFn = await mockEventListener(passwordField, 'input');\n\n        const showSlotElement = passwordField.locator('slot[name=show]');\n        await expect(showSlotElement).toHaveCount(1);\n        await showSlotElement.click();\n\n        // Confirm that the component matches the provided screenshot should show the unmasked value.\n        await expect(passwordField).toHaveScreenshot('password-field-show.png');\n\n        const hideSlotElement = passwordField.locator('slot[name=hide]');\n        await expect(hideSlotElement).toHaveCount(1);\n        await hideSlotElement.click();\n        await expect(passwordField).toHaveScreenshot('password-field-hide.png');\n\n        const inputField = passwordField.locator('#inputField');\n\n        const value = 'Value Update';\n        await inputField.type(value);\n\n        await expect(inputField).toHaveValue(value);\n\n        await expect(inputFn).toBeCalledTimes(value.length);\n        await expect(passwordField).toHaveScreenshot('password-field-value.png');\n    });\n});\n\ntest(`Password Field - Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/password-field/');\n        await page.evaluate(() => document.fonts.ready);\n\n        const passwordField = page.locator('[data-testid]').first();\n        await expect(passwordField).toHaveScreenshot('password-field-initial.png');\n\n        const showSlotElement = passwordField.locator('slot[name=show]');\n        await showSlotElement.click();\n\n        const hideSlotElement = passwordField.locator('slot[name=hide]');\n        await hideSlotElement.click();\n\n        const inputField = passwordField.locator('#inputField');\n\n        const valueUpdate = 'Value Update';\n        await passwordField.evaluate((p: PasswordField, valueUpdate) => (p.value = valueUpdate), valueUpdate);\n\n        await expect(inputField).toHaveValue(valueUpdate);\n        await expect(passwordField).toHaveScreenshot('password-field-value-update.png');\n    });\n});\n\ntest('Password Field - Label Behaviour', testLabelBehaviour('omni-password-field'));\ntest('Password Field - Hint Behaviour', testHintBehaviour('omni-password-field'));\ntest('Password Field - Error Behaviour', testErrorBehaviour('omni-password-field'));\ntest('Password Field - Value Behaviour', testValueBehaviour('omni-password-field'));\ntest('Password Field - Clearable Behaviour', testClearableBehaviour('omni-password-field'));\ntest('Password Field - Custom Clear Slot Behaviour', testCustomClearableSlotBehaviour('omni-password-field'));\ntest('Password Field - Prefix Behaviour', testPrefixBehaviour('omni-password-field'));\ntest('Password Field - Suffix Behaviour', testSuffixBehaviour('omni-password-field'));\ntest('Password Field - Disabled Behaviour', testDisabledBehaviour('omni-password-field'));\n\ntest(`Password Field - Custom Icon Slot Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/password-field/');\n        await page.evaluate(() => document.fonts.ready);\n\n        const container = page.locator('.Custom_Icon_Slot');\n        const passwordField = container.locator('[data-testid]').first();\n        passwordField.evaluate(async (t: PasswordField) => {\n            t.value = '';\n            await t.updateComplete;\n        });\n        await expect(passwordField).toHaveScreenshot('password-field.png');\n\n        const showSlotElement = passwordField.locator('slot[name=show]');\n        await expect(showSlotElement).toHaveCount(1);\n        await showSlotElement.click({\n            force: true\n        });\n        await expect(passwordField).toHaveScreenshot('password-field-show.png');\n\n        const hideSlotElement = passwordField.locator('slot[name=hide]');\n        await expect(hideSlotElement).toHaveCount(1);\n        await hideSlotElement.click({\n            force: true\n        });\n        await expect(passwordField).toHaveScreenshot('password-field-hide.png');\n\n        const foundSlottedSvgElement = await showSlotElement.evaluate((s: HTMLSlotElement) =>\n            Boolean(s?.assignedElements().find((e) => e.tagName.toLocaleLowerCase() === 'omni-lock-open-icon'))\n        );\n        await expect(foundSlottedSvgElement).toBeTruthy();\n    });\n});\n"]}