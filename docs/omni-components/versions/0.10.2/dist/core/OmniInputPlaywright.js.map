{"version":3,"file":"OmniInputPlaywright.js","sourceRoot":"","sources":["../../src/core/OmniInputPlaywright.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    expect,\n    withCoverage,\n    type PlaywrightTestArgs,\n    type PlaywrightTestOptions,\n    type PlaywrightWorkerArgs,\n    type PlaywrightWorkerOptions,\n    type TestInfo,\n    getStoryArgs,\n    mockEventListener\n} from '../utils/JestPlaywright.js';\nimport type { OmniFormElement } from './OmniFormElement.js';\nimport type { BaseArgs } from './OmniInputStories.js';\n\nfunction asDirectoryName(omniElementTag: string) {\n    return omniElementTag.replace('omni-', '');\n}\n\nexport const testLabelBehaviour = (tagName: string, storyExport = 'Label'): TestFunction => {\n    return async ({ page }) => {\n        await withCoverage(page, async () => {\n            await page.goto(`/components/${asDirectoryName(tagName)}/`);\n\n            await page.waitForSelector('[data-testid]', {});\n\n            const args = await getStoryArgs<BaseArgs>(page, storyExport);\n            const input = page.locator(`.${storyExport}`).getByTestId('test-field');\n\n            await expect(input.locator(`.label > div`)).toHaveText(args?.label);\n        });\n    };\n};\n\nexport const testHintBehaviour = (tagName: string, storyExport = 'Hint'): TestFunction => {\n    return async ({ page }) => {\n        await withCoverage(page, async () => {\n            await page.goto(`/components/${asDirectoryName(tagName)}/`);\n\n            await page.waitForSelector('[data-testid]', {});\n\n            const args = await getStoryArgs<BaseArgs>(page, storyExport);\n            const input = page.locator(`.${storyExport}`).getByTestId('test-field');\n\n            const hintElement = input.locator('.hint-label');\n            await expect(hintElement).toHaveCount(1);\n            await expect(hintElement).toHaveText(args?.hint as string);\n        });\n    };\n};\n\nexport const testErrorBehaviour = (tagName: string, storyExport = 'Error_Label'): TestFunction => {\n    return async ({ page }) => {\n        await withCoverage(page, async () => {\n            await page.goto(`/components/${asDirectoryName(tagName)}/`);\n\n            await page.waitForSelector('[data-testid]', {});\n\n            const args = await getStoryArgs<BaseArgs>(page, storyExport);\n            const input = page.locator(`.${storyExport}`).getByTestId('test-field');\n\n            const errorElement = input.locator('.error-label');\n            await expect(errorElement).toHaveCount(1);\n            await expect(errorElement).toHaveText(args?.error as string);\n        });\n    };\n};\n\nexport const testValueBehaviour = (tagName: string, storyExport = 'Value'): TestFunction => {\n    return async ({ page }) => {\n        await withCoverage(page, async () => {\n            await page.goto(`/components/${asDirectoryName(tagName)}/`);\n\n            await page.waitForSelector('[data-testid]', {});\n\n            const args = await getStoryArgs<BaseArgs>(page, storyExport);\n            const input = page.locator(`.${storyExport}`).getByTestId('test-field');\n\n            const inputField = input.locator('input#inputField');\n            await expect(inputField).toHaveValue(args?.value?.toString() as string);\n        });\n    };\n};\n\nexport const testPrefixBehaviour = (tagName: string, storyExport = 'Prefix'): TestFunction => {\n    return async ({ page }) => {\n        await withCoverage(page, async () => {\n            await page.goto(`/components/${asDirectoryName(tagName)}/`);\n\n            await page.waitForSelector('[data-testid]', {});\n\n            const input = page.locator(`.${storyExport}`).getByTestId('test-field');\n\n            const slotElement = input.locator('slot[name=prefix]');\n            await expect(slotElement).toHaveCount(1);\n\n            const foundSlottedSvgElement = (\n                await slotElement.evaluateHandle((se: HTMLSlotElement) => se.assignedElements().find((e) => e.tagName.toLocaleLowerCase() === 'svg'))\n            ).asElement();\n            await expect(foundSlottedSvgElement).toBeTruthy();\n        });\n    };\n};\n\nexport const testSuffixBehaviour = (tagName: string, storyExport = 'Suffix'): TestFunction => {\n    return async ({ page }) => {\n        await withCoverage(page, async () => {\n            await page.goto(`/components/${asDirectoryName(tagName)}/`);\n\n            await page.waitForSelector('[data-testid]', {});\n\n            const input = page.locator(`.${storyExport}`).getByTestId('test-field');\n\n            const slotElement = input.locator('slot[name=suffix]');\n            await expect(slotElement).toHaveCount(1);\n\n            const foundSlottedSvgElement = (\n                await slotElement.evaluateHandle((se: HTMLSlotElement) => se.assignedElements().find((e) => e.tagName.toLocaleLowerCase() === 'svg'))\n            ).asElement();\n            await expect(foundSlottedSvgElement).toBeTruthy();\n        });\n    };\n};\n\nexport const testClearableBehaviour = (tagName: string, storyExport = 'Clearable'): TestFunction => {\n    return async ({ page }) => {\n        await withCoverage(page, async () => {\n            await page.goto(`/components/${asDirectoryName(tagName)}/`);\n\n            await page.waitForSelector('[data-testid]', {});\n\n            const input = page.locator(`.${storyExport}`).getByTestId('test-field');\n\n            //Clearable attribute test.\n            await expect(input).toHaveAttribute('clearable', '');\n\n            const clearButton = input.locator('#clear-click');\n            await clearButton.click();\n            // Evaluate the value after clearing.\n            await expect(await input.evaluate((i: OmniFormElement) => !i.value || i.value === '0.00')).toBeTruthy();\n        });\n    };\n};\n\nexport const testCustomClearableSlotBehaviour = (tagName: string, storyExport = 'Custom_Clear_Slot'): TestFunction => {\n    return async ({ page }) => {\n        await withCoverage(page, async () => {\n            await page.goto(`/components/${asDirectoryName(tagName)}/`);\n\n            await page.waitForSelector('[data-testid]', {});\n\n            const input = page.locator(`.${storyExport}`).getByTestId('test-field');\n\n            //Clearable attribute test.\n            await expect(input).toHaveAttribute('clearable', '');\n\n            const clearButton = input.locator('#clear-click');\n            await clearButton.click();\n\n            await expect(await input.evaluate((i: OmniFormElement) => !i.value || i.value === '0.00')).toBeTruthy();\n        });\n    };\n};\n\nexport const testDisabledBehaviour = (tagName: string, storyExport = 'Disabled'): TestFunction => {\n    return async ({ page }) => {\n        await withCoverage(page, async () => {\n            await page.goto(`/components/${asDirectoryName(tagName)}/`);\n\n            await page.waitForSelector('[data-testid]', {});\n\n            const input = page.locator(`.${storyExport}`).getByTestId('test-field');\n\n            //Disabled class test.\n            await expect(input).toHaveAttribute('disabled', '');\n\n            //Input event test.\n            const inputTest = await mockEventListener(input, 'input');\n\n            const inputField = input.locator('input#inputField');\n\n            await inputField.type('Value Update 3');\n            // Confirm that mock input event is called zero times\n            await expect(inputTest).toBeCalledTimes(0);\n        });\n    };\n};\n\nexport type TestArgs = PlaywrightTestArgs & PlaywrightTestOptions & PlaywrightWorkerArgs & PlaywrightWorkerOptions;\nexport type TestFunction = (args: TestArgs, testInfo: TestInfo) => Promise<void>;\n"]}