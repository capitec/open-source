{"version":3,"file":"ColorField.spec.js","sourceRoot":"","sources":["../../src/color-field/ColorField.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,kBAAkB,EAClB,iBAAiB,EACjB,kBAAkB,EAClB,kBAAkB,EAClB,sBAAsB,EACtB,gCAAgC,EAChC,mBAAmB,EACnB,mBAAmB,EACtB,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAGzG,IAAI,CAAC,oCAAoC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;IAC1D,MAAM,YAAY,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAC5C,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEhD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,CAAC;QAEpD,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAEhD,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAE1D,oDAAoD;QACpD,MAAM,MAAM,CAAC,KAAK,CAAC,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;QAExD,MAAM,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAa,EAAE,EAAE;YACzC,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC;YACpB,MAAM,CAAC,CAAC,cAAc,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,MAAM,MAAM,CAAC,KAAK,CAAC,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,+BAA+B,EAAE,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAC9E,IAAI,CAAC,8BAA8B,EAAE,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAC5E,IAAI,CAAC,+BAA+B,EAAE,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAC9E,IAAI,CAAC,+BAA+B,EAAE,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAC9E,IAAI,CAAC,mCAAmC,EAAE,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC;AACtF,IAAI,CAAC,+CAA+C,EAAE,gCAAgC,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAC5G,IAAI,CAAC,gCAAgC,EAAE,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAChF,IAAI,CAAC,gCAAgC,EAAE,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAEhF,IAAI,CAAC,kCAAkC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;IACxD,MAAM,YAAY,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAE5C,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAClD,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QACvE,MAAM,UAAU,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAa,EAAE,IAAI,EAAE,EAAE;YACpD,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAErB,MAAM,CAAC,CAAC,cAAc,CAAC;QAC3B,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,CAAC;QAErE,MAAM,KAAK,GAAG,MAAM,iBAAiB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAE3D,MAAM,UAAU,CAAC,KAAK,CAAC;YACnB,KAAK,EAAE,IAAI;SACd,CAAC,CAAC;QAEH,MAAM,MAAM,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import {\n    testLabelBehaviour,\n    testHintBehaviour,\n    testErrorBehaviour,\n    testValueBehaviour,\n    testClearableBehaviour,\n    testCustomClearableSlotBehaviour,\n    testPrefixBehaviour,\n    testSuffixBehaviour\n} from '../core/OmniInputPlaywright.js';\nimport { test, expect, getStoryArgs, mockEventListener, withCoverage } from '../utils/JestPlaywright.js';\nimport type { ColorField } from './ColorField.js';\n\ntest(`Color Field - Visual and Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/color-field/');\n        await page.evaluate(() => document.fonts.ready);\n\n        const field = page.locator('[data-testid]').first();\n\n        const inputField = field.locator('#inputField');\n\n        await expect(inputField).toHaveAttribute('type', 'color');\n\n        // Confirm that the component matches the screenshot\n        await expect(field).toHaveScreenshot('color-field.png');\n\n        await field.evaluate(async (f: ColorField) => {\n            f.value = '#F6B73C';\n            await f.updateComplete;\n        });\n        await expect(field).toHaveScreenshot('color-field-value.png');\n    });\n});\n\ntest('Color Field - Label Behaviour', testLabelBehaviour('omni-color-field'));\ntest('Color Field - Hint Behaviour', testHintBehaviour('omni-color-field'));\ntest('Color Field - Error Behaviour', testErrorBehaviour('omni-color-field'));\ntest('Color Field - Value Behaviour', testValueBehaviour('omni-color-field'));\ntest('Color Field - Clearable Behaviour', testClearableBehaviour('omni-color-field'));\ntest('Color Field - Custom Clearable Slot Behaviour', testCustomClearableSlotBehaviour('omni-color-field'));\ntest('Color Field - Prefix Behaviour', testPrefixBehaviour('omni-color-field'));\ntest('Color Field - Suffix Behaviour', testSuffixBehaviour('omni-color-field'));\n\ntest(`Color Field - Disabled Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/color-field/');\n\n        const args = await getStoryArgs(page, 'Disabled');\n        const colorField = page.locator('.Disabled').getByTestId('test-field');\n        await colorField.evaluate(async (d: ColorField, args) => {\n            d.value = args.value;\n\n            await d.updateComplete;\n        }, args);\n\n        await expect(colorField).toHaveScreenshot('color-field-initial.png');\n\n        const click = await mockEventListener(colorField, 'click');\n\n        await colorField.click({\n            force: true\n        });\n\n        await expect(click).toBeCalledTimes(0);\n    });\n});\n"]}