{"version":3,"file":"RadioGroup.spec.js","sourceRoot":"","sources":["../../src/radio/RadioGroup.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { test, expect, getStoryArgs, mockEventListener, withCoverage } from '../utils/JestPlaywright.js';\n\ntest(`Radio Group - Check / Unchecked Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/radio-group/');\n\n        // Get Radio group and radio components.\n        const radioGroup = page.locator('.Interactive').getByTestId('test-radio-group');\n        const radio = radioGroup.locator('omni-radio').first();\n        await expect(radioGroup).toHaveScreenshot('radio-group-initial.png');\n        await radioGroup.focus();\n\n        const radioChange = await mockEventListener(radioGroup, 'radio-change');\n\n        await radio.locator('#content').click();\n\n        await expect(radioChange).toBeCalledTimes(1);\n        await expect(radio).toHaveAttribute('checked', 'true');\n        await expect(radioGroup).toHaveScreenshot('radio-group-radio-checked.png');\n    });\n});\n\ntest(`Radio Group - Label Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/radio-group/');\n\n        await page.waitForSelector('[data-testid]', {});\n        const args = await getStoryArgs(page, 'Label');\n        const radioGroup = page.locator('.Label').getByTestId('test-radio-group');\n        const label = radioGroup.locator('omni-label');\n\n        await expect(label).toHaveAttribute('label', args.label);\n        await expect(radioGroup).toHaveScreenshot('radio-group-label.png');\n    });\n});\n\ntest(`Radio Group - Horizontal Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/radio-group/');\n\n        await page.waitForSelector('[data-testid]', {});\n        const radioGroup = page.locator('.Horizontal').getByTestId('test-radio-group');\n        const radios = radioGroup.locator('.radios');\n\n        const horizontalAttribute = await radios.getAttribute('data-horizontal');\n\n        await expect(radios).toHaveAttribute('data-horizontal', horizontalAttribute);\n        await expect(radioGroup).toHaveScreenshot('radio-group-horizontal.png');\n    });\n});\n\ntest(`Radio Group - Deselect allowed Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/radio-group/');\n\n        const radioGroup = page.locator('.Allow_Deselect').getByTestId('test-radio-group');\n        await expect(radioGroup).toHaveScreenshot('radio-group-initial.png');\n        //Get the second radio button as it is expected to be checked already\n        const radio = page.locator('.Allow_Deselect').getByTestId('test-radio');\n\n        radioGroup.focus();\n\n        const radioChange = await mockEventListener(radioGroup, 'radio-change');\n\n        //Check if the radio button is already checked\n        await expect(radio).toHaveAttribute('aria-checked', 'true');\n        // Click the radio button this will result in a deselection.\n        await radio.locator('#content').click();\n\n        await expect(radioChange).toBeCalledTimes(1);\n        // Check the selected attribute of the Radio group and confirm it matches the value cause de selecting a radio button is allowed\n        await expect(radioGroup).toHaveAttribute('selected', '-1');\n        await expect(radioGroup).toHaveScreenshot('radio-group-deselect.png');\n    });\n});\n"]}