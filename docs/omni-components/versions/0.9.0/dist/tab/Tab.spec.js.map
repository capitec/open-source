{"version":3,"file":"Tab.spec.js","sourceRoot":"","sources":["../../src/tab/Tab.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { test, expect, mockEventListener, withCoverage } from '../utils/JestPlaywright.js';\n\ntest(`Tab - Basic Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/tab/');\n        await page.waitForSelector('[data-testid]', {});\n\n        // For the purposes of the demo the Tabs are slotted in a Tab Group\n        const tabGroup = page.locator('.Basic').getByTestId('test-tab-group');\n        await expect(tabGroup).toHaveScreenshot('tab-group-initial.png');\n        // Get the Tab bar which will contain the tab headers.\n        const tabBar = tabGroup.locator('.tab-bar').first();\n\n        // Get all the tab headers\n        const nestedTabHeaders = tabBar.locator('omni-tab-header');\n        await expect(nestedTabHeaders).toHaveCount(3);\n\n        // Get all the omni-tabs\n        const tabs = tabGroup.locator('omni-tab');\n        await expect(tabs).toHaveCount(3);\n    });\n});\n\ntest(`Tab - Active Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/tab/');\n        await page.waitForSelector('[data-testid]', {});\n\n        // For the purposes of the demo the Tabs are slotted in a Tab Group\n        const tabGroup = page.locator('.Active').getByTestId('test-tab-group');\n        await expect(tabGroup).toHaveScreenshot('tab-group-initial.png');\n        // Get the Tab bar which will contain the tab headers.\n        const tabBar = tabGroup.locator('.tab-bar').first();\n\n        // Mock tab-select event.\n        const tabSelect = await mockEventListener(tabGroup, 'tab-select');\n        // Get all the tab headers\n        const nestedTabHeaders = tabBar.locator('omni-tab-header');\n        await expect(nestedTabHeaders).toHaveCount(3);\n\n        // Get all the omni-tabs\n        const tabs = tabGroup.locator('omni-tab');\n        await expect(tabs).toHaveCount(3);\n\n        // Confirm that the second tab has the active attribute.\n        await expect(tabs.nth(1)).toHaveAttribute('active', '');\n        // Confirm that the second tab header has the data-active attribute.\n        await expect(nestedTabHeaders.nth(1)).toHaveAttribute('data-active', '');\n        // Confirm that the second tab and the second tab header has the active attributes.\n\n        await expect(tabGroup).toHaveScreenshot('tab-group-active.png');\n        await expect(tabBar).toHaveScreenshot('tab-bar.png');\n\n        // Click the first tab header.\n        await nestedTabHeaders.nth(0).click();\n        await expect(tabSelect).toBeCalledTimes(1);\n        await expect(tabGroup).toHaveScreenshot('tab-group-tab-selected.png');\n        // Confirm that the first tab has the active attribute.\n        await expect(tabs.nth(0)).toHaveAttribute('active', '');\n        // Confirm that the first tab header has the data-active attribute.\n        await expect(nestedTabHeaders.nth(0)).toHaveAttribute('data-active', '');\n    });\n});\n\ntest(`Tab - Disabled Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/tab/');\n        await page.waitForSelector('[data-testid]', {});\n        const tabGroup = page.locator('.Disabled').getByTestId('test-tab-group');\n        await expect(tabGroup).toHaveScreenshot('tab-group-initial.png');\n        // Mock tab-select event.\n        const tabSelect = await mockEventListener(tabGroup, 'tab-select');\n\n        const tabBar = tabGroup.locator('.tab-bar');\n        await expect(tabBar).toHaveCount(1);\n\n        // Get all the tab headers\n        const nestedTabHeaders = tabBar.locator('omni-tab-header');\n        await expect(nestedTabHeaders).toHaveCount(3);\n\n        // Get default slot\n        const tabs = tabGroup.locator('omni-tab');\n        await expect(tabs).toHaveCount(3);\n        // Click the disabled tab twice\n        await nestedTabHeaders.nth(2).click();\n        await nestedTabHeaders.nth(2).click();\n        await expect(tabGroup).toHaveScreenshot('tab-group-disabled-click.png');\n        await expect(tabSelect).toBeCalledTimes(0);\n\n        // Click the second tab\n        await nestedTabHeaders.nth(1).click();\n        await expect(tabGroup).toHaveScreenshot('tab-group-non-disabled-click.png');\n        await expect(tabSelect).toBeCalledTimes(1);\n    });\n});\n"]}