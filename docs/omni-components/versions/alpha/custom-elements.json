{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/utils/JestPlaywright.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "expect",
          "default": "expectPatched"
        },
        {
          "kind": "function",
          "name": "withCoverage",
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "page",
              "type": {
                "text": "Page"
              }
            },
            {
              "name": "testAction",
              "type": {
                "text": "() => T | Promise<T>"
              }
            }
          ],
          "return": {
            "type": {
              "text": "Promise<any>"
            }
          }
        },
        {
          "kind": "function",
          "name": "getStoryArgs",
          "parameters": [
            {
              "name": "page",
              "type": {
                "text": "Page"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "readySelector",
              "default": "'[data-testid]'"
            }
          ],
          "description": "Read story args from story renderer with provided key",
          "return": {
            "type": {
              "text": "Promise<T>"
            }
          }
        },
        {
          "kind": "function",
          "name": "mockEventListener",
          "parameters": [
            {
              "name": "locatorOrHandle",
              "type": {
                "text": "Locator | ElementHandle | null | undefined"
              }
            },
            {
              "name": "eventName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "callback",
              "optional": true,
              "type": {
                "text": "(e: Event) => void"
              }
            }
          ],
          "return": {
            "type": {
              "text": "Promise<Mock<UnknownFunction>>"
            }
          }
        },
        {
          "kind": "function",
          "name": "createWaitHandle",
          "return": {
            "type": {
              "text": "{ completed: Promise<T>; release: (value: T) => void; error: (reason?: any) => void; }"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@playwright/test"
          }
        },
        {
          "kind": "js",
          "name": "expect",
          "declaration": {
            "name": "expect",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/JestPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "withCoverage",
          "declaration": {
            "name": "withCoverage",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/JestPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "getStoryArgs",
          "declaration": {
            "name": "getStoryArgs",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/JestPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "mockEventListener",
          "declaration": {
            "name": "mockEventListener",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/JestPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "createWaitHandle",
          "declaration": {
            "name": "createWaitHandle",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/JestPlaywright.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Base element class that manages element properties and attributes, and\nrenders a lit template with asynchronous rendering support and themed styles.",
          "name": "OmniElement",
          "cssProperties": [
            {
              "description": "Theme primary color.",
              "name": "--omni-theme-primary-color"
            },
            {
              "description": "Theme primary hover color.",
              "name": "--omni-theme-primary-hover-color"
            },
            {
              "description": "Theme primary active color.",
              "name": "--omni-theme-primary-active-color"
            },
            {
              "description": "Theme accent color.",
              "name": "--omni-theme-accent-color"
            },
            {
              "description": "Theme accent hover color.",
              "name": "--omni-theme-accent-hover-color"
            },
            {
              "description": "Theme accent active color.",
              "name": "--omni-theme-accent-active-color"
            },
            {
              "description": "Theme background color.",
              "name": "--omni-theme-background-color"
            },
            {
              "description": "Theme background hover color.",
              "name": "--omni-theme-background-hover-color"
            },
            {
              "description": "Theme background active color.",
              "name": "--omni-theme-background-active-color"
            },
            {
              "description": "Theme font color.",
              "name": "--omni-theme-font-color"
            },
            {
              "description": "Theme disabled border color.",
              "name": "--omni-theme-disabled-border-color"
            },
            {
              "description": "Theme disabled background color.",
              "name": "--omni-theme-disabled-background-color"
            },
            {
              "description": "Theme disabled background color.",
              "name": "--omni-theme-error-font-color"
            },
            {
              "description": "Theme error border color.",
              "name": "--omni-theme-error-border-color"
            },
            {
              "description": "Theme hint font color.",
              "name": "--omni-theme-hint-font-color"
            },
            {
              "description": "Theme inactive color.",
              "name": "--omni-theme-inactive-color"
            },
            {
              "description": "Theme inactive color.",
              "name": "--omni-theme-box-shadow-color"
            },
            {
              "description": "Theme font family.",
              "name": "--omni-theme-font-family"
            },
            {
              "description": "Theme font size.",
              "name": "--omni-theme-font-size"
            },
            {
              "description": "Theme font weight.",
              "name": "--omni-theme-font-weight"
            },
            {
              "description": "Theme border radius.",
              "name": "--omni-theme-border-radius"
            },
            {
              "description": "Theme border width.",
              "name": "--omni-theme-border-width"
            },
            {
              "description": "Theme box shadow.",
              "name": "--omni-theme-box-shadow"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir"
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang"
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir"
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "cssCategory": "Theme Variables",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OmniElement",
          "declaration": {
            "name": "OmniElement",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "OmniElement",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/Loading.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Loading icon component.",
          "name": "LoadingIcon",
          "members": [
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-loading-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Loading.icon.js';\n```",
          "customElement": true,
          "attributes": [
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LoadingIcon",
          "declaration": {
            "name": "LoadingIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Loading.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-loading-icon",
          "declaration": {
            "name": "LoadingIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Loading.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/render-element/RenderElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Element that defers content rendering to a provided function / promise.",
          "name": "RenderElement",
          "cssProperties": [
            {
              "description": "Loading Indicator width",
              "name": "--omni-render-element-loading-indicator-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "RenderFunction | undefined"
              },
              "description": "Renderer function"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | Promise<object> | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<TemplateResult<ResultType> | unique symbol>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setChildInstance",
              "privacy": "private",
              "parameters": [
                {
                  "name": "result",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateChildInstance",
              "privacy": "private",
              "parameters": [
                {
                  "name": "result",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_internalRenderer",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<TemplateResult | typeof nothing>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_clearElements",
              "privacy": "private",
              "parameters": [
                {
                  "name": "el",
                  "default": "undefined as any",
                  "type": {
                    "text": "Element | ShadowRoot"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "data",
              "type": {
                "text": "object | Promise<object> | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-render-element",
          "import": "```js\nimport '@capitec/omni-components/render-element';\n```",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RenderElement",
          "declaration": {
            "name": "RenderElement",
            "module": "/Users/runner/work/omni-components/omni-components/src/render-element/RenderElement.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-render-element",
          "declaration": {
            "name": "RenderElement",
            "module": "/Users/runner/work/omni-components/omni-components/src/render-element/RenderElement.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "RenderResult",
          "type": "TemplateResult | typeof nothing | HTMLElement | string"
        },
        {
          "alias": "RenderFunction",
          "type": "(...data: unknown[]) => RenderResult | Promise<RenderResult>"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/modal/Modal.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to display modal content with optional header and footer content.",
          "name": "Modal",
          "cssProperties": [
            {
              "description": "Top position for wrapping `HTMLDialogElement`.",
              "name": "--omni-modal-dialog-top"
            },
            {
              "description": "Left position for wrapping `HTMLDialogElement`.",
              "name": "--omni-modal-dialog-left"
            },
            {
              "description": "Right position for wrapping `HTMLDialogElement`.",
              "name": "--omni-modal-dialog-right"
            },
            {
              "description": "Bottom position for wrapping `HTMLDialogElement`.",
              "name": "--omni-modal-dialog-bottom"
            },
            {
              "description": "Background for wrapping `HTMLDialogElement` backdrop.",
              "name": "--omni-modal-dialog-background"
            },
            {
              "description": "Padding for modal content container.",
              "name": "--omni-modal-container-padding"
            },
            {
              "description": "Box shadow for modal content container.",
              "name": "--omni-modal-container-box-shadow"
            },
            {
              "description": "Max width for modal content container.",
              "name": "--omni-modal-max-width"
            },
            {
              "description": "Max height for modal content container.",
              "name": "--omni-modal-max-height"
            },
            {
              "description": "Font color for modal header.",
              "name": "--omni-modal-header-font-color"
            },
            {
              "description": "Font family for modal header.",
              "name": "--omni-modal-header-font-family"
            },
            {
              "description": "Font size for modal header.",
              "name": "--omni-modal-header-font-size"
            },
            {
              "description": "Font weight for modal header.",
              "name": "--omni-modal-header-font-weight"
            },
            {
              "description": "Background for modal header.",
              "name": "--omni-modal-header-background"
            },
            {
              "description": "Left padding for modal header.",
              "name": "--omni-modal-header-padding-left"
            },
            {
              "description": "Top padding for modal header.",
              "name": "--omni-modal-header-padding-top"
            },
            {
              "description": "Right padding for modal header.",
              "name": "--omni-modal-header-padding-right"
            },
            {
              "description": "Bottom padding for modal header.",
              "name": "--omni-modal-header-padding-bottom"
            },
            {
              "description": "Border radius for modal header.",
              "name": "--omni-modal-header-border-radius"
            },
            {
              "description": "Font color for modal body.",
              "name": "--omni-modal-body-font-color"
            },
            {
              "description": "Font size for modal body.",
              "name": "--omni-modal-body-font-size"
            },
            {
              "description": "Font family for modal body.",
              "name": "--omni-modal-body-font-family"
            },
            {
              "description": "Font weight for modal body.",
              "name": "--omni-modal-body-font-weight"
            },
            {
              "description": "Padding for modal body.",
              "name": "--omni-modal-body-padding"
            },
            {
              "description": "Background for modal body.",
              "name": "--omni-modal-body-background"
            },
            {
              "description": "Overflow for modal body.",
              "name": "--omni-modal-body-overflow"
            },
            {
              "description": "Top border radius for modal body when there is no header.",
              "name": "--omni-modal-no-header-body-border-top-radius"
            },
            {
              "description": "Bottom border radius for modal body when there is no footer.",
              "name": "--omni-modal-no-footer-body-border-bottom-radius"
            },
            {
              "description": "Text align for modal footer.",
              "name": "--omni-modal-footer-text-align"
            },
            {
              "description": "Padding for modal footer.",
              "name": "--omni-modal-footer-padding"
            },
            {
              "description": "Font color for modal footer.",
              "name": "--omni-modal-footer-font-color"
            },
            {
              "description": "Font family for modal footer.",
              "name": "--omni-modal-footer-font-family"
            },
            {
              "description": "Font size for modal footer.",
              "name": "--omni-modal-footer-font-size"
            },
            {
              "description": "Font weight for modal footer.",
              "name": "--omni-modal-footer-font-weight"
            },
            {
              "description": "Background for modal footer.",
              "name": "--omni-modal-footer-background"
            }
          ],
          "cssParts": [
            {
              "description": "Internal `HTMLDialogElement` instance.",
              "name": "dialog"
            },
            {
              "description": "Internal `HTMLDivElement` instance for backdrop.",
              "name": "backdrop"
            },
            {
              "description": "Internal `HTMLDivElement` instance for container.",
              "name": "container"
            },
            {
              "description": "Internal `HTMLDivElement` instance for header.",
              "name": "header"
            },
            {
              "description": "Internal `HTMLDivElement` instance for body.",
              "name": "body"
            },
            {
              "description": "Internal `HTMLDivElement` instance for footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside the component header.",
              "name": "header"
            },
            {
              "description": "Content to render inside the component body.",
              "name": "[Default Slot]"
            },
            {
              "description": "Content to render inside the component footer.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headerLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Title text to be displayed in header area.",
              "attribute": "header-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headerAlign",
              "type": {
                "text": "'left' | 'center' | 'right' | undefined"
              },
              "description": "Header text horizontal alignment:\n - `left` Align header to the left.\n - `center` Align header to the center.\n - `right` Align header to the right.",
              "attribute": "header-align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hide",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will hide the modal.",
              "attribute": "hide",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noHeader",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will not display the header section of the modal",
              "attribute": "no-header",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noFooter",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will not display the footer section of the modal",
              "attribute": "no-footer",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noFullscreen",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will not apply the modal as fullscreen on mobile viewports.",
              "attribute": "no-fullscreen",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Modal | undefined"
                }
              },
              "parameters": [
                {
                  "name": "init",
                  "type": {
                    "text": "ModalInit"
                  },
                  "description": "Initialisation context for Modal element that will be created."
                }
              ],
              "description": "Creates a new Modal element with the provided context and appends it to the DOM (either to document body or to provided target parent element)."
            },
            {
              "kind": "method",
              "name": "notifyClickOutside",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult<1> | unique symbol"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderFooter",
              "return": {
                "type": {
                  "text": "TemplateResult<1> | unique symbol"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "click-outside",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Dispatched when a click or touch occurs outside the modal container."
            }
          ],
          "attributes": [
            {
              "name": "header-label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Title text to be displayed in header area.",
              "fieldName": "headerLabel",
              "attribute": "header-label"
            },
            {
              "name": "header-align",
              "type": {
                "text": "'left' | 'center' | 'right' | undefined"
              },
              "description": "Header text horizontal alignment:\n - `left` Align header to the left.\n - `center` Align header to the center.\n - `right` Align header to the right.",
              "fieldName": "headerAlign",
              "attribute": "header-align"
            },
            {
              "name": "hide",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will hide the modal.",
              "fieldName": "hide",
              "attribute": "hide"
            },
            {
              "name": "no-header",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will not display the header section of the modal",
              "fieldName": "noHeader",
              "attribute": "no-header"
            },
            {
              "name": "no-footer",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will not display the footer section of the modal",
              "fieldName": "noFooter",
              "attribute": "no-footer"
            },
            {
              "name": "no-fullscreen",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will not apply the modal as fullscreen on mobile viewports.",
              "fieldName": "noFullscreen",
              "attribute": "no-fullscreen"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-modal",
          "import": "```js\nimport '@capitec/omni-components/modal';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RenderFunction",
          "declaration": {
            "name": "RenderFunction",
            "module": "../render-element/RenderElement.js"
          }
        },
        {
          "kind": "js",
          "name": "RenderResult",
          "declaration": {
            "name": "RenderResult",
            "module": "../render-element/RenderElement.js"
          }
        },
        {
          "kind": "js",
          "name": "Modal",
          "declaration": {
            "name": "Modal",
            "module": "/Users/runner/work/omni-components/omni-components/src/modal/Modal.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-modal",
          "declaration": {
            "name": "Modal",
            "module": "/Users/runner/work/omni-components/omni-components/src/modal/Modal.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "ModalInit",
          "type": "{\n    /**\n     * The id to apply to the Modal element.\n     */\n    id?: string;\n\n    /**\n     * The container to append the Modal as child. If not provided will append to a new div element on the document body.\n     */\n    parent?: string | HTMLElement | DocumentFragment | null;\n\n    /**\n     * A function that returns, or an instance of content to render as modal body\n     */\n    body: RenderFunction | RenderResult;\n\n    /**\n     * A function that returns, or an instance of content to render in the modal header\n     */\n    header?: RenderFunction | RenderResult;\n\n    /**\n     * A function that returns, or an instance of content to render in the modal footer\n     */\n    footer?: RenderFunction | RenderResult;\n\n    /**\n     * Header text alignment:\n     *  - `left` Align header to the left.\n     *  - `center` Align header to the center.\n     *  - `right` Align header to the right.\n     */\n    headerAlign?: 'left' | 'center' | 'right';\n\n    /**\n     * If true, will not display the header section of the modal\n     */\n    noHeader?: boolean;\n\n    /**\n     * If true, will not display the footer section of the modal\n     */\n    noFooter?: boolean;\n\n    /**\n     * If true will not apply the modal as fullscreen on mobile viewports.\n     */\n    noFullscreen?: boolean;\n}"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/button/Button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control that allows an action to be executed.",
          "name": "Button",
          "cssProperties": [
            {
              "description": "Component font family.",
              "name": "--omni-button-font-family"
            },
            {
              "description": "Component font size.",
              "name": "--omni-button-font-size"
            },
            {
              "description": "Component font weight.",
              "name": "--omni-button-font-weight"
            },
            {
              "description": "Component line height.",
              "name": "--omni-button-line-height"
            },
            {
              "description": "Component border radius.",
              "name": "--omni-button-border-radius"
            },
            {
              "description": "Component padding top.",
              "name": "--omni-button-padding-top"
            },
            {
              "description": "Component padding bottom.",
              "name": "--omni-button-padding-bottom"
            },
            {
              "description": "Component padding left.",
              "name": "--omni-button-padding-left"
            },
            {
              "description": "Component padding right. PRIMARY",
              "name": "--omni-button-padding-right"
            },
            {
              "description": "Primary \"type\" background.",
              "name": "--omni-button-primary-background"
            },
            {
              "description": "Primary \"type\" border color.",
              "name": "--omni-button-primary-border-color"
            },
            {
              "description": "Primary \"type\" border width.",
              "name": "--omni-button-primary-border-width"
            },
            {
              "description": "Primary \"type\" color.",
              "name": "--omni-button-primary-color"
            },
            {
              "description": "Primary \"type\" hover background.",
              "name": "--omni-button-primary-hover-background"
            },
            {
              "description": "Primary \"type\" hover border color.",
              "name": "--omni-button-primary-hover-border-color"
            },
            {
              "description": "Primary \"type\" hover border width.",
              "name": "--omni-button-primary-hover-border-width"
            },
            {
              "description": "Primary \"type\" hover color.",
              "name": "--omni-button-primary-hover-color"
            },
            {
              "description": "Primary \"type\" hover box shadow.",
              "name": "--omni-button-primary-hover-box-shadow"
            },
            {
              "description": "Primary \"type\" active back color.",
              "name": "--omni-button-primary-active-background"
            },
            {
              "description": "Primary \"type\" active border color.",
              "name": "--omni-button-primary-active-border-color"
            },
            {
              "description": "Primary \"type\" active border width.",
              "name": "--omni-button-primary-active-border-width"
            },
            {
              "description": "Primary \"type\" active color.",
              "name": "--omni-button-primary-active-color"
            },
            {
              "description": "Primary \"type\" disabled back color.",
              "name": "--omni-button-primary-disabled-background"
            },
            {
              "description": "Primary \"type\" disabled border color.",
              "name": "--omni-button-primary-disabled-border-color"
            },
            {
              "description": "Primary \"type\" disabled border width.",
              "name": "--omni-button-primary-disabled-border-width"
            },
            {
              "description": "Primary \"type\" disabled color. SECONDARY",
              "name": "--omni-button-primary-disabled-color"
            },
            {
              "description": "Secondary \"type\" background.",
              "name": "--omni-button-secondary-background"
            },
            {
              "description": "Secondary \"type\" border color.",
              "name": "--omni-button-secondary-border-color"
            },
            {
              "description": "Secondary \"type\" border width.",
              "name": "--omni-button-secondary-border-width"
            },
            {
              "description": "Secondary \"type\" color.",
              "name": "--omni-button-secondary-color"
            },
            {
              "description": "Secondary \"type\" hover background.",
              "name": "--omni-button-secondary-hover-background"
            },
            {
              "description": "Secondary \"type\" hover border color.",
              "name": "--omni-button-secondary-hover-border-color"
            },
            {
              "description": "Secondary \"type\" hover border width.",
              "name": "--omni-button-secondary-hover-border-width"
            },
            {
              "description": "Secondary \"type\" hover color.",
              "name": "--omni-button-secondary-hover-color"
            },
            {
              "description": "Secondary \"type\" hover box shadow.",
              "name": "--omni-button-secondary-hover-box-shadow"
            },
            {
              "description": "Secondary \"type\" active background.",
              "name": "--omni-button-secondary-active-background"
            },
            {
              "description": "Secondary \"type\" active border color.",
              "name": "--omni-button-secondary-active-border-color"
            },
            {
              "description": "Secondary \"type\" active border width.",
              "name": "--omni-button-secondary-active-border-width"
            },
            {
              "description": "Secondary \"type\" active color.",
              "name": "--omni-button-secondary-active-color"
            },
            {
              "description": "Secondary \"type\" disabled back color.",
              "name": "--omni-button-secondary-disabled-background"
            },
            {
              "description": "Secondary \"type\" disabled border color.",
              "name": "--omni-button-secondary-disabled-border-color"
            },
            {
              "description": "Secondary \"type\" disabled border width.",
              "name": "--omni-button-secondary-disabled-border-width"
            },
            {
              "description": "Secondary \"type\" disabled color. CLEAR",
              "name": "--omni-button-secondary-disabled-color"
            },
            {
              "description": "Clear \"type\" background.",
              "name": "--omni-button-clear-background"
            },
            {
              "description": "Clear \"type\" border color.",
              "name": "--omni-button-clear-border-color"
            },
            {
              "description": "Clear \"type\" border width.",
              "name": "--omni-button-clear-border-width"
            },
            {
              "description": "Clear \"type\" color.",
              "name": "--omni-button-clear-color"
            },
            {
              "description": "Clear \"type\" hover background.",
              "name": "--omni-button-clear-hover-background"
            },
            {
              "description": "Clear \"type\" hover border color.",
              "name": "--omni-button-clear-hover-border-color"
            },
            {
              "description": "Clear \"type\" hover border width.",
              "name": "--omni-button-clear-hover-border-width"
            },
            {
              "description": "Clear \"type\" hover color.",
              "name": "--omni-button-clear-hover-color"
            },
            {
              "description": "Clear \"type\" active background.",
              "name": "--omni-button-clear-active-background"
            },
            {
              "description": "Clear \"type\" active border color.",
              "name": "--omni-button-clear-active-border-color"
            },
            {
              "description": "Clear \"type\" active border width.",
              "name": "--omni-button-clear-active-border-width"
            },
            {
              "description": "Clear \"type\" active color.",
              "name": "--omni-button-clear-active-color"
            },
            {
              "description": "Clear \"type\" disabled back color.",
              "name": "--omni-button-clear-disabled-background"
            },
            {
              "description": "Clear \"type\" disabled border color.",
              "name": "--omni-button-clear-disabled-border-color"
            },
            {
              "description": "Clear \"type\" disabled border width.",
              "name": "--omni-button-clear-disabled-border-width"
            },
            {
              "description": "Clear \"type\" disabled color. WHITE",
              "name": "--omni-button-clear-disabled-color"
            },
            {
              "description": "White \"type\" background.",
              "name": "--omni-button-white-background"
            },
            {
              "description": "White \"type\" border color.",
              "name": "--omni-button-white-border-color"
            },
            {
              "description": "White \"type\" border width.",
              "name": "--omni-button-white-border-width"
            },
            {
              "description": "White \"type\" color.",
              "name": "--omni-button-white-color"
            },
            {
              "description": "White \"type\" hover background.",
              "name": "--omni-button-white-hover-background"
            },
            {
              "description": "White \"type\" hover border color.",
              "name": "--omni-button-white-hover-border-color"
            },
            {
              "description": "White \"type\" hover border width.",
              "name": "--omni-button-white-hover-border-width"
            },
            {
              "description": "White \"type\" hover box shadow.",
              "name": "--omni-button-white-hover-box-shadow"
            },
            {
              "description": "White \"type\" active background.",
              "name": "--omni-button-white-active-background"
            },
            {
              "description": "White \"type\" active border color.",
              "name": "--omni-button-white-active-border-color"
            },
            {
              "description": "White \"type\" active border width.",
              "name": "--omni-button-white-active-border-width"
            },
            {
              "description": "White \"type\" hover color.",
              "name": "--omni-button-white-active-color"
            },
            {
              "description": "White \"type\" disabled back color.",
              "name": "--omni-button-white-disabled-background"
            },
            {
              "description": "White \"type\" disabled border color.",
              "name": "--omni-button-white-disabled-border-color"
            },
            {
              "description": "White \"type\" disabled border width.",
              "name": "--omni-button-white-disabled-border-width"
            },
            {
              "description": "White \"type\" disabled color.",
              "name": "--omni-button-white-disabled-color"
            },
            {
              "description": "Disabled border color.",
              "name": "--omni-button-disabled-border-color"
            },
            {
              "description": "Disabled background.",
              "name": "--omni-button-disabled-background"
            },
            {
              "description": "Disabled hover and active background.",
              "name": "--omni-button-disabled-active-hover-background"
            },
            {
              "description": "Slot margin left (When positioned right of label).",
              "name": "--omni-button-slot-margin-right"
            },
            {
              "description": "Slot margin bottom (When positioned top of label).",
              "name": "--omni-button-slot-margin-bottom"
            },
            {
              "description": "Slot margin left (When positioned right of label).",
              "name": "--omni-button-slot-margin-left"
            },
            {
              "description": "Slot margin top (When positioned bottom of label).",
              "name": "--omni-button-slot-margin-top"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside button, can be positioned using {@link slotPosition} property.",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'primary' | 'secondary' | 'clear' | 'white'"
              },
              "default": "'secondary'",
              "description": "Display type.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "slotPosition",
              "type": {
                "text": "'left' | 'top' | 'right' | 'bottom'"
              },
              "default": "'left'",
              "description": "Position of slotted content.",
              "attribute": "slot-position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'primary' | 'secondary' | 'clear' | 'white'"
              },
              "default": "'secondary'",
              "description": "Display type.",
              "fieldName": "type",
              "attribute": "type"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "slot-position",
              "type": {
                "text": "'left' | 'top' | 'right' | 'bottom'"
              },
              "default": "'left'",
              "description": "Position of slotted content.",
              "fieldName": "slotPosition",
              "attribute": "slot-position"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-button",
          "import": "```js\nimport '@capitec/omni-components/button';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "/Users/runner/work/omni-components/omni-components/src/button/Button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-button",
          "declaration": {
            "name": "Button",
            "module": "/Users/runner/work/omni-components/omni-components/src/button/Button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/alert/Alert.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component that displays an alert.",
          "name": "Alert",
          "cssProperties": [
            {
              "description": "Minimum width for alert.",
              "name": "--omni-alert-min-width"
            },
            {
              "description": "Maximum width for alert.",
              "name": "--omni-alert-max-width"
            },
            {
              "description": "Alert border.",
              "name": "--omni-alert-border"
            },
            {
              "description": "Alert border radius.",
              "name": "--omni-alert-border-radius"
            },
            {
              "description": "Alert box shadow.",
              "name": "--omni-alert-box-shadow"
            },
            {
              "description": "Alert fade in and out animation duration.",
              "name": "--omni-alert-animation-duration"
            },
            {
              "description": "Alert content top padding.",
              "name": "--omni-alert-padding-top"
            },
            {
              "description": "Alert content bottom padding.",
              "name": "--omni-alert-padding-bottom"
            },
            {
              "description": "Alert content left padding.",
              "name": "--omni-alert-padding-left"
            },
            {
              "description": "Alert content right padding.",
              "name": "--omni-alert-padding-right"
            },
            {
              "description": "Alert header font color.",
              "name": "--omni-alert-header-font-color"
            },
            {
              "description": "Alert header font family.",
              "name": "--omni-alert-header-font-family"
            },
            {
              "description": "Alert header font size.",
              "name": "--omni-alert-header-font-size"
            },
            {
              "description": "Alert header font weight.",
              "name": "--omni-alert-header-font-weight"
            },
            {
              "description": "Alert header line height.",
              "name": "--omni-alert-header-line-height"
            },
            {
              "description": "Alert header background.",
              "name": "--omni-alert-header-background"
            },
            {
              "description": "Alert header top padding.",
              "name": "--omni-alert-header-padding-top"
            },
            {
              "description": "Alert header bottom padding.",
              "name": "--omni-alert-header-padding-bottom"
            },
            {
              "description": "Alert header left padding.",
              "name": "--omni-alert-header-padding-left"
            },
            {
              "description": "Alert header right padding.",
              "name": "--omni-alert-header-padding-right"
            },
            {
              "description": "Alert description font color.",
              "name": "--omni-alert-description-font-color"
            },
            {
              "description": "Alert description font family.",
              "name": "--omni-alert-description-font-family"
            },
            {
              "description": "Alert description font size.",
              "name": "--omni-alert-description-font-size"
            },
            {
              "description": "Alert description font weight.",
              "name": "--omni-alert-description-font-weight"
            },
            {
              "description": "Alert description line height.",
              "name": "--omni-alert-description-line-height"
            },
            {
              "description": "Alert description top padding.",
              "name": "--omni-alert-description-padding-top"
            },
            {
              "description": "Alert description bottom padding.",
              "name": "--omni-alert-description-padding-bottom"
            },
            {
              "description": "Alert description left padding.",
              "name": "--omni-alert-description-padding-left"
            },
            {
              "description": "Alert description right padding.",
              "name": "--omni-alert-description-padding-right"
            },
            {
              "description": "Alert action button(s) top padding.",
              "name": "--omni-alert-action-button-padding-top"
            },
            {
              "description": "Alert action button(s) bottom padding.",
              "name": "--omni-alert-action-button-padding-bottom"
            },
            {
              "description": "Alert action button(s) left padding.",
              "name": "--omni-alert-action-button-padding-left"
            },
            {
              "description": "Alert action button(s) right padding.",
              "name": "--omni-alert-action-button-padding-right"
            },
            {
              "description": "Alert action button(s) internal top padding.",
              "name": "--omni-alert-action-button-internal-padding-top"
            },
            {
              "description": "Alert action button(s) internal bottom padding.",
              "name": "--omni-alert-action-button-internal-padding-bottom"
            },
            {
              "description": "Alert action button(s) internal left padding.",
              "name": "--omni-alert-action-button-internal-padding-left"
            },
            {
              "description": "Alert action button(s) internal right padding.",
              "name": "--omni-alert-action-button-internal-padding-right"
            },
            {
              "description": "Alert header horizontal space between status indicator and header content.",
              "name": "--omni-alert-header-horizontal-gap"
            },
            {
              "description": "Alert header status indicator symmetrical size.",
              "name": "--omni-alert-header-status-size"
            }
          ],
          "cssParts": [
            {
              "description": "Internal `omni-modal` element instance.",
              "name": "modal"
            },
            {
              "description": "Internal `HTMLDivElement` instance for container of header and description content.",
              "name": "content"
            },
            {
              "description": "Internal `HTMLDivElement` instance for each line of description (does not include slotted description content).",
              "name": "content"
            },
            {
              "description": "Internal `HTMLDivElement` instance for header.",
              "name": "header"
            },
            {
              "description": "Internal `HTMLDivElement` instance for container of action button(s).",
              "name": "actions"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render as the status indicator instead of default status icons.",
              "name": "status-indicator"
            },
            {
              "description": "Content to render inside the component message area.",
              "name": "header"
            },
            {
              "description": "Content to render inside the component description body.",
              "name": "[Default Slot]"
            },
            {
              "description": "Content to render as the primary action button.",
              "name": "primary"
            },
            {
              "description": "Content to render as the secondary action button.",
              "name": "secondary"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "'success' | 'warning' | 'error' | 'info' | 'none'"
              },
              "default": "'none'",
              "description": "The alert status (Defaults to 'none').",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "message",
              "type": {
                "text": "string | undefined"
              },
              "description": "The alert header message.",
              "attribute": "message",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headerAlign",
              "type": {
                "text": "'left' | 'center' | 'right' | undefined"
              },
              "description": "Header content horizontal alignment:\n - `left` Align header to the left.\n - `center` Align header to the center. (Default)\n - `right` Align header to the right.",
              "attribute": "header-align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string | undefined"
              },
              "description": "The alert detail message.",
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "descriptionAlign",
              "type": {
                "text": "'left' | 'center' | 'right' | undefined"
              },
              "description": "Description content horizontal alignment:\n - `left` Align description content to the left.\n - `center` Align description content to the center. (Default)\n - `right` Align description content to the right.",
              "attribute": "description-align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryAction",
              "type": {
                "text": "string | undefined"
              },
              "description": "The primary action button label (Defaults to 'Ok').",
              "attribute": "primary-action",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "secondaryAction",
              "type": {
                "text": "string | undefined"
              },
              "description": "The secondary action button label (Defaults to 'Cancel').",
              "attribute": "secondary-action",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "enableSecondary",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will provide a secondary action button.",
              "attribute": "enable-secondary",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "actionAlign",
              "type": {
                "text": "'left' | 'center' | 'right' | 'stretch' | undefined"
              },
              "description": "Action button(s) horizontal alignment:\n - `left` Align action button(s) to the left.\n - `center` Align action button(s) to the center.\n - `right` Align action button(s) to the right. (Default)\n - `stretch` Align action button(s) stretched to fill the horizontal space.",
              "attribute": "action-align",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "create",
              "static": true,
              "parameters": [
                {
                  "name": "init",
                  "type": {
                    "text": "AlertInit"
                  }
                }
              ],
              "description": "Create a global `omni-alert` element without showing it.",
              "return": {
                "type": {
                  "text": "Alert"
                }
              }
            },
            {
              "kind": "method",
              "name": "show",
              "static": true,
              "parameters": [
                {
                  "name": "init",
                  "type": {
                    "text": "AlertInit & {\n            onClose?: (reason: 'auto' | 'primary' | 'secondary') => void;\n        }"
                  }
                }
              ],
              "description": "Show a global `omni-alert` element.",
              "return": {
                "type": {
                  "text": "Alert"
                }
              }
            },
            {
              "kind": "method",
              "name": "showAsync",
              "static": true,
              "parameters": [
                {
                  "name": "init",
                  "type": {
                    "text": "AlertInit"
                  }
                }
              ],
              "description": "Show a global `omni-alert` element asynchronously, waits for it to close and returns the reason for close.",
              "return": {
                "type": {
                  "text": "Promise<\"auto\" | \"primary\" | \"secondary\">"
                }
              }
            },
            {
              "kind": "method",
              "name": "showAsync",
              "description": "Show the `omni-alert` asynchronously, waits for it to close and returns the reason for close.",
              "return": {
                "type": {
                  "text": "Promise<\"auto\" | \"primary\" | \"secondary\">"
                }
              }
            },
            {
              "kind": "method",
              "name": "show",
              "return": {
                "type": {
                  "text": "Alert"
                }
              },
              "description": "Show the `omni-alert`."
            },
            {
              "kind": "method",
              "name": "hide",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Hide the `omni-alert` and remove the component from the DOM"
            },
            {
              "kind": "method",
              "name": "onActionClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "secondary",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "alert-close",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Dispatched when the alert is closed."
            },
            {
              "name": "alert-action-click",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Dispatched when an alert action button is clicked."
            }
          ],
          "attributes": [
            {
              "name": "status",
              "type": {
                "text": "'success' | 'warning' | 'error' | 'info' | 'none'"
              },
              "default": "'none'",
              "description": "The alert status (Defaults to 'none').",
              "fieldName": "status",
              "attribute": "status"
            },
            {
              "name": "message",
              "type": {
                "text": "string | undefined"
              },
              "description": "The alert header message.",
              "fieldName": "message",
              "attribute": "message"
            },
            {
              "name": "header-align",
              "type": {
                "text": "'left' | 'center' | 'right' | undefined"
              },
              "description": "Header content horizontal alignment:\n - `left` Align header to the left.\n - `center` Align header to the center. (Default)\n - `right` Align header to the right.",
              "fieldName": "headerAlign",
              "attribute": "header-align"
            },
            {
              "name": "description",
              "type": {
                "text": "string | undefined"
              },
              "description": "The alert detail message.",
              "fieldName": "description",
              "attribute": "description"
            },
            {
              "name": "description-align",
              "type": {
                "text": "'left' | 'center' | 'right' | undefined"
              },
              "description": "Description content horizontal alignment:\n - `left` Align description content to the left.\n - `center` Align description content to the center. (Default)\n - `right` Align description content to the right.",
              "fieldName": "descriptionAlign",
              "attribute": "description-align"
            },
            {
              "name": "primary-action",
              "type": {
                "text": "string | undefined"
              },
              "description": "The primary action button label (Defaults to 'Ok').",
              "fieldName": "primaryAction",
              "attribute": "primary-action"
            },
            {
              "name": "secondary-action",
              "type": {
                "text": "string | undefined"
              },
              "description": "The secondary action button label (Defaults to 'Cancel').",
              "fieldName": "secondaryAction",
              "attribute": "secondary-action"
            },
            {
              "name": "enable-secondary",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will provide a secondary action button.",
              "fieldName": "enableSecondary",
              "attribute": "enable-secondary"
            },
            {
              "name": "action-align",
              "type": {
                "text": "'left' | 'center' | 'right' | 'stretch' | undefined"
              },
              "description": "Action button(s) horizontal alignment:\n - `left` Align action button(s) to the left.\n - `center` Align action button(s) to the center.\n - `right` Align action button(s) to the right. (Default)\n - `stretch` Align action button(s) stretched to fill the horizontal space.",
              "fieldName": "actionAlign",
              "attribute": "action-align"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-alert",
          "import": "```js\nimport '@capitec/omni-components/alert';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RenderFunction",
          "declaration": {
            "name": "RenderFunction",
            "module": "../render-element/RenderElement.js"
          }
        },
        {
          "kind": "js",
          "name": "RenderResult",
          "declaration": {
            "name": "RenderResult",
            "module": "../render-element/RenderElement.js"
          }
        },
        {
          "kind": "js",
          "name": "Alert",
          "declaration": {
            "name": "Alert",
            "module": "/Users/runner/work/omni-components/omni-components/src/alert/Alert.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-alert",
          "declaration": {
            "name": "Alert",
            "module": "/Users/runner/work/omni-components/omni-components/src/alert/Alert.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "AlertInit",
          "type": "{\n    /**\n     * The id to apply to the Alert element.\n     */\n    id?: string;\n\n    /**\n     * A function that returns, or an instance of content to render as the alert status indicator\n     */\n    statusIndicator?: RenderFunction | RenderResult;\n\n    /**\n     * A function that returns, or an instance of content to render in the alert header\n     */\n    header?: RenderFunction | RenderResult;\n\n    /**\n     * A function that returns, or an instance of content to render as alert body\n     */\n    body?: RenderFunction | RenderResult;\n\n    /**\n     * A function that returns, or an instance of content to render as the alert primary action\n     */\n    primary?: RenderFunction | RenderResult;\n\n    /**\n     * A function that returns, or an instance of content to render as the alert secondary action\n     */\n    secondary?: RenderFunction | RenderResult;\n\n    /**\n     * The alert status (Defaults to 'none').\n     */\n    status?: 'success' | 'warning' | 'error' | 'info' | 'none';\n\n    /**\n     * The alert header message.\n     */\n    message?: string;\n\n    /**\n     * Header content horizontal alignment:\n     *  - `left` Align header to the left.\n     *  - `center` Align header to the center. (Default)\n     *  - `right` Align header to the right.\n     */\n    headerAlign?: 'left' | 'center' | 'right';\n\n    /**\n     * The alert detail message.\n     */\n    description?: string;\n\n    /**\n     * Description content horizontal alignment:\n     *  - `left` Align description content to the left.\n     *  - `center` Align description content to the center. (Default)\n     *  - `right` Align description content to the right.\n     */\n    descriptionAlign?: 'left' | 'center' | 'right';\n\n    /**\n     * The primary action button label (Defaults to 'Ok').\n     */\n    primaryAction?: string;\n\n    /**\n     * The secondary action button label (Defaults to 'Cancel').\n     */\n    secondaryAction?: string;\n\n    /**\n     * If true, will provide a secondary action button.\n     */\n    enableSecondary?: boolean;\n\n    /**\n     * Action button(s) horizontal alignment:\n     *  - `left` Align action button(s) to the left.\n     *  - `center` Align action button(s) to the center.\n     *  - `right` Align action button(s) to the right. (Default)\n     *  - `stretch` Align action button(s) stretched to fill the horizontal space.\n     */\n    actionAlign?: 'left' | 'center' | 'right' | 'stretch';\n}"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/alert/Alert.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/utils/Directives.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "ifNotEmpty",
          "return": {
            "type": {
              "text": "any"
            }
          },
          "parameters": [
            {
              "name": "value",
              "optional": true,
              "type": {
                "text": "string | null"
              }
            }
          ],
          "description": "Lit directive that only applies when provided value is not falsy(undefined, null, or empty string)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ifNotEmpty",
          "declaration": {
            "name": "ifNotEmpty",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/Directives.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An custom web component that renders the template directly into the main DOM tree instead of the ShadowRoot",
          "name": "DOMTreeElement",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DOMTreeElement",
          "declaration": {
            "name": "DOMTreeElement",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DOMTreeElement",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/Clear.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Clear icon component.",
          "name": "ClearIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-clear-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Clear.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ClearIcon",
          "declaration": {
            "name": "ClearIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Clear.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-clear-icon",
          "declaration": {
            "name": "ClearIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Clear.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Base class used by form components to share common properties, styles and functionality.",
          "name": "OmniFormElement",
          "cssProperties": [
            {
              "description": " Container font family.",
              "name": "--omni-container-font-family"
            },
            {
              "description": "Container width.",
              "name": "--omni-container-width"
            },
            {
              "description": "Container height.",
              "name": "--omni-container-height"
            },
            {
              "description": "Layout border radius.",
              "name": "--omni-form-layout-border-radius"
            },
            {
              "description": "Layout background color.",
              "name": "--omni-form-layout-background-color"
            },
            {
              "description": "Layout height.",
              "name": "--omni-form-layout-height"
            },
            {
              "description": "Layout width.",
              "name": "--omni-form-layout-width"
            },
            {
              "description": "Form border top.",
              "name": "--omni-form-border-top"
            },
            {
              "description": "Form border bottom.",
              "name": "--omni-form-border-bottom"
            },
            {
              "description": "Form border left.",
              "name": "--omni-form-border-left"
            },
            {
              "description": "Form border right.",
              "name": "--omni-form-border-right"
            },
            {
              "description": "Form border width.",
              "name": "--omni-form-border-width"
            },
            {
              "description": "Form border radius.",
              "name": "--omni-form-border-radius"
            },
            {
              "description": "Form border style.",
              "name": "--omni-form-border-style"
            },
            {
              "description": "Form border color.",
              "name": "--omni-form-border-color"
            },
            {
              "description": "Form label margin left.",
              "name": "--omni-form-label-margin-left"
            },
            {
              "description": "Form label text align.",
              "name": "--omni-form-label-text-align"
            },
            {
              "description": "Form label color.",
              "name": "--omni-form-label-color"
            },
            {
              "description": "Form label font size.",
              "name": "--omni-form-label-font-size"
            },
            {
              "description": "Form label font weight.",
              "name": "--omni-form-label-font-weight"
            },
            {
              "description": "Form label z-index.",
              "name": "--omni-form-label-z-index"
            },
            {
              "description": "Form focussed border width.",
              "name": "--omni-form-focussed-border-width"
            },
            {
              "description": "Form focussed border color.",
              "name": "--omni-form-focussed-border-color"
            },
            {
              "description": "Form focussed label disabled background color.",
              "name": "--omni-form-focussed-label-disabled-background-color"
            },
            {
              "description": "Form focussed label transform scale.",
              "name": "--omni-form-focussed-label-transform-scale"
            },
            {
              "description": "Form focussed label left margin.",
              "name": "--omni-form-focussed-label-margin-left"
            },
            {
              "description": "Form focussed label color.",
              "name": "--omni-form-focussed-label-color"
            },
            {
              "description": "Form focussed error label color.",
              "name": "--omni-form-focussed-error-label-color"
            },
            {
              "description": "Form focussed label background color.",
              "name": "--omni-form-focussed-label-background-color"
            },
            {
              "description": "Form focussed label left.",
              "name": "--omni-form-focussed-label-padding-left"
            },
            {
              "description": "Form focussed label right.",
              "name": "--omni-form-focussed-label-padding-right"
            },
            {
              "description": "Form error label color.",
              "name": "--omni-form-error-label-color"
            },
            {
              "description": "Form error border color.",
              "name": "--omni-form-error-border-color"
            },
            {
              "description": "Form label disabled color.",
              "name": "--omni-form-label-disabled-color"
            },
            {
              "description": "Form disabled border color.",
              "name": "--omni-form-disabled-border-color"
            },
            {
              "description": "Form disabled background color.",
              "name": "--omni-form-disabled-background-color"
            },
            {
              "description": "Form disabled label focussed background color.",
              "name": "--omni-form-disabled-focussed-label-background-color"
            },
            {
              "description": "Form hint label font color.",
              "name": "--omni-form-hint-label-font-color"
            },
            {
              "description": "Form hint label font family.",
              "name": "--omni-form-hint-label-font-family"
            },
            {
              "description": "Form hint label font size.",
              "name": "--omni-form-hint-label-font-size"
            },
            {
              "description": "Form hint label font weight.",
              "name": "--omni-form-hint-label-font-weight"
            },
            {
              "description": "Form hint label top padding.",
              "name": "--omni-form-hint-label-padding-top"
            },
            {
              "description": "Form hint label left padding.",
              "name": "--omni-form-hint-label-padding-left"
            },
            {
              "description": "Form hint label border width.",
              "name": "--omni-form-hint-label-border-width"
            },
            {
              "description": "Form error label font color.",
              "name": "--omni-form-error-label-font-color"
            },
            {
              "description": "Form error label font family.",
              "name": "--omni-form-error-label-font-family"
            },
            {
              "description": "Form error label font size.",
              "name": "--omni-form-error-label-font-size"
            },
            {
              "description": "Form error label font weight.",
              "name": "--omni-form-error-label-font-weight"
            },
            {
              "description": "Form error label top padding.",
              "name": "--omni-form-error-label-padding-top"
            },
            {
              "description": "Form error label left padding.",
              "name": "--omni-form-error-label-padding-left"
            },
            {
              "description": "Form error label border width.",
              "name": "--omni-form-error-label-border-width"
            },
            {
              "description": "Form hover color.",
              "name": "--omni-form-hover-color"
            },
            {
              "description": "Form disabled hover color.",
              "name": "--omni-form-disabled-hover-color"
            },
            {
              "description": "Form error hover color.",
              "name": "--omni-form-error-hover-color"
            },
            {
              "description": "Form clear control right margin.",
              "name": "--omni-form-clear-control-margin-right"
            },
            {
              "description": " Form clear control left margin.",
              "name": "--omni-form-clear-control-margin-left"
            },
            {
              "description": "Form clear control width.",
              "name": "--omni-form-clear-control-width"
            },
            {
              "description": "Form clear icon color.",
              "name": "--omni-form-clear-slot-color"
            },
            {
              "description": "Form clear slot height.",
              "name": "--omni-form-clear-slot-height"
            },
            {
              "description": "Form clear slot width.",
              "name": "--omni-form-clear-slot-width"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the clear slot.",
              "name": "clear"
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix"
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "attribute": "clearable",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_clearValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "focusedStatic",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data"
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint"
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "fieldName": "clearable",
              "attribute": "clearable"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "cssCategory": "Base Form Variables"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ifDefined",
          "declaration": {
            "name": "ifDefined",
            "package": "lit/directives/if-defined.js"
          }
        },
        {
          "kind": "js",
          "name": "OmniFormElement",
          "declaration": {
            "name": "OmniFormElement",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/Search.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Search icon component.",
          "name": "SearchIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-search-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Search.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchIcon",
          "declaration": {
            "name": "SearchIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Search.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-search-icon",
          "declaration": {
            "name": "SearchIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Search.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/search-field/SearchField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Search input control.",
          "name": "SearchField",
          "cssProperties": [
            {
              "description": "Search field text align.",
              "name": "--omni-search-field-text-align"
            },
            {
              "description": "Search field font color.",
              "name": "--omni-search-field-font-color"
            },
            {
              "description": "Search field font family.",
              "name": "--omni-search-field-font-family"
            },
            {
              "description": "Search field font size.",
              "name": "--omni-search-field-font-size"
            },
            {
              "description": "Search field font weight.",
              "name": "--omni-search-field-font-weight"
            },
            {
              "description": "Search field padding.",
              "name": "--omni-search-field-padding"
            },
            {
              "description": "Search field height.",
              "name": "--omni-search-field-height"
            },
            {
              "description": "Search field width.",
              "name": "--omni-search-field-width"
            },
            {
              "description": "Search field disabled font color.",
              "name": "--omni-search-field-disabled-font-color"
            },
            {
              "description": "Search field error font color.",
              "name": "--omni-search-field-error-font-color"
            },
            {
              "description": "Search field control right margin.",
              "name": "--omni-search-field-control-margin-right"
            },
            {
              "description": "Search field control left margin.",
              "name": "--omni-search-field-control-margin-left"
            },
            {
              "description": "Search field control width.",
              "name": "--omni-search-field-control-width"
            },
            {
              "description": "Search field clear icon color.",
              "name": "--omni-search-field-clear-icon-color"
            },
            {
              "description": "Search field clear icon width.",
              "name": "--omni-search-field-clear-icon-width"
            },
            {
              "description": "Search field search icon color.",
              "name": "--omni-search-field-search-icon-color"
            },
            {
              "description": "Search field search icon width.",
              "name": "--omni-search-field-search-icon-width"
            },
            {
              "description": "Search field search icon left margin.",
              "name": "--omni-search-field-search-icon-margin-left"
            },
            {
              "description": "Search field label left margin.",
              "name": "--omni-search-field-label-left-margin"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "noNativeKeyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "attribute": "no-native-keyboard",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyInput",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "attribute": "clearable",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "focusedStatic",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "no-native-keyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "fieldName": "noNativeKeyboard",
              "attribute": "no-native-keyboard"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "fieldName": "clearable",
              "attribute": "clearable",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.js"
          },
          "tagName": "omni-search-field",
          "import": "```js\nimport '@capitec/omni-components/search-field';\n```",
          "customElement": true,
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the clear slot.",
              "name": "clear",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchField",
          "declaration": {
            "name": "SearchField",
            "module": "/Users/runner/work/omni-components/omni-components/src/search-field/SearchField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-search-field",
          "declaration": {
            "name": "SearchField",
            "module": "/Users/runner/work/omni-components/omni-components/src/search-field/SearchField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/ChevronDown.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Chevron down icon component.",
          "name": "ChevronDownIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-chevron-down-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/ChevronDown.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChevronDownIcon",
          "declaration": {
            "name": "ChevronDownIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/ChevronDown.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-chevron-down-icon",
          "declaration": {
            "name": "ChevronDownIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/ChevronDown.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/More.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "More icon component.",
          "name": "MoreIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-more-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/More.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MoreIcon",
          "declaration": {
            "name": "MoreIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/More.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-more-icon",
          "declaration": {
            "name": "MoreIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/More.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/select/Select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to get / set a value within a list of options.",
          "name": "Select",
          "cssProperties": [
            {
              "description": "Select component input field text align.",
              "name": "--omni-select-field-text-align"
            },
            {
              "description": " Select component input field font color.",
              "name": "--omni-select-field-font-color"
            },
            {
              "description": "Select component input field font family.",
              "name": "--omni-select-field-font-family"
            },
            {
              "description": "Select component input field font size.",
              "name": "--omni-select-field-font-size"
            },
            {
              "description": "Select component input field font weight.",
              "name": "--omni-select-field-font-weight"
            },
            {
              "description": "Select component input field padding.",
              "name": "--omni-select-field-padding"
            },
            {
              "description": "Select component input field height.",
              "name": "--omni-select-field-height"
            },
            {
              "description": "Select component input field width.",
              "name": "--omni-select-field-width"
            },
            {
              "description": "Select component input field disabled font color.",
              "name": "--omni-select-field-disabled-font-color"
            },
            {
              "description": "Select component input field error font color.",
              "name": "--omni-select-field-error-font-color"
            },
            {
              "description": "Select component control padding.",
              "name": "--omni-select-control-padding"
            },
            {
              "description": "Select control icon width.",
              "name": "--omni-select-control-icon-width"
            },
            {
              "description": "Select control icon height.",
              "name": "--omni-select-control-icon-height"
            },
            {
              "description": "Select control icon color.",
              "name": "--omni-select-control-icon-color"
            },
            {
              "description": "Select control error icon color.",
              "name": "--omni-select-control-icon-error-color"
            },
            {
              "description": "Select items container box shadow.",
              "name": "--omni-select-items-container-box-shadow"
            },
            {
              "description": "Select items container background color.",
              "name": "--omni-select-items-container-background-color"
            },
            {
              "description": "Select items container z-index.",
              "name": "--omni-select-items-container-z-index"
            },
            {
              "description": "Select items max height.",
              "name": "--omni-select-items-max-height"
            },
            {
              "description": "Select items container width",
              "name": "--omni-select-items-container-width"
            },
            {
              "description": "Select items container top.",
              "name": "--omni-select-items-container-top"
            },
            {
              "description": "Select items container top when rendered at the bottom.",
              "name": "--omni-select-items-container-render-bottom-top"
            },
            {
              "description": "Select items height.",
              "name": "--omni-select-items-height"
            },
            {
              "description": "Select items width.",
              "name": "--omni-select-items-width"
            },
            {
              "description": "Select items background color.",
              "name": "--omni-select-items-background-color"
            },
            {
              "description": "Select item font color.",
              "name": "--omni-select-item-font-color"
            },
            {
              "description": "Select item font family.",
              "name": "--omni-select-item-font-family"
            },
            {
              "description": "Select item font size.",
              "name": "--omni-select-item-font-size"
            },
            {
              "description": "Select item font weight.",
              "name": "--omni-select-item-font-weight"
            },
            {
              "description": "Select item top padding.",
              "name": "--omni-select-item-padding-top"
            },
            {
              "description": "Select item bottom padding.",
              "name": "--omni-select-item-padding-bottom"
            },
            {
              "description": "Select item left padding.",
              "name": "--omni-select-item-padding-left"
            },
            {
              "description": "Select item right padding.",
              "name": "--omni-select-item-padding-right"
            },
            {
              "description": "Select item width.",
              "name": "--omni-select-item-width"
            },
            {
              "description": "Select item hover background color.",
              "name": "--omni-select-item-hover-background-color"
            },
            {
              "description": "Selected item color.",
              "name": "--omni-select-item-selected-color"
            },
            {
              "description": "Select item hover.",
              "name": "--omni-select-item-none-hover"
            },
            {
              "description": "Select loading indicator width.",
              "name": "--omni-select-loading-indicator-width"
            },
            {
              "description": "Select loading indicator height.",
              "name": "--omni-select-loading-indicator-height"
            },
            {
              "description": "Select search field font color.",
              "name": "--omni-select-search-field-font-color"
            },
            {
              "description": "Select search field font family.",
              "name": "--omni-select-search-field-font-family"
            },
            {
              "description": "Select search field font size.",
              "name": "--omni-select-search-field-font-size"
            },
            {
              "description": "Select search field font weight.",
              "name": "--omni-select-search-field-font-weight"
            },
            {
              "description": "Select search field top padding.",
              "name": "--omni-select-search-field-padding-top"
            },
            {
              "description": "Select search field bottom padding.",
              "name": "--omni-select-search-field-padding-bottom"
            },
            {
              "description": "Select search field left padding.",
              "name": "--omni-select-search-field-padding-left"
            },
            {
              "description": "Select search field right padding.",
              "name": "--omni-select-search-field-padding-right"
            },
            {
              "description": "Select search field width.",
              "name": "--omni-select-search-field-width"
            },
            {
              "description": "Select search field top border width.",
              "name": "--omni-select-search-field-top-border-width"
            },
            {
              "description": "Select search field left border width.",
              "name": "--omni-select-search-field-left-border-width"
            },
            {
              "description": "Select search field right border width.",
              "name": "--omni-select-search-field-right-border-width"
            },
            {
              "description": "Select search field bottom border width.",
              "name": "--omni-select-search-field-bottom-border-width"
            },
            {
              "description": "Select search field bottom border color.",
              "name": "--omni-select-search-field-bottom-border-color"
            },
            {
              "description": "Select search field background color.",
              "name": "--omni-select-search-field-background-color"
            },
            {
              "description": " Select search field clear control bottom border.",
              "name": "--omni-select-search-control-bottom-border"
            },
            {
              "description": "Select search field clear div right padding.",
              "name": "--omni-select-search-clear-div-right-padding"
            },
            {
              "description": "Select search field clear div background color.",
              "name": "--omni-select-search-clear-div-background-color"
            },
            {
              "description": "Select search field clear icon height.",
              "name": "--omni-select-search-clear-icon-height"
            },
            {
              "description": "Select search field clear icon width.",
              "name": "--omni-select-search-clear-icon-width"
            },
            {
              "description": "Select search field clear icon color.",
              "name": "--omni-select-search-clear-icon-color"
            },
            {
              "description": "Select item header left.",
              "name": "--omni-select-item-header-left"
            },
            {
              "description": "Select item header right.",
              "name": "--omni-select-item-header-right"
            },
            {
              "description": "Select item header font color.",
              "name": "--omni-select-item-header-font-color"
            },
            {
              "description": "Select item header font family.",
              "name": "--omni-select-item-header-font-family"
            },
            {
              "description": "Select item header font size.",
              "name": "--omni-select-item-header-font-size"
            },
            {
              "description": "Select item header font weight.",
              "name": "--omni-select-item-header-font-weight"
            },
            {
              "description": "Select item header font background color.",
              "name": "--omni-select-item-header-font-background-color"
            },
            {
              "description": "Select item header top padding.",
              "name": "--omni-select-item-header-padding-top"
            },
            {
              "description": "Select item head bottom padding.",
              "name": "--omni-select-item-header-padding-bottom"
            },
            {
              "description": "Select item head right padding.",
              "name": "--omni-select-item-header-padding-right"
            },
            {
              "description": "Select item head left padding.",
              "name": "--omni-select-item-header-padding-left"
            },
            {
              "description": "Select item header top left border radius.",
              "name": "--omni-select-item-header-item-border-top-left-radius"
            },
            {
              "description": "Select item header top right border radius.",
              "name": "--omni-select-item-header-item-border-top-right-radius"
            },
            {
              "description": "Select dialog width",
              "name": "--omni-select-dialog-width"
            },
            {
              "description": "Select dialog left.",
              "name": "--omni-select-dialog-left"
            },
            {
              "description": "Select dialog right.",
              "name": "--omni-select-dialog-right"
            },
            {
              "description": "Select dialog bottom.",
              "name": "--omni-select-dialog-bottom"
            },
            {
              "description": "Select dialog background color.",
              "name": "--omni-select-dialog-background-color"
            },
            {
              "description": "Select dialog modal max width.",
              "name": "--omni-select-dialog-modal-max-width"
            },
            {
              "description": "Select dialog height.",
              "name": "--omni-select-dialog-modal-max-height"
            },
            {
              "description": "Select dialog background color.",
              "name": "--omni-select-dialog-backdrop-color"
            },
            {
              "description": "Select dialog items min height.",
              "name": "--omni-select-dialog-items-min-height"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the clear slot.",
              "name": "clear",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the more slot (Displays on mobile devices).",
              "name": "more"
            },
            {
              "description": "Replaces the icon for the arrow slot (Displays on desktop and tablet devices).",
              "name": "arrow"
            },
            {
              "description": "Replaces the icon in the Search field (Displays when searchable is set to true).",
              "name": "search-clear"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_selectElement",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_searchElement",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_itemsContainer",
              "type": {
                "text": "HTMLDivElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "SelectItems | ((filterValue?: string) => SelectItems) | undefined"
              },
              "description": "Selectable items of the select component.",
              "attribute": "items",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "displayField",
              "type": {
                "text": "string | undefined"
              },
              "description": "Field of the item to display as one of the selectable options.",
              "attribute": "display-field",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "idField",
              "type": {
                "text": "string"
              },
              "default": "'id'",
              "description": "Id field of the items provided.",
              "attribute": "id-field",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emptyMessage",
              "type": {
                "text": "string"
              },
              "default": "'No items provided'",
              "description": "Message displayed in the items container when no items are bound to the component.",
              "attribute": "empty-message",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "searchable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to search the items of the select of the component.",
              "attribute": "searchable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderItem",
              "type": {
                "text": "RenderFunction | undefined"
              },
              "description": "Render function for each item."
            },
            {
              "kind": "field",
              "name": "renderSelection",
              "type": {
                "text": "RenderFunction | undefined"
              },
              "description": "Render function for selected item."
            },
            {
              "kind": "field",
              "name": "filterItems",
              "type": {
                "text": "(filterValue: string, items: SelectTypes) => SelectItems | undefined"
              },
              "description": "Custom search function for items instead of using the default provided."
            },
            {
              "kind": "field",
              "name": "_popUp",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_bottomOfViewport",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isMobile",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_searchValue",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_inputClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_windowClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_controlClick",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_togglePopup",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onItemClick",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "Record<string, unknown> | string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_checkScreenDimensions",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_checkForBottomOfScreen",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_checkforMobile",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_itemsMaxHeightChange",
              "parameters": [
                {
                  "name": "el",
                  "optional": true,
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onSearchFieldInput",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onSearchFieldClear",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1> | unique symbol"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderSearchField",
              "return": {
                "type": {
                  "text": "TemplateResult<1> | unique symbol"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderOptions",
              "return": {
                "type": {
                  "text": "Promise<TemplateResult<1> | TemplateResult<1>[]>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_filterOption",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "string | Record<string, unknown>"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string | boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderOption",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "Record<string, unknown> | string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "focusedStatic",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "attribute": "clearable",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "items",
              "type": {
                "text": "SelectItems | ((filterValue?: string) => SelectItems) | undefined"
              },
              "description": "Selectable items of the select component.",
              "fieldName": "items",
              "attribute": "items"
            },
            {
              "name": "display-field",
              "type": {
                "text": "string | undefined"
              },
              "description": "Field of the item to display as one of the selectable options.",
              "fieldName": "displayField",
              "attribute": "display-field"
            },
            {
              "name": "id-field",
              "type": {
                "text": "string"
              },
              "default": "'id'",
              "description": "Id field of the items provided.",
              "fieldName": "idField",
              "attribute": "id-field"
            },
            {
              "name": "empty-message",
              "type": {
                "text": "string"
              },
              "default": "'No items provided'",
              "description": "Message displayed in the items container when no items are bound to the component.",
              "fieldName": "emptyMessage",
              "attribute": "empty-message"
            },
            {
              "name": "searchable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to search the items of the select of the component.",
              "fieldName": "searchable",
              "attribute": "searchable"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "fieldName": "clearable",
              "attribute": "clearable",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.js"
          },
          "tagName": "omni-select",
          "import": "```js\nimport '@capitec/omni-components/select';\n```",
          "customElement": true,
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "/Users/runner/work/omni-components/omni-components/src/select/Select.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-select",
          "declaration": {
            "name": "Select",
            "module": "/Users/runner/work/omni-components/omni-components/src/select/Select.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "SelectTypes",
          "type": "string[] | Record<string, unknown>[]"
        },
        {
          "alias": "SelectItems",
          "type": "SelectTypes | Promise<SelectTypes>"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icon/Icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component that displays an icon.",
          "name": "Icon",
          "cssProperties": [
            {
              "description": "Icon fill color.",
              "name": "--omni-icon-fill"
            },
            {
              "description": "Icon background color.",
              "name": "--omni-icon-background-color"
            },
            {
              "description": "Icon large size.",
              "name": "--omni-icon-size-large"
            },
            {
              "description": "Icon medium size.",
              "name": "--omni-icon-size-medium"
            },
            {
              "description": "Icon small size.",
              "name": "--omni-icon-size-small"
            },
            {
              "description": "Icon extra small size.",
              "name": "--omni-icon-size-extra-small"
            },
            {
              "description": "Icon default size.",
              "name": "--omni-icon-size-default"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "The icon to be displayed",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'default' | 'extra-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'default'",
              "description": "Size to display the icon at",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name of the icon to display. Takes preference over the slotted icon.",
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "symmetrical",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, enforces 1:1 width and height of the icon.",
              "attribute": "symmetrical",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'default' | 'extra-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'default'",
              "description": "Size to display the icon at",
              "fieldName": "size",
              "attribute": "size"
            },
            {
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name of the icon to display. Takes preference over the slotted icon.",
              "fieldName": "icon",
              "attribute": "icon"
            },
            {
              "name": "symmetrical",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, enforces 1:1 width and height of the icon.",
              "fieldName": "symmetrical",
              "attribute": "symmetrical"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-icon",
          "import": "```js\nimport '@capitec/omni-components/icon';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icon/Icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-icon",
          "declaration": {
            "name": "Icon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icon/Icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/utils/CodeEditor.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CodeEditor",
          "members": [
            {
              "kind": "field",
              "name": "extensions",
              "type": {
                "text": "() => Extension | Promise<Extension>"
              },
              "attribute": "extensions"
            },
            {
              "kind": "field",
              "name": "transformSource",
              "type": {
                "text": "(source: string) => string | Promise<string>"
              },
              "attribute": "transformSource"
            },
            {
              "kind": "field",
              "name": "code",
              "type": {
                "text": "string | Promise<string> | undefined"
              },
              "attribute": "code",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "attribute": "read-only",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noTab",
              "type": {
                "text": "boolean"
              },
              "attribute": "no-tab",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "codeParent",
              "type": {
                "text": "HTMLDivElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "slotElement",
              "type": {
                "text": "HTMLSlotElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "editor",
              "type": {
                "text": "EditorView | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "readonlyOrDisabled",
              "privacy": "private",
              "default": "new Compartment()"
            },
            {
              "kind": "field",
              "name": "userExtensions",
              "privacy": "private",
              "default": "new Compartment()"
            },
            {
              "kind": "method",
              "name": "refresh",
              "privacy": "public",
              "parameters": [
                {
                  "name": "getCode",
                  "default": "undefined as any",
                  "type": {
                    "text": "() => string | Promise<string>"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateExtensions",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_copyCode",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_fallbackCopyTextToClipboard",
              "privacy": "private",
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_copyTextToClipboard",
              "privacy": "private",
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_slotChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_readCode",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "slotElement",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_clearElements",
              "privacy": "private",
              "parameters": [
                {
                  "name": "el",
                  "default": "undefined as any",
                  "type": {
                    "text": "Element | ShadowRoot"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_clearOtherElements",
              "privacy": "private",
              "parameters": [
                {
                  "name": "el",
                  "default": "undefined as any",
                  "type": {
                    "text": "Element | ShadowRoot"
                  }
                },
                {
                  "name": "onlyChild",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "name": "codemirror-update",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "codemirror-source-change",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "codemirror-loaded",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "extensions",
              "type": {
                "text": "() => Extension | Promise<Extension>"
              },
              "fieldName": "extensions"
            },
            {
              "name": "transformSource",
              "type": {
                "text": "(source: string) => string | Promise<string>"
              },
              "fieldName": "transformSource"
            },
            {
              "name": "code",
              "type": {
                "text": "string | Promise<string> | undefined"
              },
              "fieldName": "code"
            },
            {
              "name": "read-only",
              "type": {
                "text": "boolean"
              },
              "fieldName": "readOnly"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "fieldName": "disabled"
            },
            {
              "name": "no-tab",
              "type": {
                "text": "boolean"
              },
              "fieldName": "noTab"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "ignore": true,
          "tagName": "code-editor",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "code-editor",
          "declaration": {
            "name": "CodeEditor",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/CodeEditor.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "CodeMirrorEditorEvent",
          "type": "{\n    editor: EditorView;\n    source: string;\n}"
        },
        {
          "alias": "CodeMirrorUpdateEvent",
          "type": "CodeMirrorEditorEvent & {\n    update: ViewUpdate;\n}"
        },
        {
          "alias": "CodeMirrorSourceUpdateEvent",
          "type": "CodeMirrorUpdateEvent & {\n    oldSource: string;\n}"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/utils/PlayFunction.ts",
      "declarations": [],
      "exports": [],
      "typeAliases": [
        {
          "alias": "PlayFunction",
          "type": "(context: PlayFunctionContext<T>) => Promise<void> | void"
        },
        {
          "alias": "PlayFunctionContext",
          "type": "{\n    args: T;\n    story: ComponentStoryFormat<T>;\n    canvasElement: HTMLElement;\n}"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/utils/ComponentStoryFormat.ts",
      "declarations": [],
      "exports": [],
      "typeAliases": [
        {
          "alias": "ComponentStoryFormat",
          "type": "{\n    /**\n     * Custom render function for the story. (standard)\n     */\n    render?: (args: T) => any;\n\n    /**\n     * Suitable name for the story. (standard)\n     */\n    name?: string;\n\n    /**\n     * Suitable description for the story. (non-standard)\n     */\n    description?: string | (() => any);\n\n    /**\n     * Dynamic set of arguments for the story to execute. (standard)\n     */\n    args?: Partial<T>;\n\n    /**\n     * Test function for the story (standard)\n     */\n    play?: PlayFunction<T>;\n\n    /**\n     * Obtain original DOM source (non-standard)\n     */\n    //source?: () => string;\n\n    /**\n     * Obtain source per framework (non-standard)\n     */\n    frameworkSources?: FrameworkSource<T>[];\n}"
        },
        {
          "alias": "FrameworkSource",
          "type": "{\n    /**\n     * Framework that the source relates to.\n     */\n    framework: FrameworkOption;\n    /**\n     * Function that generates a source string from provided args.\n     */\n    load?: (args: T, self: FrameworkSource<T>) => string;\n\n    /**\n     * Indicates that code is not valid for translating to CodePen.\n     */\n    disableCodePen?: boolean;\n\n    /**\n     * Optional specific source parts for use when additional source is required.\n     */\n    sourceParts?: SourceParts<T>;\n}"
        },
        {
          "alias": "SourceParts",
          "type": "{\n    /**\n     * Fragment source that will be injected after imports and before content in CodePen js file.\n     */\n    jsFragment?: string | ((args: T) => string);\n\n    /**\n     * Fragment source that will be injected in relevant html part for CodePen.\n     */\n    htmlFragment?: string | ((args: T) => string);\n    /**\n     * Fragment source that will be injected at the end of CodePen css file.\n     */\n    cssFragment?: string | ((args: T) => string);\n    /**\n     * Will force CodePen generation as fallback HTML framework even if specified as other framework.\n     */\n    fallbackFramework?: boolean;\n}"
        },
        {
          "alias": "FrameworkOption",
          "type": "'HTML' | 'Lit' | 'React' | 'Vue'"
        },
        {
          "alias": "CSFIdentifier",
          "type": "{\n    title: string;\n    component: string;\n}"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/color-field/ColorField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Color input control.",
          "name": "ColorField",
          "cssProperties": [
            {
              "description": "Color field text align.",
              "name": "--omni-color-field-text-align"
            },
            {
              "description": "Color field font color.",
              "name": "--omni-color-field-font-color"
            },
            {
              "description": "Color field font family.",
              "name": "--omni-color-field-font-family"
            },
            {
              "description": "Color field font size.",
              "name": "--omni-color-field-font-size"
            },
            {
              "description": "Color field font weight.",
              "name": "--omni-color-field-font-weight"
            },
            {
              "description": "Color field height.",
              "name": "--omni-color-field-height"
            },
            {
              "description": "Color field min height.",
              "name": "--omni-color-field-min-height"
            },
            {
              "description": "Color field min width.",
              "name": "--omni-color-field-min-width"
            },
            {
              "description": "Color field width.",
              "name": "--omni-color-field-padding"
            },
            {
              "description": "Color field text selection.",
              "name": "--omni-color-field-text-select"
            },
            {
              "description": "Color field picker height.",
              "name": "--omni-color-field-picker-height"
            },
            {
              "description": "Color field picker width.",
              "name": "--omni-color-field-picker-width"
            },
            {
              "description": "Color field disabled font color.",
              "name": "--omni-color-field-disabled-font-color"
            },
            {
              "description": "Color field error font color.",
              "name": "--omni-color-field-error-font-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_keyInput",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "attribute": "clearable",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "focusedStatic",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.js"
          },
          "tagName": "omni-color-field",
          "import": "```js\nimport '@capitec/omni-components/color-field';\n```",
          "customElement": true,
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "fieldName": "clearable",
              "attribute": "clearable",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the clear slot.",
              "name": "clear",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ColorField",
          "declaration": {
            "name": "ColorField",
            "module": "/Users/runner/work/omni-components/omni-components/src/color-field/ColorField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-color-field",
          "declaration": {
            "name": "ColorField",
            "module": "/Users/runner/work/omni-components/omni-components/src/color-field/ColorField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/text-field/TextField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to input text.",
          "name": "TextField",
          "cssProperties": [
            {
              "description": "Text field text align.",
              "name": "--omni-text-field-text-align"
            },
            {
              "description": "Text field font color.",
              "name": "--omni-text-field-font-color"
            },
            {
              "description": "Text field font family.",
              "name": "--omni-text-field-font-family"
            },
            {
              "description": "Text field font size.",
              "name": "--omni-text-field-font-size"
            },
            {
              "description": "Text field font weight.",
              "name": "--omni-text-field-font-weight"
            },
            {
              "description": "Text field padding.",
              "name": "--omni-text-field-padding"
            },
            {
              "description": "Text field height.",
              "name": "--omni-text-field-height"
            },
            {
              "description": "Text field width.",
              "name": "--omni-text-field-width"
            },
            {
              "description": "Text field disabled font color.",
              "name": "--omni-text-field-disabled-font-color"
            },
            {
              "description": "Text field error font color.",
              "name": "--omni-text-field-font-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "noNativeKeyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "attribute": "no-native-keyboard",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyInput",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "attribute": "clearable",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "focusedStatic",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "no-native-keyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "fieldName": "noNativeKeyboard",
              "attribute": "no-native-keyboard"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "fieldName": "clearable",
              "attribute": "clearable",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.js"
          },
          "tagName": "omni-text-field",
          "import": "```js\nimport '@capitec/omni-components/text-field';\n```",
          "customElement": true,
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the clear slot.",
              "name": "clear",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextField",
          "declaration": {
            "name": "TextField",
            "module": "/Users/runner/work/omni-components/omni-components/src/text-field/TextField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-text-field",
          "declaration": {
            "name": "TextField",
            "module": "/Users/runner/work/omni-components/omni-components/src/text-field/TextField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/label/Label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Label component that renders styled text.",
          "name": "Label",
          "cssProperties": [
            {
              "description": "Label font color.",
              "name": "--omni-label-font-color"
            },
            {
              "description": "Label font family.",
              "name": "--omni-label-font-family"
            },
            {
              "description": "Label font size.",
              "name": "--omni-label-font-size"
            },
            {
              "description": "Label font weight.",
              "name": "--omni-label-font-weight"
            },
            {
              "description": "Label cursor.",
              "name": "--omni-label-cursor"
            },
            {
              "description": "Title label font size.",
              "name": "--omni-label-title-font-size"
            },
            {
              "description": "Title label font weight.",
              "name": "--omni-label-title-font-weight"
            },
            {
              "description": "Subtitle label font size.",
              "name": "--omni-label-subtitle-font-size"
            },
            {
              "description": "Subtitle label font weight.",
              "name": "--omni-label-subtitle-font-weight"
            },
            {
              "description": "Strong label font size.",
              "name": "--omni-label-strong-font-size"
            },
            {
              "description": "Strong label font weight.",
              "name": "--omni-label-strong-font-weight"
            },
            {
              "description": "Default label font size.",
              "name": "--omni-label-default-font-size"
            },
            {
              "description": "Default label font weight.",
              "name": "--omni-label-default-font-weight"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside the component. Registry of all properties defined by the component.",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'default' | 'title' | 'subtitle' | 'strong'"
              },
              "default": "'default'",
              "description": "Type of label to display.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "type",
              "type": {
                "text": "'default' | 'title' | 'subtitle' | 'strong'"
              },
              "default": "'default'",
              "description": "Type of label to display.",
              "fieldName": "type",
              "attribute": "type"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-label",
          "import": "```js\nimport '@capitec/omni-components/label';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "/Users/runner/work/omni-components/omni-components/src/label/Label.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-label",
          "declaration": {
            "name": "Label",
            "module": "/Users/runner/work/omni-components/omni-components/src/label/Label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/switch/Switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to switch a value on or off.",
          "name": "Switch",
          "cssProperties": [
            {
              "description": "Label font color.",
              "name": "--omni-switch-label-font-color"
            },
            {
              "description": "Label font family.",
              "name": "--omni-switch-label-font-family"
            },
            {
              "description": "Label font size.",
              "name": "--omni-switch-label-font-size"
            },
            {
              "description": "Label font weight.",
              "name": "--omni-switch-label-font-weight"
            },
            {
              "description": "Label left margin spacing.",
              "name": "--omni-switch-label-spacing"
            },
            {
              "description": "Hint text font color.",
              "name": "--omni-switch-input-hint-label-font-color"
            },
            {
              "description": "Hint text font family.",
              "name": "--omni-switch-input-hint-label-font-family"
            },
            {
              "description": "Hint text font size.",
              "name": "--omni-switch-input-hint-label-font-size"
            },
            {
              "description": "Hint text font weight.",
              "name": "--omni-switch-input-hint-label-font-weight"
            },
            {
              "description": "Error text font color.",
              "name": "--omni-switch-input-error-label-font-color"
            },
            {
              "description": "Error text font family.",
              "name": "--omni-switch-input-error-label-font-family"
            },
            {
              "description": "Error text font size.",
              "name": "--omni-switch-input-error-label-font-size"
            },
            {
              "description": "Error text font weight.",
              "name": "--omni-switch-input-error-label-font-weight"
            },
            {
              "description": "Track width.",
              "name": "--omni-switch-track-width"
            },
            {
              "description": "Track height.",
              "name": "--omni-switch-track-height"
            },
            {
              "description": "Track background color.",
              "name": "--omni-switch-track-background-color"
            },
            {
              "description": "Track border radius.",
              "name": "--omni-switch-track-border-radius"
            },
            {
              "description": "Track inset margins.",
              "name": "--omni-switch-track-inset"
            },
            {
              "description": "Knob height.",
              "name": "--omni-switch-knob-height"
            },
            {
              "description": "Knob width.",
              "name": "--omni-switch-knob-width"
            },
            {
              "description": "Knob background color.",
              "name": "--omni-switch-knob-background-color"
            },
            {
              "description": "Knob box shadow.",
              "name": "--omni-switch-knob-box-shadow"
            },
            {
              "description": "Knob hover box shadow.",
              "name": "--omni-switch-knob-hover-box-shadow"
            },
            {
              "description": "Track checked background color.",
              "name": "--omni-switch-checked-track-background-color"
            },
            {
              "description": "Knob checked hover box shadow.",
              "name": "--omni-switch-checked-hover-knob-box-shadow"
            },
            {
              "description": "Track disabled background color.",
              "name": "--omni-switch-disabled-track-background-color"
            },
            {
              "description": "Knob checked background color.",
              "name": "--omni-switch-checked-knob-background-color"
            },
            {
              "description": "Knob disabled background color..",
              "name": "--omni-switch-disabled-knob-background-color"
            },
            {
              "description": "Knob disabled hover box shadow.",
              "name": "--omni-switch-disabled-knob-box-shadow"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside the component.",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "An error message to guide users to correct a mistake.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is checked or not.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_click",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_switchChecked",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_keyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "value-change",
              "type": {
                "text": "CustomEvent<{ old: Boolean; new: Boolean; }>"
              },
              "description": "Dispatched when the switch checked state is changed."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data"
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint"
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "An error message to guide users to correct a mistake.",
              "fieldName": "error",
              "attribute": "error"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is checked or not.",
              "fieldName": "checked",
              "attribute": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-switch",
          "import": "```js\nimport '@capitec/omni-components/switch';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Switch",
          "declaration": {
            "name": "Switch",
            "module": "/Users/runner/work/omni-components/omni-components/src/switch/Switch.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-switch",
          "declaration": {
            "name": "Switch",
            "module": "/Users/runner/work/omni-components/omni-components/src/switch/Switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/utils/LivePropertyEditor.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LivePropertyEditor",
          "members": [
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "ComponentStoryFormat<any> | undefined"
              },
              "attribute": "data"
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "element",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "ignoreAttributes",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "ignore-attributes",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "customElementsPath",
              "type": {
                "text": "string"
              },
              "default": "'./custom-elements.json'",
              "attribute": "custom-elements",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "customElements",
              "type": {
                "text": "Package | undefined"
              }
            },
            {
              "kind": "field",
              "name": "slotCodeEditors",
              "type": {
                "text": "NodeListOf<CodeEditor> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_firstRenderCompleted",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "resetSlots",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_propertyChanged",
              "privacy": "private",
              "parameters": [
                {
                  "name": "propertyChangeDetail",
                  "type": {
                    "text": "PropertyChangeEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_currentCodeTheme",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Extension"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "property-change",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "component-render-complete",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "data",
              "type": {
                "text": "ComponentStoryFormat<any> | undefined"
              },
              "fieldName": "data"
            },
            {
              "name": "element",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "element"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "fieldName": "disabled"
            },
            {
              "name": "ignore-attributes",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "ignoreAttributes"
            },
            {
              "name": "custom-elements",
              "type": {
                "text": "string"
              },
              "default": "'./custom-elements.json'",
              "fieldName": "customElementsPath"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "ignore": true,
          "tagName": "live-property-editor",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "live-property-editor",
          "declaration": {
            "name": "LivePropertyEditor",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/LivePropertyEditor.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "PropertyChangeEvent",
          "type": "{ property: string; newValue: string | number | boolean; oldValue: string | number | boolean }"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/utils/StoryController.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StoryController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              }
            },
            {
              "kind": "field",
              "name": "storyPath",
              "type": {
                "text": "string"
              },
              "default": "storyPath"
            },
            {
              "kind": "field",
              "name": "story",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StoryController",
          "declaration": {
            "name": "StoryController",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryController.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/utils/StoryRenderer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StoryRenderer",
          "members": [
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "path",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tag",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "tag",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "key",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "interactive",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "interactive",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_interactiveSrc",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_showStylesDialog",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "codeEditor",
              "type": {
                "text": "CodeEditor | undefined"
              }
            },
            {
              "kind": "field",
              "name": "secondaryCodeEditor",
              "type": {
                "text": "CodeEditor | undefined"
              }
            },
            {
              "kind": "field",
              "name": "propertyEditor",
              "type": {
                "text": "LivePropertyEditor | undefined"
              }
            },
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "StoryController | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "customCss",
              "type": {
                "text": "HTMLStyleElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "story",
              "type": {
                "text": "ComponentStoryFormat<any> & {\n        originalArgs: any;\n    } | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "customElements",
              "type": {
                "text": "Package | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cssVariables",
              "type": {
                "text": "CSSVariable[] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "modal",
              "type": {
                "text": "HTMLDivElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "sourceFallbacks",
              "type": {
                "text": "[\n        {\n            fallbackFramework: FrameworkOption;\n            frameworks: FrameworkOption[];\n            allowRenderFromResult?: boolean;\n        }\n    ]"
              },
              "default": "[\n        {\n            fallbackFramework: 'HTML',\n            frameworks: ['HTML', 'Lit', 'Vue'],\n            allowRenderFromResult: true\n        }\n    ]"
            },
            {
              "kind": "field",
              "name": "noInteractiveCodePen",
              "type": {
                "text": "FrameworkOption[]"
              },
              "default": "['React']"
            },
            {
              "kind": "method",
              "name": "handleCustomThemeCSSVariableSearch",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderCssVariable",
              "parameters": [
                {
                  "name": "variable",
                  "type": {
                    "text": "CSSVariable"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1> | unique symbol"
                }
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              }
            },
            {
              "kind": "method",
              "name": "_sortCssVariables",
              "privacy": "private",
              "parameters": [
                {
                  "name": "a",
                  "type": {
                    "text": "CSSVariable"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "text": "CSSVariable"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "0 | 1 | -1"
                }
              }
            },
            {
              "kind": "method",
              "name": "_cssChanged",
              "privacy": "private",
              "parameters": [
                {
                  "name": "changed",
                  "type": {
                    "text": "CSSVariable"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_showComponentStyles",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_checkCloseModal",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_resetLivePropertyEditor",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_generateCodePen",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "FrameworkOption"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_currentCodeTheme",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Extension"
                }
              }
            }
          ],
          "events": [
            {
              "name": "interactiveUpdate",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "path"
            },
            {
              "name": "tag",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "tag"
            },
            {
              "name": "key",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "key"
            },
            {
              "name": "interactive",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "interactive"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "ignore": true,
          "tagName": "story-renderer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "story-renderer",
          "declaration": {
            "name": "StoryRenderer",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryRenderer.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "CSSVariable",
          "type": "{\n    control: 'text' | 'color';\n    description: string;\n    category: string;\n    subcategory: string;\n    value: string;\n    name: string;\n}"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "frameworkStorageKey",
          "type": {
            "text": "string"
          },
          "default": "'omni-docs-framework-selection'"
        },
        {
          "kind": "function",
          "name": "loadCssProperties",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            },
            {
              "name": "cssDeclarations",
              "default": "undefined as any",
              "type": {
                "text": "Record<\n        string,\n        {\n            control: 'color' | 'text';\n            description: string;\n            category: string;\n            subcategory: string;\n            value: string;\n        }\n    >"
              }
            }
          ],
          "return": {
            "type": {
              "text": "Record<string, { control: \"color\" | \"text\"; description: string; category: string; subcategory: string; value: string; }>"
            }
          }
        },
        {
          "kind": "function",
          "name": "loadCustomElementsModuleByFileFor",
          "parameters": [
            {
              "name": "moduleName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            }
          ],
          "return": {
            "type": {
              "text": "JavaScriptModule | undefined"
            }
          }
        },
        {
          "kind": "function",
          "name": "loadCustomElementsModuleFor",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            }
          ],
          "return": {
            "type": {
              "text": "JavaScriptModule | undefined"
            }
          }
        },
        {
          "kind": "function",
          "name": "loadSlotFor",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "slotName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            }
          ],
          "return": {
            "type": {
              "text": "{ name: string; description: string; }"
            }
          }
        },
        {
          "kind": "function",
          "name": "loadSlotForModule",
          "return": {
            "type": {
              "text": "{ name: string; description: string }"
            }
          },
          "parameters": [
            {
              "name": "elementModule",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "slotName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadDefaultSlotFor",
          "parameters": [
            {
              "name": "elementName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            }
          ],
          "return": {
            "type": {
              "text": "{ name: string; description: string; }"
            }
          }
        },
        {
          "kind": "function",
          "name": "loadDefaultSlotForModule",
          "parameters": [
            {
              "name": "elementModule",
              "type": {
                "text": "any"
              }
            }
          ],
          "return": {
            "type": {
              "text": "{ name: string; description: string; }"
            }
          }
        },
        {
          "kind": "function",
          "name": "assignToSlot",
          "parameters": [
            {
              "name": "slotName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "rawHtml",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "string"
            }
          }
        },
        {
          "kind": "function",
          "name": "markdownCode",
          "parameters": [
            {
              "name": "code",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lang",
              "default": "''",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "string"
            }
          }
        },
        {
          "kind": "function",
          "name": "loadFileRemote",
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "Promise<any>"
            }
          }
        },
        {
          "kind": "function",
          "name": "formatMarkdownCodeElements",
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lang",
              "default": "'js'",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "any"
            }
          }
        },
        {
          "kind": "function",
          "name": "markdownCodeToHtml",
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lang",
              "default": "'js'",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "any"
            }
          }
        },
        {
          "kind": "function",
          "name": "enhanceCodeBlocks",
          "parameters": [
            {
              "name": "parent",
              "type": {
                "text": "Element"
              }
            }
          ],
          "return": {
            "type": {
              "text": "void"
            }
          }
        },
        {
          "kind": "function",
          "name": "loadCustomElementsCodeMirrorCompletions",
          "parameters": [
            {
              "name": "customElements",
              "type": {
                "text": "Package"
              }
            }
          ],
          "return": {
            "type": {
              "text": "{ extraTags?: Record<string, TagSpec> | undefined; extraGlobalAttributes?: Record<string, readonly string[] | null> | undefined; }"
            }
          }
        },
        {
          "kind": "function",
          "name": "loadCustomElementsCodeMirrorCompletionsRemote",
          "parameters": [
            {
              "name": "path",
              "default": "'./custom-elements.json'"
            }
          ],
          "return": {
            "type": {
              "text": "Promise<{ extraTags?: Record<string, TagSpec> | undefined; extraGlobalAttributes?: Record<string, readonly string[] | null> | undefined; }>"
            }
          }
        },
        {
          "kind": "function",
          "name": "loadCustomElements",
          "parameters": [
            {
              "name": "path",
              "default": "'./custom-elements.json'"
            }
          ],
          "return": {
            "type": {
              "text": "Promise<Package>"
            }
          }
        },
        {
          "kind": "function",
          "name": "filterJsDocLinks",
          "parameters": [
            {
              "name": "jsdoc",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "string"
            }
          }
        },
        {
          "kind": "function",
          "name": "transformFromJsdoc",
          "parameters": [
            {
              "name": "jsdoc",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "string"
            }
          }
        },
        {
          "kind": "function",
          "name": "raw",
          "parameters": [
            {
              "name": "strings",
              "type": {
                "text": "TemplateStringsArray"
              }
            },
            {
              "name": "values",
              "type": {
                "text": "unknown[]"
              }
            }
          ],
          "description": "Interprets a template literal as a raw HTML string.\n\n```ts\nconst header = (title: string) => raw`<h1>${title}</h1>`;\n```\n\nThe `raw` tag returns a string that can be used directly as ```innerHTML``` or as ```unsafeHTML``` via lit.",
          "return": {
            "type": {
              "text": "string"
            }
          }
        },
        {
          "kind": "function",
          "name": "asRenderString",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "strings",
              "type": {
                "text": "TemplateStringsArray"
              }
            },
            {
              "name": "values",
              "type": {
                "text": "unknown[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "querySelectorAsync",
          "parameters": [
            {
              "name": "parent",
              "type": {
                "text": "Element | ShadowRoot | Document"
              }
            },
            {
              "name": "selector",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "checkFrequencyMs",
              "default": "500",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "timeoutMs",
              "default": "3000",
              "type": {
                "text": "number"
              }
            }
          ],
          "return": {
            "type": {
              "text": "Promise<unknown>"
            }
          }
        },
        {
          "kind": "function",
          "name": "setupThemes",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          }
        },
        {
          "kind": "function",
          "name": "setupEleventy",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          }
        },
        {
          "kind": "function",
          "name": "setupTheming",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          }
        },
        {
          "kind": "function",
          "name": "uploadTheme",
          "parameters": [
            {
              "name": "e",
              "type": {
                "text": "Event"
              }
            }
          ],
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          }
        },
        {
          "kind": "function",
          "name": "getSourceFromLit",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "res",
              "type": {
                "text": "TemplateResult"
              }
            },
            {
              "name": "transformElement",
              "optional": true,
              "type": {
                "text": "(container: HTMLDivElement) => void"
              }
            },
            {
              "name": "transformSourceContent",
              "optional": true,
              "type": {
                "text": "(source: string) => string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "transformSource",
          "parameters": [
            {
              "name": "input",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Package",
          "declaration": {
            "name": "Package",
            "package": "custom-elements-manifest/schema"
          }
        },
        {
          "kind": "js",
          "name": "ClassDeclaration",
          "declaration": {
            "name": "ClassDeclaration",
            "package": "custom-elements-manifest/schema"
          }
        },
        {
          "kind": "js",
          "name": "CustomElementDeclaration",
          "declaration": {
            "name": "CustomElementDeclaration",
            "package": "custom-elements-manifest/schema"
          }
        },
        {
          "kind": "js",
          "name": "Declaration",
          "declaration": {
            "name": "Declaration",
            "package": "custom-elements-manifest/schema"
          }
        },
        {
          "kind": "js",
          "name": "CustomElement",
          "declaration": {
            "name": "CustomElement",
            "package": "custom-elements-manifest/schema"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./ComponentStoryFormat.js"
          }
        },
        {
          "kind": "js",
          "name": "PlayFunction",
          "declaration": {
            "name": "PlayFunction",
            "module": "./PlayFunction.js"
          }
        },
        {
          "kind": "js",
          "name": "PlayFunctionContext",
          "declaration": {
            "name": "PlayFunctionContext",
            "module": "./PlayFunction.js"
          }
        },
        {
          "kind": "js",
          "name": "frameworkStorageKey",
          "declaration": {
            "name": "frameworkStorageKey",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElements",
          "declaration": {
            "name": "loadCustomElements",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElementsModuleByFileFor",
          "declaration": {
            "name": "loadCustomElementsModuleByFileFor",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElementsModuleFor",
          "declaration": {
            "name": "loadCustomElementsModuleFor",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElementsCodeMirrorCompletions",
          "declaration": {
            "name": "loadCustomElementsCodeMirrorCompletions",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCustomElementsCodeMirrorCompletionsRemote",
          "declaration": {
            "name": "loadCustomElementsCodeMirrorCompletionsRemote",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadSlotFor",
          "declaration": {
            "name": "loadSlotFor",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadSlotForModule",
          "declaration": {
            "name": "loadSlotForModule",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadDefaultSlotFor",
          "declaration": {
            "name": "loadDefaultSlotFor",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadDefaultSlotForModule",
          "declaration": {
            "name": "loadDefaultSlotForModule",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadCssProperties",
          "declaration": {
            "name": "loadCssProperties",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadFileRemote",
          "declaration": {
            "name": "loadFileRemote",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "markdownCode",
          "declaration": {
            "name": "markdownCode",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "asRenderString",
          "declaration": {
            "name": "asRenderString",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "filterJsDocLinks",
          "declaration": {
            "name": "filterJsDocLinks",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "transformFromJsdoc",
          "declaration": {
            "name": "transformFromJsdoc",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "formatMarkdownCodeElements",
          "declaration": {
            "name": "formatMarkdownCodeElements",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "markdownCodeToHtml",
          "declaration": {
            "name": "markdownCodeToHtml",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "assignToSlot",
          "declaration": {
            "name": "assignToSlot",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "enhanceCodeBlocks",
          "declaration": {
            "name": "enhanceCodeBlocks",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "raw",
          "declaration": {
            "name": "raw",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "querySelectorAsync",
          "declaration": {
            "name": "querySelectorAsync",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "setupThemes",
          "declaration": {
            "name": "setupThemes",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "setupEleventy",
          "declaration": {
            "name": "setupEleventy",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "setupTheming",
          "declaration": {
            "name": "setupTheming",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "uploadTheme",
          "declaration": {
            "name": "uploadTheme",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "transformSource",
          "declaration": {
            "name": "transformSource",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getSourceFromLit",
          "declaration": {
            "name": "getSourceFromLit",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/StoryUtils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/alert/Alert.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${args.hide ? nothing : alertHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: `document.querySelector('omni-alert').show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        document.querySelector('omni-alert').show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        'status-indicator': '',\n        header: '',\n        '[Default Slot]': '',\n        primary: '',\n        secondary: '',\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: 'Additional context for the alert.',\n\n        enableSecondary: undefined,\n\n        status: undefined,\n        headerAlign: undefined,\n        descriptionAlign: undefined,\n        primaryAction: undefined,\n        secondaryAction: undefined,\n        actionAlign: undefined\n    }\n}",
          "description": "Additional context for the alert."
        },
        {
          "kind": "variable",
          "name": "Showing_Alerts",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n    <div>\n        Alerts can be shown programmatically using the static <code class=\"language-js\">Alert.show()</code> function. \n    <div>\n    `,\n    render: (args: Args) => html`\n        <omni-button\n            data-testid=\"test-alert-show\"\n            label=\"Show Alert\"\n            @click=\"${() => {\n                Alert.show({\n                    status: 'success',\n                    message: 'Success!',\n                    description: 'It was successful.'\n                });\n            }}\"\n            >\n        </omni-button>\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Alert\"></omni-button>`,\n                jsFragment: `import { Alert } from '@capitec/omni-components/alert';\n\ndocument.querySelector('omni-button').addEventListener('click', () => {    \n    Alert.show({\n        status: 'success',\n        message: 'Success!',\n        description: 'It was successful.',\n    });\n});`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Alert\" @click=\"showAlert\"></omni-button>`,\n                jsFragment: `import { Alert } from '@capitec/omni-components/alert';\n\nwindow.vueData = {\n    showAlert: () => {        \n        Alert.show({\n            status: 'success',\n            message: 'Success!',\n            description: 'It was successful.',\n        });\n    }\n};`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Alert\" @click=\"\\${showAlert}\"></omni-button>`,\n                jsFragment: `import { Alert } from '@capitec/omni-components/alert';\n\nconst showAlert = () => {\n    Alert.show({\n        status: 'success',\n        message: 'Success!',\n        description: 'It was successful.',\n    });\n}`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniButton } from \"@capitec/omni-components-react/button\";\nimport { Alert } from '@capitec/omni-components-react/alert';\n\nconst showAlert = () => {\n    Alert.show({\n        status: 'success',\n        message: 'Success!',\n        description: 'It was successful.',\n    });\n};\n\nconst App = () => <OmniButton label=\"Show Alert\" onclick={showAlert}/>;`\n        }\n    ],\n    name: 'Showing Alert Programmatically',\n    args: {}\n}",
          "description": "It was successful."
        },
        {
          "kind": "variable",
          "name": "Showing_Alerts_Async",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n    <div>\n        Alerts can be asynchronously shown and awaited programmatically using the static <code class=\"language-js\">Alert.showAsync()</code> function. \n    <div>\n    `,\n    render: (args: Args) => html`\n        <omni-button\n            data-testid=\"test-alert-show\"\n            label=\"Show Alert\"\n            @click=\"${() => {\n                Alert.showAsync({\n                    status: 'info',\n                    message: 'Async Alert!',\n                    description: `Click \"Yes\" for \"primary\" reason or \"No\" for \"secondary\" reason.\nIf closed from script via the \"hide\" function on the Alert instance, the reason would be \"auto\".`,\n                    enableSecondary: true,\n                    primaryAction: 'Yes',\n                    secondaryAction: 'No'\n                }).then((r) => {\n                    reason = r;\n                    document.dispatchEvent(\n                        new CustomEvent('story-renderer-interactive-update', {\n                            bubbles: true,\n                            composed: true\n                        })\n                    );\n                });\n            }}\"\n            >\n        </omni-button>\n        <div>${reason}</div>\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Alert\"></omni-button>\n<div id=\"reason\"></div>`,\n                jsFragment: `import { Alert } from '@capitec/omni-components/alert';\n\ndocument.querySelector('omni-button').addEventListener('click', async () => {    \n    const reason = await Alert.showAsync({\n        status: 'info',\n        message: 'Async Alert!',\n        description: \\`Click \"Yes\" for \"primary\" reason or \"No\" for \"secondary\" reason.\nIf closed from script via the \"hide\" function on the Alert instance, the reason would be \"auto\".\\`,\n        enableSecondary: true,\n        primaryAction: 'Yes',\n        secondaryAction: 'No'\n    });\n    document.getElementById('reason').innerHTML = reason;\n});`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Alert\" @click=\"showAlert\"></omni-button>\n<div id=\"reason\"></div>`,\n                jsFragment: `import { Alert } from '@capitec/omni-components/alert';\n\nwindow.vueData = {\n    showAlert: async () => {   \n        const reason = await Alert.showAsync({\n            status: 'info',\n            message: 'Async Alert!',\n            description: \\`Click \"Yes\" for \"primary\" reason or \"No\" for \"secondary\" reason.\n    If closed from script via the \"hide\" function on the Alert instance, the reason would be \"auto\".\\`,\n            enableSecondary: true,\n            primaryAction: 'Yes',\n            secondaryAction: 'No'\n        });\n        document.getElementById('reason').innerHTML = reason;\n    }\n};`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Alert\" @click=\"\\${showAlert}\"></omni-button>\n<div id=\"reason\"></div>`,\n                jsFragment: `import { Alert } from '@capitec/omni-components/alert';\n\nconst showAlert = async () => {   \n    const reason = await Alert.showAsync({\n        status: 'info',\n        message: 'Async Alert!',\n        description: \\`Click \"Yes\" for \"primary\" reason or \"No\" for \"secondary\" reason.\nIf closed from script via the \"hide\" function on the Alert instance, the reason would be \"auto\".\\`,\n        enableSecondary: true,\n        primaryAction: 'Yes',\n        secondaryAction: 'No'\n    });\n    document.getElementById('reason').innerHTML = reason;\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniButton } from \"@capitec/omni-components-react/button\";\nimport { Alert } from '@capitec/omni-components-react/alert';\n\nconst showAlert = async () => {   \n    const reason = await Alert.showAsync({\n        status: 'info',\n        message: 'Async Alert!',\n        description: \\`Click \"Yes\" for \"primary\" reason or \"No\" for \"secondary\" reason.\nIf closed from script via the \"hide\" function on the Alert instance, the reason would be \"auto\".\\`,\n        enableSecondary: true,\n        primaryAction: 'Yes',\n        secondaryAction: 'No'\n    });\n    document.getElementById('reason').innerHTML = reason;\n};\n\nconst App = () => <>\n                    <OmniButton label=\"Show Alert\" onclick={showAlert}/>\n                    <div id=\"reason\"></div>\n                  </>;`\n        }\n    ],\n    name: 'Showing Async Alert Programmatically',\n    args: {}\n}",
          "description": "Click \"Yes\" for \"primary\" reason or \"No\" for \"secondary\" reason.\nIf closed from script via the \"hide\" function on the Alert instance, the reason would be \"auto\"."
        },
        {
          "kind": "variable",
          "name": "Status",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n    <div>\n        <p>Set the display status of the <code class=\"language-html\">&lt;omni-alert&gt;</code>.<p>\n        <br/>\n        <span>The <code>status</code> attribute supports the following options:\n            <ul>\n                <li><code class=\"language-javascript\">'success'</code> - Checkmark icon to indicate success.</li>\n                <li><code class=\"language-javascript\">'warning'</code> - Yield icon to indicate warning.</li>\n                <li><code class=\"language-javascript\">'error'</code> - Exclamation icon to indicate error.</li>\n                <li><code class=\"language-javascript\">'info'</code> - Information icon to indicate info.</li>\n                <li><code class=\"language-javascript\">'none'</code> - No icon. (Default)</li>\n            </ul>\n        </span>\n    <div>\n    `,\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${args.hide ? nothing : alertHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: `document.querySelector('omni-alert').show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniAlert } from \"@capitec/omni-components-react/alert\";\n\nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};\n\nconst App = () => <OmniAlert ref={onRef} message=\"${args.message}\" description=\"${args.description}\" status=\"${args.status}\"/>;`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        document.querySelector('omni-alert').show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Status',\n    args: {\n        'status-indicator': '',\n        header: '',\n        '[Default Slot]': '',\n        primary: '',\n        secondary: '',\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: 'Additional context for the alert.',\n\n        enableSecondary: undefined,\n\n        status: 'success',\n        headerAlign: undefined,\n        descriptionAlign: undefined,\n        primaryAction: undefined,\n        secondaryAction: undefined,\n        actionAlign: undefined\n    }\n}",
          "description": "Additional context for the alert."
        },
        {
          "kind": "variable",
          "name": "Header_Align",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`Align header content horizontally (Defaults to <code class=\"language-js\">'center'</code>).`,\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${args.hide ? nothing : alertHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: `document.querySelector('omni-alert').show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniAlert } from \"@capitec/omni-components-react/alert\";\n\nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};\n\nconst App = () => <OmniAlert ref={onRef} message=\"${args.message}\" description=\"${args.description}\" header-align=\"${args.headerAlign}\"/>;`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        document.querySelector('omni-alert').show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Header Align',\n    args: {\n        'status-indicator': '',\n        header: '',\n        '[Default Slot]': '',\n        primary: '',\n        secondary: '',\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: 'Additional context for the alert.',\n\n        enableSecondary: undefined,\n\n        status: undefined,\n        headerAlign: 'left',\n        descriptionAlign: undefined,\n        primaryAction: undefined,\n        secondaryAction: undefined,\n        actionAlign: undefined\n    }\n}",
          "description": "Additional context for the alert."
        },
        {
          "kind": "variable",
          "name": "Description_Align",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`Align description content horizontally (Defaults to <code class=\"language-js\">'center'</code>).`,\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${\n            args.hide\n                ? nothing\n                : alertHtml(args, (a) => {\n                      if (a) {\n                          a.description = `Additional context for the alert. \nAligned to the ${args.descriptionAlign}.`;\n                      }\n                  })\n        }\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: (args) => `const alert = document.querySelector('omni-alert');\nalert.description = \\`Additional context for the alert. \nAligned to the ${args.descriptionAlign}.\\`;\n\nalert.show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: (args) => `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.description = \\`Additional context for the alert. \nAligned to the ${args.descriptionAlign}.\\`;\n\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniAlert } from \"@capitec/omni-components-react/alert\";\n\nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.description = \\`Additional context for the alert. \nAligned to the ${args.descriptionAlign}.\\`;\n\n        omniAlert.show();\n    }\n};\n\nconst App = () => <OmniAlert ref={onRef} message=\"${args.message}\" description-align=\"${args.descriptionAlign}\"/>;`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: (args) => `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        \n        const alert = document.querySelector('omni-alert');\n        alert.description = \\`Additional context for the alert. \nAligned to the ${args.descriptionAlign}.\\`;\n        \n        alert.show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Header Align',\n    args: {\n        'status-indicator': '',\n        header: '',\n        '[Default Slot]': '',\n        primary: '',\n        secondary: '',\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: undefined,\n\n        enableSecondary: undefined,\n\n        status: undefined,\n        headerAlign: undefined,\n        descriptionAlign: 'right',\n        primaryAction: undefined,\n        secondaryAction: undefined,\n        actionAlign: undefined\n    }\n}",
          "description": "undefined"
        },
        {
          "kind": "variable",
          "name": "Primary_Action",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`Set the label for the primary action button (Defaults to <code class=\"language-js\">'Ok'</code>).`,\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${args.hide ? nothing : alertHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: `document.querySelector('omni-alert').show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniAlert } from \"@capitec/omni-components-react/alert\";\n\nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};\n\nconst App = () => <OmniAlert ref={onRef} message=\"${args.message}\" description=\"${args.description}\" primary-action=\"${args.primaryAction}\"/>;`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        document.querySelector('omni-alert').show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Primary Action',\n    args: {\n        'status-indicator': '',\n        header: '',\n        '[Default Slot]': '',\n        primary: '',\n        secondary: '',\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: 'Additional context for the alert.',\n\n        enableSecondary: undefined,\n\n        status: undefined,\n        headerAlign: undefined,\n        descriptionAlign: undefined,\n        primaryAction: 'Acknowledge',\n        secondaryAction: undefined,\n        actionAlign: undefined\n    }\n}",
          "description": "Additional context for the alert."
        },
        {
          "kind": "variable",
          "name": "Secondary_Action",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n        <span>\n            <ul>\n                <li>Set the label for the secondary action button with the <code>secondary-action</code> attribute (Defaults to <code class=\"language-js\">'Cancel'</code>).</li>\n                <li>Enable the secondary action button with the <code>enable-secondary</code> attribute.</li>\n            </ul>\n        </span>\n        \n        `,\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${args.hide ? nothing : alertHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: `document.querySelector('omni-alert').show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniAlert } from \"@capitec/omni-components-react/alert\";\n\nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};\n\nconst App = () => <OmniAlert ref={onRef} message=\"${args.message}\" description=\"${args.description}\" secondary-action=\"${args.secondaryAction}\" enable-secondary/>;`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        document.querySelector('omni-alert').show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Secondary Action',\n    args: {\n        'status-indicator': '',\n        header: '',\n        '[Default Slot]': '',\n        primary: '',\n        secondary: '',\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: 'Additional context for the alert.',\n\n        enableSecondary: true,\n\n        status: undefined,\n        headerAlign: undefined,\n        descriptionAlign: undefined,\n        primaryAction: undefined,\n        secondaryAction: 'Back',\n        actionAlign: undefined\n    }\n}",
          "description": "Additional context for the alert."
        },
        {
          "kind": "variable",
          "name": "Action_Align",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`Align the action button(s) horizontally (Defaults to <code class=\"language-js\">'right'</code>).`,\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${args.hide ? nothing : alertHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: `document.querySelector('omni-alert').show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniAlert } from \"@capitec/omni-components-react/alert\";\n\nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};\n\nconst App = () => <OmniAlert ref={onRef} message=\"${args.message}\" description=\"${args.description}\" enable-secondary primary-action=\"${args.primaryAction}\" secondary-action=\"${args.secondaryAction}\" action-align=\"${args.actionAlign}\"/>;`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        document.querySelector('omni-alert').show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Action Align',\n    args: {\n        'status-indicator': '',\n        header: '',\n        '[Default Slot]': '',\n        primary: '',\n        secondary: '',\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: 'Additional context for the alert.',\n\n        enableSecondary: true,\n\n        status: undefined,\n        headerAlign: undefined,\n        descriptionAlign: undefined,\n        primaryAction: 'Accept',\n        secondaryAction: 'Decline',\n        actionAlign: 'center'\n    }\n}",
          "description": "Additional context for the alert."
        },
        {
          "kind": "variable",
          "name": "Custom_Status_Indicator",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: 'Render content as the status indicator instead of default status icons.',\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${args.hide ? nothing : alertHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: `document.querySelector('omni-alert').show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniAlert } from \"@capitec/omni-components-react/alert\";\n\nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};\n\nconst App = () => <OmniAlert ref={onRef} message=\"${args.message}\" description=\"${args.description}\">\n                    <span slot=\"status-indicator\" style={{ paddingRight: \"4px\" }}>🔓</span>\n                  </OmniAlert>;`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        document.querySelector('omni-alert').show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Custom Status Indicator',\n    args: {\n        'status-indicator': raw`<span style=\"padding-right: 4px;\">🔓</span>`,\n        header: '',\n        '[Default Slot]': '',\n        primary: '',\n        secondary: '',\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: 'Additional context for the alert.',\n\n        enableSecondary: undefined,\n\n        status: undefined,\n        headerAlign: undefined,\n        descriptionAlign: undefined,\n        primaryAction: undefined,\n        secondaryAction: undefined,\n        actionAlign: undefined\n    }\n}",
          "description": "Additional context for the alert."
        },
        {
          "kind": "variable",
          "name": "Custom_Header",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`Render content as the header message area. This overrides any text specified via the <code>message</code> attribute.`,\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${args.hide ? nothing : alertHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: `document.querySelector('omni-alert').show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniAlert } from \"@capitec/omni-components-react/alert\";\n\nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};\n\nconst App = () => <OmniAlert ref={onRef} message=\"${args.message}\" description=\"${args.description}\">\n                    <span slot=\"header\">Alert using the <code>header</code> slot</span>\n                  </OmniAlert>;`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        document.querySelector('omni-alert').show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Custom Header',\n    args: {\n        'status-indicator': '',\n        header: raw`<span>Alert using the <code>header</code> slot</span>`,\n        '[Default Slot]': '',\n        primary: '',\n        secondary: '',\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: 'Additional context for the alert.',\n\n        enableSecondary: undefined,\n\n        status: undefined,\n        headerAlign: undefined,\n        descriptionAlign: undefined,\n        primaryAction: undefined,\n        secondaryAction: undefined,\n        actionAlign: undefined\n    }\n}",
          "description": "Additional context for the alert."
        },
        {
          "kind": "variable",
          "name": "Custom_Body",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`Render rich html content in the description. This appends to text specified via the <code>description</code> attribute.`,\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${args.hide ? nothing : alertHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: `document.querySelector('omni-alert').show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniAlert } from \"@capitec/omni-components-react/alert\";\n\nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};\n\nconst App = () => <OmniAlert ref={onRef} message=\"${args.message}\" description=\"${args.description}\">\n                    <span>Alert using the default slot and the <code>description</code> attribute.</span>\n                  </OmniAlert>;`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        document.querySelector('omni-alert').show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Custom Body',\n    args: {\n        'status-indicator': '',\n        header: '',\n        '[Default Slot]': raw`<span>Alert using the default slot and the <code>description</code> attribute.</span>`,\n        primary: '',\n        secondary: '',\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: 'Additional context for the alert.',\n\n        enableSecondary: undefined,\n\n        status: undefined,\n        headerAlign: undefined,\n        descriptionAlign: undefined,\n        primaryAction: undefined,\n        secondaryAction: undefined,\n        actionAlign: undefined\n    }\n}",
          "description": "Additional context for the alert."
        },
        {
          "kind": "variable",
          "name": "Custom_Primary_Action",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () =>\n        html`Render rich html content as the primary action. This replaces any text specified via the <code>primary-action</code> attribute.`,\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${args.hide ? nothing : alertHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: `document.querySelector('omni-alert').show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniAlert } from \"@capitec/omni-components-react/alert\";\n\nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};\n\nconst App = () => <OmniAlert ref={onRef} message=\"${args.message}\" description=\"${args.description}\">\n                    <button slot=\"primary\" style={{ margin: \"6px\" }}>My Button</button>\n                  </OmniAlert>;`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        document.querySelector('omni-alert').show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Custom Primary Action',\n    args: {\n        'status-indicator': '',\n        header: '',\n        '[Default Slot]': '',\n        primary: raw`<button style=\"margin: 6px;\">My Button</button>`,\n        secondary: '',\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: 'Additional context for the alert.',\n\n        enableSecondary: undefined,\n\n        status: undefined,\n        headerAlign: undefined,\n        descriptionAlign: undefined,\n        primaryAction: undefined,\n        secondaryAction: undefined,\n        actionAlign: undefined\n    }\n}",
          "description": "Additional context for the alert."
        },
        {
          "kind": "variable",
          "name": "Custom_Secondary_Action",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () =>\n        html`Render rich html content as the secondary action. This replaces any text specified via the <code>secondary-action</code> attribute.`,\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-alert-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Alert\" ></omni-button>\n        ${args.hide ? nothing : alertHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n                ${getSourceFromLit(alertHtml(args))}            \n                `,\n                jsFragment: `document.querySelector('omni-alert').show();`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`${getSourceFromLit(\n                        alertHtml(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    )} `,\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniAlert } from \"@capitec/omni-components-react/alert\";\n\nconst onRef = e => {\n    const omniAlert = e;\n    if (omniAlert) {\n        omniAlert.show();\n    }\n};\n\nconst App = () => <OmniAlert ref={onRef} message=\"${args.message}\" description=\"${args.description}\" enable-secondary>\n                    <span slot=\"secondary\" style={{ padding: \"6px\" }}>↩</span>\n                  </OmniAlert>;`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(alertHtml(args)).replaceAll(' enable-secondary', ' :enable-secondary=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n        await customElements.whenDefined('omni-alert');\n        document.querySelector('omni-alert').show();        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Custom Secondary Action',\n    args: {\n        'status-indicator': '',\n        header: '',\n        '[Default Slot]': '',\n        primary: '',\n        secondary: raw`<span style=\"padding: 6px;\">↩</span>`,\n\n        hide: true,\n\n        message: 'Message Alert',\n        description: 'Additional context for the alert.',\n\n        enableSecondary: true,\n\n        status: undefined,\n        headerAlign: undefined,\n        descriptionAlign: undefined,\n        primaryAction: undefined,\n        secondaryAction: undefined,\n        actionAlign: undefined\n    }\n}",
          "description": "Additional context for the alert."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Showing_Alerts",
          "declaration": {
            "name": "Showing_Alerts",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Showing_Alerts_Async",
          "declaration": {
            "name": "Showing_Alerts_Async",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Status",
          "declaration": {
            "name": "Status",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Header_Align",
          "declaration": {
            "name": "Header_Align",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Description_Align",
          "declaration": {
            "name": "Description_Align",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary_Action",
          "declaration": {
            "name": "Primary_Action",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Secondary_Action",
          "declaration": {
            "name": "Secondary_Action",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Action_Align",
          "declaration": {
            "name": "Action_Align",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Status_Indicator",
          "declaration": {
            "name": "Custom_Status_Indicator",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Header",
          "declaration": {
            "name": "Custom_Header",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Body",
          "declaration": {
            "name": "Custom_Body",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Primary_Action",
          "declaration": {
            "name": "Custom_Primary_Action",
            "module": "src/alert/Alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Secondary_Action",
          "declaration": {
            "name": "Custom_Secondary_Action",
            "module": "src/alert/Alert.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/alert/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Alert.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/Button.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/button/Button.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "default": "{\n    render: (args: Args) => html`\n    <omni-button\n      data-testid=\"test-button\"\n      type=\"${args.type}\"\n      label=\"${ifNotEmpty(args.label)}\"\n      slot-position=\"${args.slotPosition}\"\n      ?disabled=${args.disabled}>\n      ${unsafeHTML(args['[Default Slot]'])}\n    </omni-button>\n  `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) => getSourceFromLit(Interactive?.render?.(args), undefined, (s) => s.replace(' disabled', ' :disabled=\"true\"'))\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        type: 'secondary',\n        label: 'Button',\n        slotPosition: 'top',\n        disabled: false,\n        '[Default Slot]': raw`<omni-icon icon=\"@material/thumb_up\"></omni-icon>`\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Type",
          "default": "{\n    render: (args: Args) => html` <omni-button type=\"${args.type}\" label=\"${args.label}\" data-testid=\"test-button\"></omni-button> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniButton } from \"@capitec/omni-components-react/button\";\n\nconst App = () => <OmniButton${args.label ? ` label='${args.label}'` : ''}${args.type ? ` type='${args.type}'` : ''}/>;`\n        }\n    ],\n    name: 'Type',\n    description: 'Set the type of button to render using different combinations of primary and alternate colours.',\n    args: {\n        type: 'primary',\n        label: 'Click'\n    }\n}",
          "description": "Set the type of button to render using different combinations of primary and alternate colours."
        },
        {
          "kind": "variable",
          "name": "Label",
          "default": "{\n    render: (args: Args) => html` <omni-button label=\"${args.label}\" data-testid=\"test-button\"></omni-button> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniButton } from \"@capitec/omni-components-react/button\";\n\nconst App = () => <OmniButton${args.label ? ` label='${args.label}'` : ''}/>;`\n        }\n    ],\n    name: 'Label',\n    description: 'Set a text value to display within.',\n    args: {\n        label: 'Click'\n    }\n}",
          "description": "Set a text value to display within."
        },
        {
          "kind": "variable",
          "name": "Slot",
          "default": "{\n    render: () => html`\n    <omni-button data-testid=\"test-button\">\n      <omni-icon size=\"default\" icon=\"./assets/images/direction.svg\"></omni-icon>\n    </omni-button>\n  `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: () => `import { OmniButton } from \"@capitec/omni-components-react/button\";\nimport { OmniIcon } from \"@capitec/omni-components-react/icon\";\n\nconst App = () => <OmniButton>\n                    <OmniIcon size=\"default\" icon=\"./assets/images/direction.svg\" />\n                  </OmniButton>;`\n        }\n    ],\n    name: 'Slot',\n    description: 'Set html content to display within.',\n    args: {}\n}",
          "description": "Set html content to display within."
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "default": "{\n    render: (args: Args) => html` <omni-button disabled label=\"${args.label}\" data-testid=\"test-button\"></omni-button> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniButton } from \"@capitec/omni-components-react/button\";\n\nconst App = () => <OmniButton${args.label ? ` label='${args.label}'` : ''}${args.disabled ? ` disabled` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) => getSourceFromLit(Disabled?.render?.(args), undefined, (s) => s.replace(' disabled', ' :disabled=\"true\"'))\n        }\n    ],\n    name: 'Disabled',\n    description: () =>\n        html`<span>Set this in order to prevent interaction. Done internally via <code class=\"language-css\">pointer-events: none</code></span>.`,\n    args: {\n        label: 'Disabled',\n        disabled: true\n    }\n}",
          "description": "() =>\n        html<span>Set this in order to prevent interaction. Done internally via <code class=\"language-css\">pointer-events: none</code></span>."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Type",
          "declaration": {
            "name": "Type",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slot",
          "declaration": {
            "name": "Slot",
            "module": "src/button/Button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/button/Button.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/ChevronLeft.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Chevron left icon component.",
          "name": "ChevronLeftIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-chevron-left-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/ChevronLeft.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChevronLeftIcon",
          "declaration": {
            "name": "ChevronLeftIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/ChevronLeft.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-chevron-left-icon",
          "declaration": {
            "name": "ChevronLeftIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/ChevronLeft.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/ChevronRight.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Chevron right icon component.",
          "name": "ChevronRightIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-chevron-right-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/ChevronRight.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChevronRightIcon",
          "declaration": {
            "name": "ChevronRightIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/ChevronRight.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-chevron-right-icon",
          "declaration": {
            "name": "ChevronRightIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/ChevronRight.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/calendar/Calendar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Calendar component to set specific date.",
          "name": "Calendar",
          "cssProperties": [
            {
              "description": "Calendar container box shadow.",
              "name": "--omni-calendar-box-shadow"
            },
            {
              "description": "Calendar container border radius.",
              "name": "--omni-calendar-border-radius"
            },
            {
              "description": "Calendar container z-index.",
              "name": "--omni-calendar-z-index"
            },
            {
              "description": "Calendar control bar padding.",
              "name": "--omni-calendar-controls-padding"
            },
            {
              "description": "Calendar control bar border bottom.",
              "name": "--omni-calendar-controls-border-bottom"
            },
            {
              "description": "Calendar control bar background color.",
              "name": "--omni-calendar-controls-background-color"
            },
            {
              "description": "Calendar control bar minimum height.",
              "name": "--omni-calendar-controls-min-height"
            },
            {
              "description": "Calendar control bar control color.",
              "name": "--omni-calendar-control-color"
            },
            {
              "description": "Calendar control bar control width.",
              "name": "--omni-calendar-control-width"
            },
            {
              "description": "Calender month/year display width.",
              "name": "--omni-calendar-control-label-width"
            },
            {
              "description": "Calendar month/year display color.",
              "name": "--omni-calendar-control-label-color"
            },
            {
              "description": "Calendar month/year display font size.",
              "name": "--omni-calendar-control-label-font-size"
            },
            {
              "description": "Calendar month/year display font weight.",
              "name": "--omni-calendar-control-label-font-weight"
            },
            {
              "description": "Calendar month/year display background color.",
              "name": "--omni-calendar-control-label-hover-background-color"
            },
            {
              "description": "Calendar day grid template columns.",
              "name": "--omni-calendar-day-grid-template-columns"
            },
            {
              "description": "Calendar day grid auto rows.",
              "name": "--omni-calendar-day-grid-auto-rows"
            },
            {
              "description": "Calendar day grid padding.",
              "name": "--omni-calendar-day-grid-padding"
            },
            {
              "description": "Calendar day grid line height.",
              "name": "--omni-calendar-day-grid-line-height"
            },
            {
              "description": "Calendar day grid background color.",
              "name": "--omni-calendar-day-grid-background-color"
            },
            {
              "description": "Calendar month grid template columns.",
              "name": "--omni-calendar-month-grid-template-columns"
            },
            {
              "description": "Calendar month grid auto rows.",
              "name": "--omni-calendar-month-grid-auto-rows"
            },
            {
              "description": "Calendar month grid padding.",
              "name": "--omni-calendar-months-grid-padding"
            },
            {
              "description": "Calendar month grid background color.",
              "name": "--omni-calendar-months-grid-background-color"
            },
            {
              "description": "Calendar year grid template columns.",
              "name": "--omni-calendar-year-grid-template-columns"
            },
            {
              "description": "Calendar year grid auto rows.",
              "name": "--omni-calendar-year-grid-auto-rows"
            },
            {
              "description": "Calendar year grid padding.",
              "name": "--omni-calendar-year-grid-padding"
            },
            {
              "description": "Calendar year grid background color.",
              "name": "--omni-calendar-year-grid-background-color"
            },
            {
              "description": "Calendar month button padding.",
              "name": "--omni-calendar-month-button-padding"
            },
            {
              "description": "Calendar month button background color.",
              "name": "--omni-calendar-month-button-background-color"
            },
            {
              "description": "Calendar month button border color.",
              "name": "--omni-calendar-month-button-border-color"
            },
            {
              "description": "Calendar month button border width.",
              "name": "--omni-calendar-month-button-border-width"
            },
            {
              "description": "Calendar month button border radius.",
              "name": "--omni-calendar-month-button-border-radius"
            },
            {
              "description": "Calendar month button margin left.",
              "name": "--omni-calendar-month-button-margin-left"
            },
            {
              "description": "Calendar month button margin right.",
              "name": "--omni-calendar-month-button-margin-right"
            },
            {
              "description": "Calendar month button color",
              "name": "--omni-calendar-month-button-color"
            },
            {
              "description": "Calendar month button font family.",
              "name": "--omni-calendar-month-button-font-family"
            },
            {
              "description": "Calendar month button font size.",
              "name": "--omni-calendar-month-button-font-size"
            },
            {
              "description": "Calendar month button font weight.",
              "name": "--omni-calendar-month-button-font-weight"
            },
            {
              "description": "Calendar month button line height.",
              "name": "--omni-calendar-month-button-line-height"
            },
            {
              "description": "Calendar month selected border radius.",
              "name": "--omni-calendar-month-button-selected-border-radius"
            },
            {
              "description": "Calendar month button selected background color.",
              "name": "--omni-calendar-month-button-selected-background-color"
            },
            {
              "description": "Calendar month button selected border color.",
              "name": "--omni-calendar-month-button-selected-border-color"
            },
            {
              "description": "Calendar month selected border width.",
              "name": "--omni-calendar-month-button-selected-border-width"
            },
            {
              "description": "Calendar month selected color.",
              "name": "--omni-calendar-month-button-selected-color"
            },
            {
              "description": "Calendar month button hover background color.",
              "name": "--omni-calendar-month-button-hover-background-color"
            },
            {
              "description": "Calendar year button padding.",
              "name": "--omni-calendar-year-button-padding"
            },
            {
              "description": "Calendar year button background color.",
              "name": "--omni-calendar-year-button-background-color"
            },
            {
              "description": "Calendar year button border color.",
              "name": "--omni-calendar-year-button-border-color"
            },
            {
              "description": "Calendar year button border width.",
              "name": "--omni-calendar-year-button-border-width"
            },
            {
              "description": " Calendar year button border radius.",
              "name": "--omni-calendar-year-button-border-radius"
            },
            {
              "description": "Calendar year button margin left.",
              "name": "--omni-calendar-year-button-margin-left"
            },
            {
              "description": "Calendar year button margin right.",
              "name": "--omni-calendar-year-button-margin-right"
            },
            {
              "description": "Calendar year button color.",
              "name": "--omni-calendar-year-button-color"
            },
            {
              "description": "Calendar year button font family.",
              "name": "--omni-calendar-year-button-font-family"
            },
            {
              "description": "Calendar year button font size.",
              "name": "--omni-calendar-year-button-font-size"
            },
            {
              "description": "Calendar year button font weight.",
              "name": "--omni-calendar-year-button-font-weight"
            },
            {
              "description": "Calendar year button line height.",
              "name": "--omni-calendar-year-button-line-height"
            },
            {
              "description": "Calendar selected year button border radius.",
              "name": "--omni-calendar-year-button-selected-border-radius"
            },
            {
              "description": "Calendar selected year button background color.",
              "name": "--omni-calendar-year-button-selected-background-color"
            },
            {
              "description": "Calendar selected year button border color.",
              "name": "--omni-calendar-year-button-selected-border-color"
            },
            {
              "description": "Calendar selected year button border width.",
              "name": "--omni-calendar-year-button-selected-border-width"
            },
            {
              "description": "Calendar year button selected color.",
              "name": "--omni-calendar-year-button-selected-color"
            },
            {
              "description": "Calendar year button hover background color.",
              "name": "--omni-calendar-year-button-hover-background-color"
            },
            {
              "description": "Calendar day name font color.",
              "name": "--omni-calendar-day-name-font-color"
            },
            {
              "description": "Calendar day name font weight.",
              "name": "--omni-calendar-day-name-font-weight"
            },
            {
              "description": "Calendar day name font size.",
              "name": "--omni-calendar-day-name-font-size"
            },
            {
              "description": "Calendar day name width.",
              "name": "--omni-calendar-day-name-width"
            },
            {
              "description": "Calendar day name height.",
              "name": "--omni-calendar-day-name-height"
            },
            {
              "description": "Calendar day button width.",
              "name": "--omni-calendar-day-button-width"
            },
            {
              "description": "Calendar day button height.",
              "name": "--omni-calendar-day-button-height"
            },
            {
              "description": "Calendar day button font size.",
              "name": "--omni-calendar-day-button-font-size"
            },
            {
              "description": "Calendar day button font weight.",
              "name": "--omni-calendar-day-button-font-weight"
            },
            {
              "description": "Calendar day button line height.",
              "name": "--omni-calendar-day-button-line-height"
            },
            {
              "description": "Calendar day button color.",
              "name": "--omni-calendar-day-button-color"
            },
            {
              "description": "Calendar day button hover background color.",
              "name": "--omni-calendar-day-button-hover-background-color"
            },
            {
              "description": "Calendar day button excluded color.",
              "name": "--omni-calendar-day-button-excluded-font-color"
            },
            {
              "description": "Calendar day button current border.",
              "name": "--omni-calendar-day-current-button-border"
            },
            {
              "description": "Calendar day button current border radius.",
              "name": "--omni-calendar-day-current-button-border-radius"
            },
            {
              "description": "Calendar day button current width.",
              "name": "--omni-calendar-day-current-button-width"
            },
            {
              "description": "Calendar day button current height.",
              "name": "--omni-calendar-day-current-button-height"
            },
            {
              "description": "Calendar day button selected color.",
              "name": "--omni-calendar-day-selected-button-color"
            },
            {
              "description": "Calendar day button selected border radius.",
              "name": "--omni-calendar-day-selected-button-border-radius"
            },
            {
              "description": "Calendar day button selected background color.",
              "name": "--omni-calendar-day-selected-button-background-color"
            },
            {
              "description": "Calendar day button selected width.",
              "name": "--omni-calendar-day-selected-button-width"
            },
            {
              "description": "Calendar day button selected height.",
              "name": "--omni-calendar-day-selected-button-height"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the left control button.",
              "name": "left-control"
            },
            {
              "description": "Replaces the icon for the right control button.",
              "name": "right-control"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultLocale",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'en-US'"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale used for formatting the output of the Calendar.",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "The minimum date inclusively allowed to be selected.",
              "attribute": "min-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "The maximum date inclusively allowed to be selected.",
              "attribute": "max-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value of the Calendar component",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "DateTime"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_selectedMonth",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_selectedYear",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_selectedDecade",
              "type": {
                "text": "number[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showState",
              "type": {
                "text": "'days' | 'months' | 'years'"
              },
              "privacy": "private",
              "default": "'days'"
            },
            {
              "kind": "field",
              "name": "_months",
              "type": {
                "text": "string[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_days",
              "type": {
                "text": "string[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_updateDateVariablesUpdate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateDateVariables",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_dateSelect",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "date",
                  "type": {
                    "text": "DateTime"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_changeStateSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_goToNext",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_goToPrevious",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_selectYear",
              "parameters": [
                {
                  "name": "year",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_selectMonth",
              "parameters": [
                {
                  "name": "month",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getRange",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "step",
                  "default": "1"
                }
              ],
              "return": {
                "type": {
                  "text": "number[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getDecadeInterval",
              "parameters": [
                {
                  "name": "year",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "number[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "_isOutOfRange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "DateTime"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderSelector",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderControlBar",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderDaysGrid",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderDayNameBar",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderCalendar",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderDays",
              "parameters": [
                {
                  "name": "startDate",
                  "type": {
                    "text": "DateTime"
                  }
                },
                {
                  "name": "numberOfDays",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderDay",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "DateTime"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderMonthsGrid",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderMonthButtons",
              "return": {
                "type": {
                  "text": "TemplateResult<1>[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderMonthButton",
              "parameters": [
                {
                  "name": "month",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderYearsGrid",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderYearButtons",
              "return": {
                "type": {
                  "text": "TemplateResult<1>[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderYearButton",
              "parameters": [
                {
                  "name": "year",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "CustomEvent<{}>"
              },
              "description": "Dispatched when a date is selected."
            }
          ],
          "attributes": [
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale used for formatting the output of the Calendar.",
              "fieldName": "locale",
              "attribute": "locale"
            },
            {
              "name": "min-date",
              "type": {
                "text": "string | undefined"
              },
              "description": "The minimum date inclusively allowed to be selected.",
              "fieldName": "minDate",
              "attribute": "min-date"
            },
            {
              "name": "max-date",
              "type": {
                "text": "string | undefined"
              },
              "description": "The maximum date inclusively allowed to be selected.",
              "fieldName": "maxDate",
              "attribute": "max-date"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value of the Calendar component",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-calendar",
          "import": "```js\nimport '@capitec/omni-components/calendar';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Calendar",
          "declaration": {
            "name": "Calendar",
            "module": "/Users/runner/work/omni-components/omni-components/src/calendar/Calendar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-calendar",
          "declaration": {
            "name": "Calendar",
            "module": "/Users/runner/work/omni-components/omni-components/src/calendar/Calendar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/calendar/Calendar.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/calendar/Calendar.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-calendar\n        data-testid=\"test-calendar\"\n        locale=\"${ifNotEmpty(args.locale)}\"\n        value=\"${ifNotEmpty(args.value)}\"\n        min-date=\"${ifNotEmpty(args.minDate)}\"\n        max-date=\"${ifNotEmpty(args.maxDate)}\"\n    >       \n    </omni-calendar>\n    `,\n    name: 'Interactive',\n    args: {\n        locale: '',\n        value: '',\n        maxDate: '',\n        minDate: ''\n    } as Args\n}"
        },
        {
          "kind": "variable",
          "name": "Value",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-calendar\n        data-testid=\"test-calendar\"\n        value=\"${args.value}\"\n        >\n    </omni-calendar>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCalendar } from \"@capitec/omni-components-react/calendar\";\n\nconst App = () => <OmniCalendar${args.value ? ` value='${args.value}'` : ''}/>;`\n        }\n    ],\n    name: 'Value',\n    description: 'Set the value of the Calendar component, this has to be a valid date in ISO format',\n    args: {\n        value: isoDate\n    } as Args\n}",
          "description": "Set the value of the Calendar component, this has to be a valid date in ISO format"
        },
        {
          "kind": "variable",
          "name": "Locale",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-calendar\n        data-testid=\"test-calendar\"\n        locale=\"${args.locale}\"\n        >\n    </omni-calendar>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCalendar } from \"@capitec/omni-components-react/calendar\";\n\nconst App = () => <OmniCalendar${args.locale ? ` locale='${args.locale}'` : ''}/>;`\n        }\n    ],\n    name: 'Locale',\n    description: 'Set the locale of the Calendar.',\n    args: {\n        locale: 'ja-JP'\n    } as Args\n}",
          "description": "Set the locale of the Calendar."
        },
        {
          "kind": "variable",
          "name": "Min_Date",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-calendar\n        data-testid=\"test-calendar\"\n        min-date=\"${ifNotEmpty(args.minDate)}\"\n        value=\"${ifNotEmpty(args.value)}\"\n        >\n    </omni-calendar>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCalendar } from \"@capitec/omni-components-react/calendar\";\n\nconst App = () => <OmniCalendar${args.minDate ? ` min-date='${args.minDate}'` : ''}${args.value ? ` value='${args.value}'` : ''}/>;`\n        }\n    ],\n    name: 'Min Date',\n    description: 'Limit the Calendar to only have selectable dates after and including the specified min-date.',\n    args: {\n        minDate: '2023-04-14',\n        value: '2023-04-15'\n    } as Args\n}",
          "description": "Limit the Calendar to only have selectable dates after and including the specified min-date."
        },
        {
          "kind": "variable",
          "name": "Max_Date",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-calendar\n        data-testid=\"test-calendar\"\n        max-date=\"${ifNotEmpty(args.maxDate)}\"\n        value=\"${ifNotEmpty(args.value)}\"\n        >\n    </omni-calendar>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCalendar } from \"@capitec/omni-components-react/calendar\";\n\nconst App = () => <OmniCalendar${args.maxDate ? ` max-date='${args.maxDate}'` : ''}${args.value ? ` value='${args.value}'` : ''}/>;`\n        }\n    ],\n    name: 'Max Date',\n    description: 'Limit the Calendar to only have selectable dates before and including the specified max-date.',\n    args: {\n        maxDate: '2023-04-14',\n        value: '2023-04-13'\n    } as Args\n}",
          "description": "Limit the Calendar to only have selectable dates before and including the specified max-date."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/calendar/Calendar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/calendar/Calendar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Locale",
          "declaration": {
            "name": "Locale",
            "module": "src/calendar/Calendar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Min_Date",
          "declaration": {
            "name": "Min_Date",
            "module": "src/calendar/Calendar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Max_Date",
          "declaration": {
            "name": "Max_Date",
            "module": "src/calendar/Calendar.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/calendar/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Calendar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/check/Check.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/Indeterminate.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Indeterminate icon component.",
          "name": "IndeterminateIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-indeterminate-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Indeterminate.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IndeterminateIcon",
          "declaration": {
            "name": "IndeterminateIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Indeterminate.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-indeterminate-icon",
          "declaration": {
            "name": "IndeterminateIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Indeterminate.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/Check.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Check icon component.",
          "name": "CheckIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-check-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Check.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CheckIcon",
          "declaration": {
            "name": "CheckIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Check.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-check-icon",
          "declaration": {
            "name": "CheckIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Check.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/check/Check.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control that allows a selection to be made.",
          "name": "Check",
          "cssProperties": [
            {
              "description": "Label font color.",
              "name": "--omni-check-label-font-color"
            },
            {
              "description": "Label font family.",
              "name": "--omni-check-label-font-family"
            },
            {
              "description": "Label font size.",
              "name": "--omni-check-label-font-size"
            },
            {
              "description": "Label font weight.",
              "name": "--omni-check-label-font-weight"
            },
            {
              "description": "Label spacing.",
              "name": "--omni-check-label-spacing"
            },
            {
              "description": "Hint font color.",
              "name": "--omni-check-hint-label-font-color"
            },
            {
              "description": "Hint font family.",
              "name": "--omni-check-hint-label-font-family"
            },
            {
              "description": "Hint font size.",
              "name": "--omni-check-hint-label-font-size"
            },
            {
              "description": "Hint font weight.",
              "name": "--omni-check-hint-label-font-weight"
            },
            {
              "description": "Hint top padding.",
              "name": "--omni-check-hint-label-padding-top"
            },
            {
              "description": "Error font color.",
              "name": "--omni-check-error-label-font-color"
            },
            {
              "description": "Error font family.",
              "name": "--omni-check-error-label-font-family"
            },
            {
              "description": "Error font size.",
              "name": "--omni-check-error-label-font-size"
            },
            {
              "description": "Error font weight.",
              "name": "--omni-check-error-label-font-weight"
            },
            {
              "description": "Error top padding.",
              "name": "--omni-check-error-label-padding-top"
            },
            {
              "description": "Width.",
              "name": "--omni-check-width"
            },
            {
              "description": "Height.",
              "name": "--omni-check-height"
            },
            {
              "description": "Background color.",
              "name": "--omni-check-background-color"
            },
            {
              "description": "Border width.",
              "name": "--omni-check-border-width"
            },
            {
              "description": "Border color.",
              "name": "--omni-check-border-color"
            },
            {
              "description": "Border radius.",
              "name": "--omni-check-border-radius"
            },
            {
              "description": "Indicator Border width.",
              "name": "--omni-check-indicator-border-width"
            },
            {
              "description": "Indicator Border color.",
              "name": "--omni-check-indicator-border-color"
            },
            {
              "description": "Indicator color.",
              "name": "--omni-check-indicator-color"
            },
            {
              "description": "Indicator icon width.",
              "name": "--omni-check-indicator-icon-width"
            },
            {
              "description": "Indicator icon height.",
              "name": "--omni-check-indicator-icon-height"
            },
            {
              "description": "Checked Background color.",
              "name": "--omni-check-checked-background-color"
            },
            {
              "description": "Indeterminate Background color.",
              "name": "--omni-check-indeterminate-background-color"
            },
            {
              "description": "Disabled Background color.",
              "name": "--omni-check-disabled-background-color"
            },
            {
              "description": "Disabled border color.",
              "name": "--omni-check-disabled-border-color"
            },
            {
              "description": "Hover box shadow.",
              "name": "--omni-check-hover-box-shadow"
            },
            {
              "description": "Hover background color.",
              "name": "--omni-check-hover-background-color"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside the component.",
              "name": "[Default Slot]"
            },
            {
              "description": "Replaces the icon for the indeterminate state",
              "name": "indeterminate_icon"
            },
            {
              "description": "Replaces the icon for the checked state",
              "name": "check_icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "An error message to guide users to correct a mistake.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is checked or not.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is in and indeterminate state.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_click",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_toggleChecked",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent | KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "value-change",
              "type": {
                "text": "CustomEvent<{ old: Boolean; new: Boolean; }>"
              },
              "description": "Dispatched when the control value is changed to either on or off."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data"
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint"
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "An error message to guide users to correct a mistake.",
              "fieldName": "error",
              "attribute": "error"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is checked or not.",
              "fieldName": "checked",
              "attribute": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is in and indeterminate state.",
              "fieldName": "indeterminate",
              "attribute": "indeterminate"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-check",
          "import": "```js\nimport '@capitec/omni-components/check';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Check",
          "declaration": {
            "name": "Check",
            "module": "/Users/runner/work/omni-components/omni-components/src/check/Check.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-check",
          "declaration": {
            "name": "Check",
            "module": "/Users/runner/work/omni-components/omni-components/src/check/Check.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/check/Check.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args) => html`\n        <omni-check\n            data-testid=\"test-check\"\n            label=\"${ifNotEmpty(args.label)}\"\n            .data=\"${args.data}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            ?checked=\"${args.checked}\"\n            ?disabled=\"${args.disabled}\"\n            ?indeterminate=\"${args.indeterminate}\">${\n        args.indeterminate_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('indeterminate_icon', args.indeterminate_icon))}` : nothing\n    }${args.check_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('check_icon', args.check_icon))}` : nothing}${\n        args.check_icon || args.indeterminate_icon ? '\\r\\n' : nothing\n    }${unsafeHTML(args['[Default Slot]'])}</omni-check>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s\n                        .replace(' disabled', ' :disabled=\"true\"')\n                        .replace(' indeterminate', ' :indeterminate=\"true\"')\n                        .replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: '',\n        data: {},\n        hint: '',\n        error: '',\n        checked: false,\n        disabled: false,\n        indeterminate: false,\n        check_icon: '',\n        indeterminate_icon: '',\n        '[Default Slot]': undefined\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\"></omni-check> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCheck } from \"@capitec/omni-components-react/check\";\n\nconst App = () => <OmniCheck${args.label ? ` label='${args.label}'` : ''}/>;`\n        }\n    ],\n    description: 'Set text value to display next to the check box.',\n    args: {\n        label: 'Label'\n    }\n}",
          "description": "Set text value to display next to the check box."
        },
        {
          "kind": "variable",
          "name": "Hint",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\" hint=\"${args.hint}\"></omni-check> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCheck } from \"@capitec/omni-components-react/check\";\n\nconst App = () => <OmniCheck${args.label ? ` label='${args.label}'` : ''}${args.hint ? ` hint='${args.hint}'` : ''}/>;`\n        }\n    ],\n    description: 'Set text value to display as hint.',\n    args: {\n        label: 'Hint',\n        hint: 'This is a hint'\n    }\n}",
          "description": "Set text value to display as hint."
        },
        {
          "kind": "variable",
          "name": "Error_Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    name: 'Error', // Explicitly named as error, the exported name cannot be 'Error' as that is reserved\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\" error=\"${args.error}\"></omni-check> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCheck } from \"@capitec/omni-components-react/check\";\n\nconst App = () => <OmniCheck${args.label ? ` label='${args.label}'` : ''}${args.error ? ` error='${args.error}'` : ''}/>;`\n        }\n    ],\n    description: 'Set text value to display as error.',\n    args: {\n        label: 'Error',\n        error: 'This is an error state'\n    }\n}",
          "description": "Set text value to display as error."
        },
        {
          "kind": "variable",
          "name": "Checked",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?checked=\"${args.checked}\"></omni-check> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCheck } from \"@capitec/omni-components-react/check\";\n\nconst App = () => <OmniCheck${args.label ? ` label='${args.label}'` : ''}${args.checked ? ` checked` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Checked!.render!(args), undefined, (s) =>\n                    s\n                        .replace(' disabled', ' :disabled=\"true\"')\n                        .replace(' indeterminate', ' :indeterminate=\"true\"')\n                        .replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    description: 'Set the component to a checked state.',\n    args: {\n        label: 'Checked',\n        checked: true\n    }\n}",
          "description": "Set the component to a checked state."
        },
        {
          "kind": "variable",
          "name": "Indeterminate",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?indeterminate=\"${args.indeterminate}\"></omni-check> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCheck } from \"@capitec/omni-components-react/check\";\n\nconst App = () => <OmniCheck${args.label ? ` label='${args.label}'` : ''}${args.indeterminate ? ` indeterminate` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Indeterminate!.render!(args), undefined, (s) =>\n                    s\n                        .replace(' disabled', ' :disabled=\"true\"')\n                        .replace(' indeterminate', ' :indeterminate=\"true\"')\n                        .replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    description: 'Set the component to an indeterminate/partial state.',\n    args: {\n        label: 'Indeterminate',\n        indeterminate: true\n    }\n}",
          "description": "Set the component to an indeterminate/partial state."
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?disabled=\"${args.disabled}\"></omni-check> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCheck } from \"@capitec/omni-components-react/check\";\n\nconst App = () => <OmniCheck${args.label ? ` label='${args.label}'` : ''}${args.disabled ? ` disabled` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Disabled!.render!(args), undefined, (s) =>\n                    s\n                        .replace(' disabled', ' :disabled=\"true\"')\n                        .replace(' indeterminate', ' :indeterminate=\"true\"')\n                        .replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    description: 'Prevent interaction (pointer events).',\n    args: {\n        label: 'Disabled',\n        disabled: true\n    }\n}",
          "description": "Prevent interaction (pointer events)."
        },
        {
          "kind": "variable",
          "name": "Slot",
          "default": "{\n    render: () => html`\n        <omni-check data-testid=\"test-check\">Slotted</omni-check>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCheck } from \"@capitec/omni-components-react/check\";\n\nconst App = () => <OmniCheck>\n                    Slotted\n                  </OmniCheck>;`\n        }\n    ],\n    name: 'Slot',\n    description: 'Set content to display within.',\n    args: {}\n}",
          "description": "Set content to display within."
        },
        {
          "kind": "variable",
          "name": "Custom_Check_Icon",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?checked=\"${args.checked}\"> ${unsafeHTML(args.check_icon)} </omni-check>\n  `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCheck } from \"@capitec/omni-components-react/check\";\n\nconst App = () => <OmniCheck${args.label ? ` label='${args.label}'` : ''}${args.checked ? ` checked` : ''}>\n                    <svg slot=\"check_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 442.79 410.38\" version=\"1.0\" width=\"100%\" height=\"100%\">\n                        <path style={{stroke: '#000', strokeWidth: '19.892', fill: 'lightgreen'}}\n                            d=\"m-1747.2-549.3 287.72 333.9c146.6-298.83 326.06-573.74 614.52-834.75-215.89 121.82-453.86 353.14-657.14 639.38l-245.1-138.53z\"\n                            transform=\"translate(843.77 509.04) scale(.48018)\" />\n                    </svg>\n                </OmniCheck>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Custom_Check_Icon!.render!(args), undefined, (s) =>\n                    s\n                        .replace(' disabled', ' :disabled=\"true\"')\n                        .replace(' indeterminate', ' :indeterminate=\"true\"')\n                        .replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    description: 'Set html content to render when the component is in a checked state.',\n    args: {\n        label: 'Custom Check Icon',\n        checked: true,\n        check_icon: raw`\n            <svg slot=\"check_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 442.79 410.38\" version=\"1.0\" width=\"100%\"\n                height=\"100%\">\n                <path style=\"stroke:#000;stroke-width:19.892;fill:lightgreen\"\n                d=\"m-1747.2-549.3 287.72 333.9c146.6-298.83 326.06-573.74 614.52-834.75-215.89 121.82-453.86 353.14-657.14 639.38l-245.1-138.53z\"\n                transform=\"translate(843.77 509.04) scale(.48018)\" />\n            </svg>\n        `\n    }\n}",
          "description": "Set html content to render when the component is in a checked state."
        },
        {
          "kind": "variable",
          "name": "Custom_Indeterminate_Icon",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-check data-testid=\"test-check\" label=\"${args.label}\" ?indeterminate=\"${args.indeterminate}\">\n      ${unsafeHTML(args.indeterminate_icon)}\n    </omni-check>\n  `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniCheck } from \"@capitec/omni-components-react/check\";\n\nconst App = () => <OmniCheck${args.label ? ` label='${args.label}'` : ''}${args.indeterminate ? ` indeterminate` : ''}>\n                    <svg slot=\"indeterminate_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"100%\" height=\"100%\">\n                        <defs>\n                        <linearGradient id=\"b\" y2=\"28.275\" gradientUnits=\"userSpaceOnUse\" x2=\"20.07\" y1=\"3.976\" x1=\"12.113\">\n                            <stop style={{stopColor: '#ffffff'}} offset=\"0\" />\n                            <stop style={{stopColor: '#ffffff'}} offset=\"1\" />\n                        </linearGradient>\n                        <linearGradient id=\"a\" y2=\"30\" gradientUnits=\"userSpaceOnUse\" x2=\"20.214\" y1=\"2\" x1=\"12.031\">\n                            <stop style={{stopColor: '#ffffff'}} offset=\"0\" />\n                            <stop style={{stopColor: '#ffffff'}} offset=\"1\" />\n                        </linearGradient>\n                        </defs>\n                        <path d=\"M2.875 13C1.281 13 0 14.338 0 16s1.28 3 2.875 3h26.25C30.719 19 32 17.662 32 16s-1.281-3-2.875-3H2.875z\" />\n                        <path style={{fill:'url(#b)'}} transform=\"translate(-.063 .063)\"\n                        d=\"M2.875 13.938c-1.067 0-1.938.884-1.938 2.062s.87 2.062 1.938 2.062h26.25c1.067 0 1.937-.884 1.937-2.062s-.87-2.062-1.937-2.062H2.875z\" />\n                    </svg>\n                </OmniCheck>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Custom_Indeterminate_Icon!.render!(args), undefined, (s) =>\n                    s\n                        .replace(' disabled', ' :disabled=\"true\"')\n                        .replace(' indeterminate', ' :indeterminate=\"true\"')\n                        .replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    description: 'Set html content to render when the component is in an indeterminate state.',\n    args: {\n        label: 'Custom Indeterminate Icon',\n        indeterminate: true,\n        indeterminate_icon: raw`\n\t\t\t<svg slot=\"indeterminate_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"100%\" height=\"100%\">\n\t\t\t\t<defs>\n\t\t\t\t<linearGradient id=\"b\" y2=\"28.275\" gradientUnits=\"userSpaceOnUse\" x2=\"20.07\" y1=\"3.976\" x1=\"12.113\">\n\t\t\t\t\t<stop style=\"stop-color:#ffffff\" offset=\"0\" />\n\t\t\t\t\t<stop style=\"stop-color:#ffffff\" offset=\"1\" />\n\t\t\t\t</linearGradient>\n\t\t\t\t<linearGradient id=\"a\" y2=\"30\" gradientUnits=\"userSpaceOnUse\" x2=\"20.214\" y1=\"2\" x1=\"12.031\">\n\t\t\t\t\t<stop style=\"stop-color:#ffffff\" offset=\"0\" />\n\t\t\t\t\t<stop style=\"stop-color:#ffffff\" offset=\"1\" />\n\t\t\t\t</linearGradient>\n\t\t\t\t</defs>\n\t\t\t\t<path d=\"M2.875 13C1.281 13 0 14.338 0 16s1.28 3 2.875 3h26.25C30.719 19 32 17.662 32 16s-1.281-3-2.875-3H2.875z\" />\n\t\t\t\t<path style=\"fill:url(#b)\" transform=\"translate(-.063 .063)\"\n\t\t\t\td=\"M2.875 13.938c-1.067 0-1.938.884-1.938 2.062s.87 2.062 1.938 2.062h26.25c1.067 0 1.937-.884 1.937-2.062s-.87-2.062-1.937-2.062H2.875z\" />\n\t\t\t</svg>\n\t\t`\n    }\n}",
          "description": "Set html content to render when the component is in an indeterminate state."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checked",
          "declaration": {
            "name": "Checked",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Indeterminate",
          "declaration": {
            "name": "Indeterminate",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slot",
          "declaration": {
            "name": "Slot",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Check_Icon",
          "declaration": {
            "name": "Custom_Check_Icon",
            "module": "src/check/Check.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Indeterminate_Icon",
          "declaration": {
            "name": "Custom_Indeterminate_Icon",
            "module": "src/check/Check.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/check/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Check.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/chip/Chip.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/Close.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Close icon component.",
          "name": "CloseIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-close-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Close.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CloseIcon",
          "declaration": {
            "name": "CloseIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Close.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-close-icon",
          "declaration": {
            "name": "CloseIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Close.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/chip/Chip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control that can be used for input, setting attributes, or performing actions.",
          "name": "Chip",
          "cssProperties": [
            {
              "description": "Component height.",
              "name": "--omni-chip-height"
            },
            {
              "description": "Component maximum height.",
              "name": "--omni-chip-max-height"
            },
            {
              "description": "Component border.",
              "name": "--omni-chip-border"
            },
            {
              "description": "Component border radius.",
              "name": "--omni-chip-border-radius"
            },
            {
              "description": "Component background color.",
              "name": "--omni-chip-background-color"
            },
            {
              "description": "Component padding.",
              "name": "--omni-chip-padding"
            },
            {
              "description": "Component hover border.",
              "name": "--omni-chip-hover-border"
            },
            {
              "description": "Component hover shadow.",
              "name": "--omni-chip-hover-shadow"
            },
            {
              "description": "Component label left padding.",
              "name": "--omni-chip-label-padding-left"
            },
            {
              "description": "Component label right padding.",
              "name": "--omni-chip-label-padding-right"
            },
            {
              "description": "Component label color.",
              "name": "--omni-chip-label-color"
            },
            {
              "description": "Component label font family.",
              "name": "--omni-chip-label-font-family"
            },
            {
              "description": "Component label font size.",
              "name": "--omni-chip-label-font-size"
            },
            {
              "description": "Component label font weight.",
              "name": "--omni-chip-label-font-weight"
            },
            {
              "description": "Component label line height.",
              "name": "--omni-chip-label-line-height"
            },
            {
              "description": "Component slotted icon width.",
              "name": "--omni-chip-icon-width"
            },
            {
              "description": "Component close icon width.",
              "name": "--omni-chip-close-icon-width"
            },
            {
              "description": "Component close icon color.",
              "name": "--omni-chip-close-icon-color"
            },
            {
              "description": "Component disabled border color.",
              "name": "--omni-chip-disabled-border-color"
            },
            {
              "description": "Component disabled background color.",
              "name": "--omni-chip-disabled-background-color"
            },
            {
              "description": "Component icon left padding.",
              "name": "--omni-chip-disabled-hover-background-color"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the chip slot",
              "name": "chip_icon"
            },
            {
              "description": "Replaces the icon for the closed slot",
              "name": "close_icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Sets if the chip has a close button.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_removeClicked",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "remove",
              "type": {
                "text": "CustomEvent<{}>"
              },
              "description": "Dispatched when the close icon is clicked."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Sets if the chip has a close button.",
              "fieldName": "closable",
              "attribute": "closable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-chip",
          "import": "```js\nimport '@capitec/omni-components/chip';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Chip",
          "declaration": {
            "name": "Chip",
            "module": "/Users/runner/work/omni-components/omni-components/src/chip/Chip.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-chip",
          "declaration": {
            "name": "Chip",
            "module": "/Users/runner/work/omni-components/omni-components/src/chip/Chip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/chip/Chip.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\" ?closable=${args.closable} ?disabled=\"${args.disabled}\"\n      >${args.chip_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('chip_icon', args.chip_icon))}` : nothing}${\n        args.close_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('close_icon', args.close_icon))}` : nothing\n    }\n    </omni-chip>\n  `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' closable', ' :closable=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Chip',\n        closable: true,\n        disabled: false,\n        chip_icon: raw`<svg slot=\"chip_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style=\"fill: orange\" width=\"100%\" height=\"100%\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>`,\n        close_icon: ''\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\"> </omni-chip> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniChip } from \"@capitec/omni-components-react/chip\";\n\nconst App = () => <OmniChip${args.label ? ` label='${args.label}'` : ''}/>;`\n        }\n    ],\n    name: 'Label',\n    description: 'Set a text value to display within.',\n    args: {\n        label: 'Label'\n    }\n}",
          "description": "Set a text value to display within."
        },
        {
          "kind": "variable",
          "name": "Closable",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\" ?closable=${args.closable}> </omni-chip> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniChip } from \"@capitec/omni-components-react/chip\";\n\nconst App = () => <OmniChip${args.label ? ` label='${args.label}'` : ''}${args.closable ? ` closable` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Closable!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' closable', ' :closable=\"true\"')\n                )\n        }\n    ],\n    name: 'Closable',\n    description: 'Add a close icon to the component.',\n    args: {\n        label: 'Closable',\n        closable: true\n    }\n}",
          "description": "Add a close icon to the component."
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\" ?disabled=\"${args.disabled}\"> </omni-chip> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniChip } from \"@capitec/omni-components-react/chip\";\n\nconst App = () => <OmniChip${args.label ? ` label='${args.label}'` : ''}${args.disabled ? ` disabled` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Disabled!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' closable', ' :closable=\"true\"')\n                )\n        }\n    ],\n    name: 'Disabled',\n    description: 'Prevent interaction (pointer events).',\n    args: {\n        label: 'Disabled',\n        disabled: true\n    }\n}",
          "description": "Prevent interaction (pointer events)."
        },
        {
          "kind": "variable",
          "name": "Chip_Slot_Icon",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\" ?closable=${args.closable}> ${unsafeHTML(args.chip_icon)} </omni-chip>\n  `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniChip } from \"@capitec/omni-components-react/chip\";\n\nconst App = () => <OmniChip${args.label ? ` label='${args.label}'` : ''}>\n                    <svg slot=\"chip_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\" style={{fill: 'orange'}}><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>\n                  </OmniChip>;`\n        }\n    ],\n    name: 'Chip Icon',\n    description: 'Set html content to display as an icon.',\n    args: {\n        label: 'Chip',\n        closable: false,\n        chip_icon: raw`<svg slot=\"chip_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\" style=\"fill: orange\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>`\n    }\n}",
          "description": "Set html content to display as an icon."
        },
        {
          "kind": "variable",
          "name": "Custom_Close_Icon",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-chip data-testid=\"test-chip\" label=\"${ifNotEmpty(args.label)}\" ?closable=${args.closable}>\n      ${unsafeHTML(args.chip_icon)} ${unsafeHTML(args.close_icon)}\n    </omni-chip>\n  `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniChip } from \"@capitec/omni-components-react/chip\";\n\nconst App = () => <OmniChip${args.label ? ` label='${args.label}'` : ''}${args.closable ? ` closable` : ''}>\n                    <svg slot=\"close_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\"><path d=\"m7.446 6.397.084.073L13 11.939l5.47-5.47a.75.75 0 0 1 1.133.977l-.073.084L14.061 13l5.47 5.47a.75.75 0 0 1-.977 1.133l-.084-.073L13 14.061l-5.47 5.47a.75.75 0 0 1-1.133-.977l.073-.084L11.939 13l-5.47-5.47a.75.75 0 0 1 .977-1.133Z\"/></svg>\n                  </OmniChip>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Custom_Close_Icon!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' closable', ' :closable=\"true\"')\n                )\n        }\n    ],\n    name: 'Custom Close Icon',\n    description: 'Set html content to display as the close icon.',\n    args: {\n        label: 'Close',\n        closable: true,\n        close_icon: raw`<svg slot=\"close_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\"><path d=\"m7.446 6.397.084.073L13 11.939l5.47-5.47a.75.75 0 0 1 1.133.977l-.073.084L14.061 13l5.47 5.47a.75.75 0 0 1-.977 1.133l-.084-.073L13 14.061l-5.47 5.47a.75.75 0 0 1-1.133-.977l.073-.084L11.939 13l-5.47-5.47a.75.75 0 0 1 .977-1.133Z\"/></svg>`\n    }\n}",
          "description": "Set html content to display as the close icon."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/chip/Chip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/chip/Chip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Closable",
          "declaration": {
            "name": "Closable",
            "module": "src/chip/Chip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/chip/Chip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Chip_Slot_Icon",
          "declaration": {
            "name": "Chip_Slot_Icon",
            "module": "src/chip/Chip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Close_Icon",
          "declaration": {
            "name": "Custom_Close_Icon",
            "module": "src/chip/Chip.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/chip/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Chip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/utils/ExpectDOM.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "extendExpect",
          "return": {
            "type": {
              "text": "U"
            }
          },
          "parameters": [
            {
              "name": "initialExpect",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "additionalMatchers",
              "optional": true,
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "expect",
          "default": "((initialExpect as any).default || initialExpect)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "extendExpect",
          "declaration": {
            "name": "extendExpect",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/ExpectDOM.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "expect",
            "module": "/Users/runner/work/omni-components/omni-components/src/utils/ExpectDOM.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputStories.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "LabelStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ComponentStoryFormat<U>"
            }
          }
        },
        {
          "kind": "function",
          "name": "HintStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ComponentStoryFormat<U>"
            }
          }
        },
        {
          "kind": "function",
          "name": "ErrorStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ComponentStoryFormat<U>"
            }
          }
        },
        {
          "kind": "function",
          "name": "ValueStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "inputValue",
              "default": "'The input value'",
              "type": {
                "text": "string | number | string[]"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ComponentStoryFormat<U>"
            }
          }
        },
        {
          "kind": "function",
          "name": "PrefixStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ComponentStoryFormat<U>"
            }
          }
        },
        {
          "kind": "function",
          "name": "SuffixStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ComponentStoryFormat<U>"
            }
          }
        },
        {
          "kind": "function",
          "name": "ClearableStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "inputValue",
              "default": "'The input value'",
              "type": {
                "text": "string | number | string[]"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ComponentStoryFormat<U>"
            }
          }
        },
        {
          "kind": "function",
          "name": "CustomClearableSlot",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "inputValue",
              "default": "'The input value'",
              "type": {
                "text": "string | number | string[]"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ComponentStoryFormat<U>"
            }
          }
        },
        {
          "kind": "function",
          "name": "DisabledStory",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "inputValue",
              "default": "'The input value'",
              "type": {
                "text": "string | number | string[]"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ComponentStoryFormat<U>"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LabelStory",
          "declaration": {
            "name": "LabelStory",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HintStory",
          "declaration": {
            "name": "HintStory",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ErrorStory",
          "declaration": {
            "name": "ErrorStory",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ValueStory",
          "declaration": {
            "name": "ValueStory",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "PrefixStory",
          "declaration": {
            "name": "PrefixStory",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SuffixStory",
          "declaration": {
            "name": "SuffixStory",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ClearableStory",
          "declaration": {
            "name": "ClearableStory",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomClearableSlot",
          "declaration": {
            "name": "CustomClearableSlot",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputStories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledStory",
          "declaration": {
            "name": "DisabledStory",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputStories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputPlaywright.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "testLabelBehaviour",
          "return": {
            "type": {
              "text": "TestFunction"
            }
          },
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "storyExport",
              "default": "'Label'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "testHintBehaviour",
          "return": {
            "type": {
              "text": "TestFunction"
            }
          },
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "storyExport",
              "default": "'Hint'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "testErrorBehaviour",
          "return": {
            "type": {
              "text": "TestFunction"
            }
          },
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "storyExport",
              "default": "'Error_Label'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "testValueBehaviour",
          "return": {
            "type": {
              "text": "TestFunction"
            }
          },
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "storyExport",
              "default": "'Value'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "testPrefixBehaviour",
          "return": {
            "type": {
              "text": "TestFunction"
            }
          },
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "storyExport",
              "default": "'Prefix'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "testSuffixBehaviour",
          "return": {
            "type": {
              "text": "TestFunction"
            }
          },
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "storyExport",
              "default": "'Suffix'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "testClearableBehaviour",
          "return": {
            "type": {
              "text": "TestFunction"
            }
          },
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "storyExport",
              "default": "'Clearable'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "testCustomClearableSlotBehaviour",
          "return": {
            "type": {
              "text": "TestFunction"
            }
          },
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "storyExport",
              "default": "'Custom_Clear_Slot'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "testDisabledBehaviour",
          "return": {
            "type": {
              "text": "TestFunction"
            }
          },
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "storyExport",
              "default": "'Disabled'"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "testLabelBehaviour",
          "declaration": {
            "name": "testLabelBehaviour",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "testHintBehaviour",
          "declaration": {
            "name": "testHintBehaviour",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "testErrorBehaviour",
          "declaration": {
            "name": "testErrorBehaviour",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "testValueBehaviour",
          "declaration": {
            "name": "testValueBehaviour",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "testPrefixBehaviour",
          "declaration": {
            "name": "testPrefixBehaviour",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "testSuffixBehaviour",
          "declaration": {
            "name": "testSuffixBehaviour",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "testClearableBehaviour",
          "declaration": {
            "name": "testClearableBehaviour",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "testCustomClearableSlotBehaviour",
          "declaration": {
            "name": "testCustomClearableSlotBehaviour",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputPlaywright.ts"
          }
        },
        {
          "kind": "js",
          "name": "testDisabledBehaviour",
          "declaration": {
            "name": "testDisabledBehaviour",
            "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniInputPlaywright.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "TestArgs",
          "type": "PlaywrightTestArgs & PlaywrightTestOptions & PlaywrightWorkerArgs & PlaywrightWorkerOptions"
        },
        {
          "alias": "TestFunction",
          "type": "(args: TestArgs, testInfo: TestInfo) => Promise<void>"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/color-field/ColorField.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/color-field/ColorField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`\n    <omni-color-field\n      data-testid=\"test-color-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\"\n      ?clearable=\"${args.clearable}\"\n      >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n       ${args.clear ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args.clear))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix || args.clear ? '\\r\\n' : nothing}</omni-color-field\n    >\n  `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' clearable', ' :clearable=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        data: {},\n        hint: '',\n        error: '',\n        disabled: false,\n        clearable: false,\n        prefix: '',\n        suffix: '',\n        clear: ''\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Clearable"
        },
        {
          "kind": "variable",
          "name": "Custom_Clear_Slot"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`<omni-color-field data-testid=\"test-field\" label=\"${ifNotEmpty(args.label)}\" disabled></omni-color-field>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniColorField } from \"@capitec/omni-components-react/color-field\";\n\nconst App = () => <OmniColorField${args.label ? ` label='${args.label}'` : ''}${args.disabled ? ` disabled` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Disabled!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' clearable', ' :clearable=\"true\"')\n                )\n        }\n    ],\n    name: 'Disabled',\n    description: 'Prevent interaction (pointer events).',\n    args: {\n        label: 'Disabled',\n        disabled: true\n    }\n}",
          "description": "Prevent interaction (pointer events)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Clearable",
          "declaration": {
            "name": "Clearable",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Clear_Slot",
          "declaration": {
            "name": "Custom_Clear_Slot",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/color-field/ColorField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/color-field/ColorField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/color-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./ColorField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/ArrowRight.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Arrow right icon component.",
          "name": "ArrowRightIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-arrow-right-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/ArrowRight.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ArrowRightIcon",
          "declaration": {
            "name": "ArrowRightIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/ArrowRight.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-arrow-right-icon",
          "declaration": {
            "name": "ArrowRightIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/ArrowRight.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/Backspace.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Backspace icon component.",
          "name": "BackspaceIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-backspace-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Backspace.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BackspaceIcon",
          "declaration": {
            "name": "BackspaceIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Backspace.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-backspace-icon",
          "declaration": {
            "name": "BackspaceIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Backspace.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/CapsOff.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Caps off icon component.",
          "name": "CapsOffIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-caps-off-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/CapsOff.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CapsOffIcon",
          "declaration": {
            "name": "CapsOffIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/CapsOff.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-caps-off-icon",
          "declaration": {
            "name": "CapsOffIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/CapsOff.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/CapsOn.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Caps on icon component.",
          "name": "CapsOnIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-caps-on-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/CapsOn.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CapsOnIcon",
          "declaration": {
            "name": "CapsOnIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/CapsOn.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-caps-on-icon",
          "declaration": {
            "name": "CapsOnIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/CapsOn.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/CapsLock.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Caps lock icon component.",
          "name": "CapsLockIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-caps-lock-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/CapsLock.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CapsLockIcon",
          "declaration": {
            "name": "CapsLockIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/CapsLock.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-caps-lock-icon",
          "declaration": {
            "name": "CapsLockIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/CapsLock.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/Next.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Next icon component.",
          "name": "NextIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-next-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Next.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NextIcon",
          "declaration": {
            "name": "NextIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Next.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-next-icon",
          "declaration": {
            "name": "NextIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Next.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/Previous.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Previous icon component.",
          "name": "PreviousIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-previous-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Previous.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviousIcon",
          "declaration": {
            "name": "PreviousIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Previous.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-previous-icon",
          "declaration": {
            "name": "PreviousIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Previous.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/Send.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Send icon component.",
          "name": "SendIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-send-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Send.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SendIcon",
          "declaration": {
            "name": "SendIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Send.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-send-icon",
          "declaration": {
            "name": "SendIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Send.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/keyboard/KeyboardButton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An internal keyboard button control used in the keyboard component.",
          "name": "KeyboardButton",
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside button",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "character",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The character for the button.",
              "attribute": "character",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "KeyboardButtonMode"
              },
              "default": "'none'",
              "description": "The mode for the button:\n- `alpha` Alphabetical mode.\n- `return` Return (Enter) mode.\n- `numeric` Numerical mode.\n- `action` Arbitrary actions mode.\n- `space` Spacebar mode.",
              "attribute": "mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "case",
              "type": {
                "text": "'lower' | 'upper' | 'custom'"
              },
              "default": "'lower'",
              "description": "The case of the button:\n- `upper` Uppercase input only.\n- `lower` Lowercase input only.",
              "attribute": "case",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the button is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_click",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles component key down events.",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "keyboard-click",
              "type": {
                "text": "CustomEvent<{ value: string; }>"
              },
              "description": "Dispatched when the keyboard button is clicked."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "character",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The character for the button.",
              "fieldName": "character",
              "attribute": "character"
            },
            {
              "name": "mode",
              "type": {
                "text": "KeyboardButtonMode"
              },
              "default": "'none'",
              "description": "The mode for the button:\n- `alpha` Alphabetical mode.\n- `return` Return (Enter) mode.\n- `numeric` Numerical mode.\n- `action` Arbitrary actions mode.\n- `space` Spacebar mode.",
              "fieldName": "mode",
              "attribute": "mode"
            },
            {
              "name": "case",
              "type": {
                "text": "'lower' | 'upper' | 'custom'"
              },
              "default": "'lower'",
              "description": "The case of the button:\n- `upper` Uppercase input only.\n- `lower` Lowercase input only.",
              "fieldName": "case",
              "attribute": "case"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the button is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "ignore": true,
          "import": "```js\nimport '@capitec/omni-components/keyboard';\n```",
          "tagName": "omni-keyboard-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "omni-keyboard-button",
          "declaration": {
            "name": "KeyboardButton",
            "module": "/Users/runner/work/omni-components/omni-components/src/keyboard/KeyboardButton.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "KeyboardButtonMode",
          "type": "'alpha' | 'return' | 'numeric' | 'action' | 'space' | 'none'"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/keyboard/Keyboard.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A responsive on-screen keyboard control component.",
          "name": "Keyboard",
          "cssProperties": [
            {
              "description": "Max height for slotted content in keyboard buttons.",
              "name": "--omni-keyboard-button-icon-max-height"
            },
            {
              "description": "Max width for slotted content in keyboard buttons.",
              "name": "--omni-keyboard-button-icon-max-width"
            },
            {
              "description": "Font family for text in keyboard buttons.",
              "name": "--omni-keyboard-button-font-family"
            },
            {
              "description": "Font color for text in keyboard buttons.",
              "name": "--omni-keyboard-button-font-color"
            },
            {
              "description": "Font size for text in keyboard buttons.",
              "name": "--omni-keyboard-button-font-size"
            },
            {
              "description": "Background color for keyboard buttons.",
              "name": "--omni-keyboard-button-background-color"
            },
            {
              "description": "Border for keyboard buttons.",
              "name": "--omni-keyboard-button-border"
            },
            {
              "description": "Margin for keyboard buttons.",
              "name": "--omni-keyboard-button-margin"
            },
            {
              "description": "Font weight for text in keyboard buttons.",
              "name": "--omni-keyboard-button-font-weight"
            },
            {
              "description": "Height for keyboard buttons.",
              "name": "--omni-keyboard-button-height"
            },
            {
              "description": "Width for keyboard buttons.",
              "name": "--omni-keyboard-button-width"
            },
            {
              "description": "Line height for keyboard buttons.",
              "name": "--omni-keyboard-button-line-height"
            },
            {
              "description": "Border radius for keyboard buttons.",
              "name": "--omni-keyboard-button-border-radius"
            },
            {
              "description": "Margin for keyboard buttons in mobile viewports.",
              "name": "--omni-keyboard-button-mobile-margin"
            },
            {
              "description": "Height for keyboard buttons in mobile viewports.",
              "name": "--omni-keyboard-button-mobile-height"
            },
            {
              "description": "Width for keyboard buttons in mobile viewports.",
              "name": "--omni-keyboard-button-mobile-width"
            },
            {
              "description": "Width for return keyboard buttons in mobile viewports.",
              "name": "--omni-return-keyboard-button-mobile-width"
            },
            {
              "description": "Width for numeric keyboard buttons in mobile viewports.",
              "name": "--omni-numeric-keyboard-button-mobile-width"
            },
            {
              "description": "Height for keyboard buttons in small mobile viewports.",
              "name": "--omni-keyboard-button-mobile-small-height"
            },
            {
              "description": "Width for keyboard buttons in small mobile viewports.",
              "name": "--omni-keyboard-button-mobile-small-width"
            },
            {
              "description": "Font size for text in keyboard buttons in small mobile viewports.",
              "name": "--omni-keyboard-button-mobile-small-font-size"
            },
            {
              "description": "Border radius for keyboard buttons in small mobile viewports.",
              "name": "--omni-keyboard-button-mobile-small-border-radius"
            },
            {
              "description": "Width for return keyboard buttons in small mobile viewports.",
              "name": "--omni-return-keyboard-button-mobile-small-width"
            },
            {
              "description": "Width for numeric keyboard buttons in small mobile viewports.",
              "name": "--omni-numeric-keyboard-button-mobile-small-width"
            },
            {
              "description": "Border radius for keyboard shadow.",
              "name": "--omni-keyboard-shadow-border-radius"
            },
            {
              "description": "Bottom padding for keyboard shadow.",
              "name": "--omni-keyboard-shadow-padding-bottom"
            },
            {
              "description": "Background color for keyboard shadow.",
              "name": "--omni-keyboard-shadow-background-color"
            },
            {
              "description": "Width for keyboard top bar.",
              "name": "--omni-keyboard-top-bar-width"
            },
            {
              "description": "Left padding for keyboard top bar.",
              "name": "--omni-keyboard-top-bar-padding-left"
            },
            {
              "description": "Right padding for keyboard top bar.",
              "name": "--omni-keyboard-top-bar-padding-right"
            },
            {
              "description": "Background color for keyboard top bar.",
              "name": "--omni-keyboard-top-bar-background-color"
            },
            {
              "description": "Border radius for keyboard top bar.",
              "name": "--omni-keyboard-top-bar-border-radius"
            },
            {
              "description": "Border bottom color for keyboard top bar.",
              "name": "--omni-keyboard-top-bar-border-bottom-color"
            },
            {
              "description": "Width for display label in keyboard numeric mode.",
              "name": "--omni-keyboard-numeric-display-label-max-width"
            },
            {
              "description": "Width for display label in keyboard special mode.",
              "name": "--omni-keyboard-special-display-label-max-width"
            },
            {
              "description": "Width for display label in keyboard alpha-numeric mode.",
              "name": "--omni-keyboard-alpha-display-label-max-width"
            },
            {
              "description": "Width for keyboard button rows wrapper.",
              "name": "--omni-keyboard-wrapper-width"
            },
            {
              "description": "Width for keyboard button rows wrapper for special keys.",
              "name": "--omni-keyboard-special-wrapper-width"
            },
            {
              "description": "Width for keyboard button rows wrapper for numeric keyboard mode.",
              "name": "--omni-keyboard-numeric-wrapper-width"
            },
            {
              "description": "Width for keyboard call to action button.",
              "name": "--omni-keyboard-action-button-width"
            },
            {
              "description": "Max width for keyboard call to action button.",
              "name": "--omni-keyboard-action-button-max-width"
            },
            {
              "description": "Font or icon colour for keyboard call to action button.",
              "name": "--omni-keyboard-action-button-color"
            },
            {
              "description": "Background colour for keyboard call to action button.",
              "name": "--omni-keyboard-action-button-background-color"
            },
            {
              "description": "Font size for keyboard call to action button.",
              "name": "--omni-keyboard-action-button-font-size"
            },
            {
              "description": "Font weight for keyboard call to action button.",
              "name": "--omni-keyboard-action-button-font-weight"
            },
            {
              "description": "Border radius for keyboard call to action button.",
              "name": "--omni-keyboard-action-button-border-radius"
            },
            {
              "description": "Margin for keyboard call to action button.",
              "name": "--omni-keyboard-action-button-margin"
            },
            {
              "description": "Width for keyboard close button icon.",
              "name": "--omni-keyboard-close-icon-width"
            },
            {
              "description": "Font weight for keyboard close button.",
              "name": "--omni-keyboard-close-button-font-weight"
            },
            {
              "description": "Font colour for keyboard close button.",
              "name": "--omni-keyboard-close-button-color"
            },
            {
              "description": "Font size for keyboard close button.",
              "name": "--omni-keyboard-close-button-font-size"
            },
            {
              "description": "Width for keyboard close button area.",
              "name": "--omni-keyboard-closer-width"
            },
            {
              "description": "Right padding for keyboard close button area.",
              "name": "--omni-keyboard-closer-padding-right"
            },
            {
              "description": "Background color for keyboard.",
              "name": "--omni-keyboard-background-color"
            },
            {
              "description": "Margin for keyboard rows.",
              "name": "--omni-keyboard-key-row-margin"
            },
            {
              "description": "Width for keyboard rows.",
              "name": "--omni-keyboard-key-row-width"
            },
            {
              "description": "Top padding for first keyboard row.",
              "name": "--omni-keyboard-row-padding-top"
            },
            {
              "description": "Bottom padding for last keyboard row.",
              "name": "--omni-keyboard-row-padding-bottom"
            },
            {
              "description": "Colour for keyboard icons.",
              "name": "--omni-keyboard-icons-color"
            },
            {
              "description": "Height for keyboard top bar in mobile viewports.",
              "name": "--omni-keyboard-top-bar-mobile-height"
            },
            {
              "description": "Border radius for keyboard top bar in mobile viewports.",
              "name": "--omni-keyboard-top-bar-mobile-border-radius"
            },
            {
              "description": "Width for display label in keyboard numeric mode for mobile viewports.",
              "name": "--omni-keyboard-mobile-numeric-display-label-max-width"
            },
            {
              "description": "Width for display label in keyboard special mode for mobile viewports.",
              "name": "--omni-keyboard-mobile-special-display-label-max-width"
            },
            {
              "description": "Width for display label in keyboard alpha-numeric mode for mobile viewports.",
              "name": "--omni-keyboard-mobile-alpha-display-label-max-width"
            },
            {
              "description": "Margin for keyboard rows in mobile viewports.",
              "name": "--omni-keyboard-mobile-key-row-margin"
            },
            {
              "description": "Margin for special keyboard rows in mobile viewports.",
              "name": "--omni-keyboard-mobile-special-key-row-margin"
            },
            {
              "description": "Width for keyboard rows in mobile viewports.",
              "name": "--omni-keyboard-mobile-key-row-width"
            },
            {
              "description": "Height for keyboard call to action button in mobile viewports.",
              "name": "--omni-keyboard-mobile-action-button-height"
            },
            {
              "description": "Max width for keyboard call to action button in mobile viewports.",
              "name": "--omni-keyboard-mobile-action-button-max-width"
            },
            {
              "description": "Margin for keyboard call to action button in mobile viewports.",
              "name": "--omni-keyboard-mobile-action-button-margin"
            },
            {
              "description": "Width for keyboard close button icon in mobile viewports.",
              "name": "--omni-keyboard-mobile-close-icon-width"
            },
            {
              "description": "Width for keyboard close button icon in mobile viewports.",
              "name": "--omni-keyboard-mobile-close-icon-width"
            },
            {
              "description": "Width for display label in keyboard numeric mode for small mobile viewports.",
              "name": "--omni-keyboard-mobile-small-numeric-display-label-max-width"
            },
            {
              "description": "Width for display label in keyboard special mode for small mobile viewports.",
              "name": "--omni-keyboard-mobile-small-special-display-label-max-width"
            },
            {
              "description": "Width for display label in keyboard alpha-numeric mode for small mobile viewports.",
              "name": "--omni-keyboard-mobile-small-alpha-display-label-max-width"
            },
            {
              "description": "Margin for keyboard rows in small mobile viewports.",
              "name": "--omni-keyboard-mobile-small-key-row-margin"
            },
            {
              "description": "Margin for special keyboard rows in small mobile viewports.",
              "name": "--omni-keyboard-mobile-small-key-row-margin"
            },
            {
              "description": "Height for keyboard call to action button in small mobile viewports.",
              "name": "--omni-keyboard-mobile-small-action-button-height"
            },
            {
              "description": "Max width for keyboard call to action button in small mobile viewports.",
              "name": "--omni-keyboard-mobile-small-action-button-max-width"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to display on case change button when in a lowercase state.",
              "name": "caps-off"
            },
            {
              "description": "Content to display on case change button when in a single uppercase state.",
              "name": "caps-on"
            },
            {
              "description": "Content to display on case change button when in a permanent uppercase state (caps lock).",
              "name": "caps-lock"
            },
            {
              "description": "Content to display next to close label.",
              "name": "close"
            },
            {
              "description": "Content to display on backspace button.",
              "name": "backspace"
            },
            {
              "description": "Content to display on clear button.",
              "name": "clear"
            },
            {
              "description": "Content to display on call to action button ('Enter') when target component has enterkeyhint=\"done\".",
              "name": "action-done"
            },
            {
              "description": "Content to display on call to action button ('Enter') when target component has enterkeyhint=\"go\".",
              "name": "action-go"
            },
            {
              "description": "Content to display on call to action button ('Enter') when target component has enterkeyhint=\"next\".",
              "name": "action-next"
            },
            {
              "description": "Content to display on call to action button ('Enter') when target component has enterkeyhint=\"previous\".",
              "name": "action-previous"
            },
            {
              "description": "Content to display on call to action button ('Enter') when target component has enterkeyhint=\"search\".",
              "name": "action-search"
            },
            {
              "description": "Content to display on call to action button ('Enter') when target component has enterkeyhint=\"send\".",
              "name": "action-send"
            },
            {
              "description": "Content to display on call to action button ('Enter') when target component has enterkeyhint=\"enter\" or enterkeyhint is not set.",
              "name": "action-enter"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attachMode",
              "type": {
                "text": "'all' | 'attribute' | 'id'"
              },
              "default": "'all'",
              "description": "The rule for the Keyboard to attach to inputs for showing on component focus.\n* `all` - The Keyboard will show on focus for all input related components unless opted out with `data-omni-keyboard-hidden` on the component.\n* `attribute` - The Keyboard will only show on focus for input related components with the `data-omni-keyboard-attach` attribute\n* `id` - The Keyboard will only show on focus for input related components with the `data-omni-keyboard-attach` attribute set equal to the Keyboard's id",
              "attribute": "attach-mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closeLabel",
              "type": {
                "text": "string"
              },
              "default": "'Close'",
              "description": "The text label to display by the close button.",
              "attribute": "close-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "spaceLabel",
              "type": {
                "text": "string"
              },
              "default": "'Space'",
              "description": "The text label to display on the spacebar button.",
              "attribute": "space-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearLabel",
              "type": {
                "text": "string"
              },
              "default": "'Clear'",
              "description": "The text label to display on the clear button. The `clear` slot takes precedence over this label.",
              "attribute": "clear-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "actionLabel",
              "type": {
                "text": "string"
              },
              "default": "'Enter'",
              "description": "The text label to display on the call to action button when `enterkeyhint` is not defined or `enterkeyhint=\"enter\"`. The `action-enter` slot takes precedence over this label.",
              "attribute": "action-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "KeyboardMode"
              },
              "privacy": "private",
              "default": "'none'"
            },
            {
              "kind": "field",
              "name": "currentCase",
              "type": {
                "text": "'lower' | 'upper' | 'upper-single'"
              },
              "privacy": "private",
              "default": "'lower'"
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "KeyboardMode | 'special'"
              },
              "privacy": "private",
              "default": "'none'"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "targetObserver",
              "type": {
                "text": "MutationObserver | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "targetComponent",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "targetComponentObserver",
              "type": {
                "text": "MutationObserver | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "returnMode",
              "type": {
                "text": "'change-value' | 'multi-line'"
              },
              "privacy": "private",
              "default": "'change-value'"
            },
            {
              "kind": "field",
              "name": "focusNodes",
              "type": {
                "text": "Node[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "displayValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "displayCase",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currentEnterKeyHint",
              "type": {
                "text": "EnterKeyHint"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "globalClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "globalFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "create",
              "static": true,
              "parameters": [
                {
                  "name": "init",
                  "type": {
                    "text": "KeyboardInit"
                  },
                  "description": "Initialisation context for Keyboard element that will be created."
                }
              ],
              "description": "Creates a new Keyboard element with the provided context and appends it to the DOM (either to document body or to provided target parent element).",
              "return": {
                "type": {
                  "text": "Keyboard | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "_findNextTabIndex",
              "return": {
                "type": {
                  "text": "{ element: HTMLElement; tabIndex: number } | null"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "searchingElem",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "tidx",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "reverse",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "foundNext",
                  "type": {
                    "text": "{ element: HTMLElement; tabIndex: number } | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_findNextTabIndexInChildren",
              "return": {
                "type": {
                  "text": "{ element: HTMLElement; tabIndex: number } | null"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "searchingElem",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "tidx",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "reverse",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "foundNext",
                  "type": {
                    "text": "{ element: HTMLElement; tabIndex: number } | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_globalClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_globalFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_toggleCase",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_toggleState",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderCaps",
              "return": {
                "type": {
                  "text": "TemplateResult<1> | unique symbol"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderClose",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderBackspace",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "parameters": [
                {
                  "name": "mode",
                  "default": "'return'",
                  "type": {
                    "text": "'return' | 'numeric'"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderCallToAction",
              "parameters": [
                {
                  "name": "extraClasses",
                  "default": "undefined",
                  "type": {
                    "text": "ClassInfo | undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "attach-mode",
              "type": {
                "text": "'all' | 'attribute' | 'id'"
              },
              "default": "'all'",
              "description": "The rule for the Keyboard to attach to inputs for showing on component focus.\n* `all` - The Keyboard will show on focus for all input related components unless opted out with `data-omni-keyboard-hidden` on the component.\n* `attribute` - The Keyboard will only show on focus for input related components with the `data-omni-keyboard-attach` attribute\n* `id` - The Keyboard will only show on focus for input related components with the `data-omni-keyboard-attach` attribute set equal to the Keyboard's id",
              "fieldName": "attachMode",
              "attribute": "attach-mode"
            },
            {
              "name": "close-label",
              "type": {
                "text": "string"
              },
              "default": "'Close'",
              "description": "The text label to display by the close button.",
              "fieldName": "closeLabel",
              "attribute": "close-label"
            },
            {
              "name": "space-label",
              "type": {
                "text": "string"
              },
              "default": "'Space'",
              "description": "The text label to display on the spacebar button.",
              "fieldName": "spaceLabel",
              "attribute": "space-label"
            },
            {
              "name": "clear-label",
              "type": {
                "text": "string"
              },
              "default": "'Clear'",
              "description": "The text label to display on the clear button. The `clear` slot takes precedence over this label.",
              "fieldName": "clearLabel",
              "attribute": "clear-label"
            },
            {
              "name": "action-label",
              "type": {
                "text": "string"
              },
              "default": "'Enter'",
              "description": "The text label to display on the call to action button when `enterkeyhint` is not defined or `enterkeyhint=\"enter\"`. The `action-enter` slot takes precedence over this label.",
              "fieldName": "actionLabel",
              "attribute": "action-label"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-keyboard",
          "globalAttributes": [
            {
              "attribute": " data-omni-keyboard-attach",
              "description": "Indicates that the Keyboard is enabled for that component when the Keyboard has `attach-mode=\"attribute\"` or when the value is equal to the Keyboard's id and `attach-mode=\"id\"`.",
              "type": "boolean | string"
            },
            {
              "attribute": " data-omni-keyboard-hidden",
              "description": "Disables the Keyboard for that component.",
              "type": "boolean"
            },
            {
              "attribute": " data-omni-keyboard-mode",
              "description": "Indicates that the Keyboard is to render in specified type of inputmode. Takes precedence over `inputmode` attribute.",
              "type": "InputMode"
            },
            {
              "attribute": " enterkeyhint",
              "description": "Indicates that the Keyboard's call to action button must render (and in some cases behave) accordingly.",
              "type": "EnterKeyHint"
            },
            {
              "attribute": " data-omni-keyboard-multi-line",
              "description": "Indicates that the call to action button inserts a new line instead of default behaviour.",
              "type": "boolean"
            },
            {
              "attribute": " data-omni-keyboard-mask",
              "description": "Indicates that the Keyboard display value must be masked.",
              "type": "boolean"
            },
            {
              "attribute": " data-omni-keyboard-no-display",
              "description": "Disables the Keyboard display value. Takes precedence over `data-omni-keyboard-mask`.",
              "type": "boolean"
            }
          ],
          "status": "experimental",
          "import": "```js\nimport '@capitec/omni-components/keyboard';\n```",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "maskAttribute",
          "type": {
            "text": "string"
          },
          "default": "'data-omni-keyboard-mask'",
          "description": "Indicates that the Keyboard display value must be masked."
        },
        {
          "kind": "variable",
          "name": "multiLineAttribute",
          "type": {
            "text": "string"
          },
          "default": "'data-omni-keyboard-multi-line'",
          "description": "Indicates that the call to action button inserts a new line instead of default behaviour."
        },
        {
          "kind": "variable",
          "name": "hiddenAttribute",
          "type": {
            "text": "string"
          },
          "default": "'data-omni-keyboard-hidden'",
          "description": "Disables the Keyboard for that component."
        },
        {
          "kind": "variable",
          "name": "noDisplayValueAttribute",
          "type": {
            "text": "string"
          },
          "default": "'data-omni-keyboard-no-display'",
          "description": "Disables the Keyboard display value. Takes precedence over `data-omni-keyboard-mask`."
        },
        {
          "kind": "variable",
          "name": "attachAttribute",
          "type": {
            "text": "string"
          },
          "default": "'data-omni-keyboard-attach'",
          "description": "Indicates that the Keyboard is enabled for that component when the Keyboard has `attach-mode=\"attribute\"` or when the value is equal to the Keyboard's id and `attach-mode=\"id\"`."
        },
        {
          "kind": "variable",
          "name": "explicitKeyboardMode",
          "type": {
            "text": "string"
          },
          "default": "'data-omni-keyboard-mode'",
          "description": "Indicates that the Keyboard is to render in specified type of inputmode. Takes precedence over `inputmode` attribute."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RenderFunction",
          "declaration": {
            "name": "RenderFunction",
            "module": "../render-element/RenderElement.js"
          }
        },
        {
          "kind": "js",
          "name": "RenderResult",
          "declaration": {
            "name": "RenderResult",
            "module": "../render-element/RenderElement.js"
          }
        },
        {
          "kind": "js",
          "name": "Keyboard",
          "declaration": {
            "name": "Keyboard",
            "module": "/Users/runner/work/omni-components/omni-components/src/keyboard/Keyboard.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-keyboard",
          "declaration": {
            "name": "Keyboard",
            "module": "/Users/runner/work/omni-components/omni-components/src/keyboard/Keyboard.ts"
          }
        },
        {
          "kind": "js",
          "name": "maskAttribute",
          "declaration": {
            "name": "maskAttribute",
            "module": "/Users/runner/work/omni-components/omni-components/src/keyboard/Keyboard.ts"
          }
        },
        {
          "kind": "js",
          "name": "multiLineAttribute",
          "declaration": {
            "name": "multiLineAttribute",
            "module": "/Users/runner/work/omni-components/omni-components/src/keyboard/Keyboard.ts"
          }
        },
        {
          "kind": "js",
          "name": "hiddenAttribute",
          "declaration": {
            "name": "hiddenAttribute",
            "module": "/Users/runner/work/omni-components/omni-components/src/keyboard/Keyboard.ts"
          }
        },
        {
          "kind": "js",
          "name": "noDisplayValueAttribute",
          "declaration": {
            "name": "noDisplayValueAttribute",
            "module": "/Users/runner/work/omni-components/omni-components/src/keyboard/Keyboard.ts"
          }
        },
        {
          "kind": "js",
          "name": "attachAttribute",
          "declaration": {
            "name": "attachAttribute",
            "module": "/Users/runner/work/omni-components/omni-components/src/keyboard/Keyboard.ts"
          }
        },
        {
          "kind": "js",
          "name": "explicitKeyboardMode",
          "declaration": {
            "name": "explicitKeyboardMode",
            "module": "/Users/runner/work/omni-components/omni-components/src/keyboard/Keyboard.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "InputMode",
          "type": "'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
        },
        {
          "alias": "InputEventTypes",
          "type": "| 'insertText'\n    | 'insertReplacementText'\n    | 'insertLineBreak'\n    | 'insertParagraph'\n    | 'insertOrderedList'\n    | 'insertUnorderedList'\n    | 'insertHorizontalRule'\n    | 'insertFromYank'\n    | 'insertFromDrop'\n    | 'insertFromPaste'\n    | 'insertFromPasteAsQuotation'\n    | 'insertTranspose'\n    | 'insertCompositionText'\n    | 'insertLink'\n    | 'deleteWordBackward'\n    | 'deleteWordForward'\n    | 'deleteSoftLineBackward'\n    | 'deleteSoftLineForward'\n    | 'deleteEntireSoftLine'\n    | 'deleteHardLineBackward'\n    | 'deleteHardLineForward'\n    | 'deleteByDrag'\n    | 'deleteByCut'\n    | 'deleteContent'\n    | 'deleteContentBackward'\n    | 'deleteContentForward'\n    | 'historyUndo'\n    | 'historyRedo'\n    | 'formatBold'\n    | 'formatItalic'\n    | 'formatUnderline'\n    | 'formatStrikeThrough'\n    | 'formatSuperscript'\n    | 'formatSubscript'\n    | 'formatJustifyFull'\n    | 'formatJustifyCenter'\n    | 'formatJustifyRight'\n    | 'formatJustifyLeft'\n    | 'formatIndent'\n    | 'formatOutdent'\n    | 'formatRemove'\n    | 'formatSetBlockTextDirection'\n    | 'formatSetInlineTextDirection'\n    | 'formatBackColor'\n    | 'formatFontColor'\n    | 'formatFontName'"
        },
        {
          "alias": "EnterKeyHint",
          "type": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send' | undefined"
        },
        {
          "alias": "KeyboardMode",
          "type": "'numeric' | 'alpha-numeric' | 'none'"
        },
        {
          "alias": "InputEventInitWithType",
          "type": "| InputEventInit\n    | {\n          inputType: InputEventTypes;\n      }"
        },
        {
          "alias": "KeyboardInit",
          "type": "{\n    /**\n     * The id to apply to the Keyboard elements.\n     */\n    id?: string;\n\n    /**\n     * The container to append the Keyboard as child. If not provided will append to a new div element on the document body.\n     */\n    parent?: string | HTMLElement | DocumentFragment | null;\n\n    /**\n     * The rule for the Keyboard to attach to inputs for showing on component focus.\n     * * `all` - The Keyboard will show on focus for all input related components unless opted out with `data-omni-keyboard-hidden` on the component.\n     * * `attribute` - The Keyboard will only show on focus for input related components with the `data-omni-keyboard-attach` attribute.\n     * * `id` - The Keyboard will only show on focus for input related components with the `data-omni-keyboard-attach` attribute set equal to the Keyboard's id\n     */\n    attachMode?: 'all' | 'attribute' | 'id';\n\n    /**\n     * The text label to display by the close button.\n     */\n    closeLabel?: string;\n\n    /**\n     * The text label to display on the spacebar button.\n     */\n    spaceLabel?: string;\n\n    /**\n     * The text label to display on the clear button. The `clear` slot takes precedence over this label.\n     */\n    clearLabel?: string;\n\n    /**\n     * The text label to display on the call to action button when `enterkeyhint` is not defined or `enterkeyhint=\"enter\"`. The `action-enter` slot takes precedence over this label.\n     */\n    actionLabel?: string;\n\n    /**\n     * A function that returns content to render within the 'clear' slot\n     */\n    clear?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'caps-off' slot\n     */\n    capsOff?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'caps-on' slot\n     */\n    capsOn?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'caps-lock' slot\n     */\n    capsLock?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'backspace' slot\n     */\n    backspace?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'close' slot\n     */\n    close?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'action-enter' slot\n     */\n    actionEnter?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'action-done' slot\n     */\n    actionDone?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'action-go' slot\n     */\n    actionGo?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'action-next' slot\n     */\n    actionNext?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'action-previous' slot\n     */\n    actionPrevious?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'action-search' slot\n     */\n    actionSearch?: RenderFunction;\n\n    /**\n     * A function that returns content to render within the 'action-send' slot\n     */\n    actionSend?: RenderFunction;\n}"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/currency-field/CurrencyField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to enter a formatted currency value.",
          "name": "CurrencyField",
          "cssProperties": [
            {
              "description": "Currency field text align.",
              "name": "--omni-currency-field-text-align"
            },
            {
              "description": "Currency field font color.",
              "name": "--omni-currency-field-font-color"
            },
            {
              "description": "Currency field font family.",
              "name": "--omni-currency-field-font-family"
            },
            {
              "description": "Currency field font size.",
              "name": "--omni-currency-field-font-size"
            },
            {
              "description": "Currency field font weight.",
              "name": "--omni-currency-field-font-weight"
            },
            {
              "description": "Currency field padding.",
              "name": "--omni-currency-field-padding"
            },
            {
              "description": "Currency field height.",
              "name": "--omni-currency-field-height"
            },
            {
              "description": "Currency field width.",
              "name": "--omni-currency-field-width"
            },
            {
              "description": "Currency field disabled font color.",
              "name": "--omni-currency-field-disabled-font-color"
            },
            {
              "description": "Currency field label left margin.",
              "name": "--omni-currency-field-label-left-margin"
            },
            {
              "description": "Currency field symbol font size.",
              "name": "--omni-currency-field-symbol-font-size"
            },
            {
              "description": "Currency field symbol font color.",
              "name": "--omni-currency-field-symbol-color"
            },
            {
              "description": "Currency field symbol left padding.",
              "name": "--omni-currency-field-symbol-left-padding"
            },
            {
              "description": "Currency field symbol selectable state.",
              "name": "--omni-currency-field-symbol-select"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currencySymbol",
              "type": {
                "text": "string"
              },
              "default": "'$'",
              "description": "Currency symbol.",
              "attribute": "currency-symbol",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "thousandsSeparator",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Thousands separator.",
              "attribute": "thousands-separator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fractionalSeparator",
              "type": {
                "text": "string"
              },
              "default": "'.'",
              "description": "Fractional separator.",
              "attribute": "fractional-separator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fractionalPrecision",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "Fractional precision.",
              "attribute": "fractional-precision",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noNativeKeyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "attribute": "no-native-keyboard",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "formatter",
              "type": {
                "text": "string"
              },
              "default": "'\\\\B(?=(\\\\d{3})+(?!\\\\d))'",
              "description": "Formatter provided to format the value.",
              "attribute": "formatter",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dispatchChange",
              "parameters": [
                {
                  "name": "amount",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_isNumber",
              "parameters": [
                {
                  "name": "number",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_isAllZeros",
              "parameters": [
                {
                  "name": "centValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_convertToCents",
              "parameters": [
                {
                  "name": "currencyValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "_formatToCurrencyValue",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_parseAmount",
              "return": {
                "type": {
                  "text": "number | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setValue",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_parseFraction",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_blurOnEnter",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_formatToCurrency",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "preFormattedValue",
                  "type": {
                    "text": "number | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_formatToFloat",
              "return": {
                "type": {
                  "text": "string | number"
                }
              },
              "parameters": [
                {
                  "name": "formattedValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onFocusInput",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onClickInput",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onBlur",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onPaste",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "ClipboardEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_beforeInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "attribute": "clearable",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "focusedStatic",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "Dispatched when the component value changes.",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "currency-symbol",
              "type": {
                "text": "string"
              },
              "default": "'$'",
              "description": "Currency symbol.",
              "fieldName": "currencySymbol",
              "attribute": "currency-symbol"
            },
            {
              "name": "thousands-separator",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Thousands separator.",
              "fieldName": "thousandsSeparator",
              "attribute": "thousands-separator"
            },
            {
              "name": "fractional-separator",
              "type": {
                "text": "string"
              },
              "default": "'.'",
              "description": "Fractional separator.",
              "fieldName": "fractionalSeparator",
              "attribute": "fractional-separator"
            },
            {
              "name": "fractional-precision",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "Fractional precision.",
              "fieldName": "fractionalPrecision",
              "attribute": "fractional-precision"
            },
            {
              "name": "no-native-keyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "fieldName": "noNativeKeyboard",
              "attribute": "no-native-keyboard"
            },
            {
              "name": "formatter",
              "type": {
                "text": "string"
              },
              "default": "'\\\\B(?=(\\\\d{3})+(?!\\\\d))'",
              "description": "Formatter provided to format the value.",
              "fieldName": "formatter",
              "attribute": "formatter"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "fieldName": "clearable",
              "attribute": "clearable",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.js"
          },
          "tagName": "omni-currency-field",
          "import": "```js\nimport '@capitec/omni-components/currency-field';\n```",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the clear slot.",
              "name": "clear",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CurrencyField",
          "declaration": {
            "name": "CurrencyField",
            "module": "/Users/runner/work/omni-components/omni-components/src/currency-field/CurrencyField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-currency-field",
          "declaration": {
            "name": "CurrencyField",
            "module": "/Users/runner/work/omni-components/omni-components/src/currency-field/CurrencyField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/currency-field/CurrencyField.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/currency-field/CurrencyField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args) => html`\n        <omni-currency-field\n            data-testId=\"test-currency-field\"\n            label=\"${ifNotEmpty(args.label)}\"\n            value=\"${ifNotEmpty(args.value)}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            ?disabled=\"${args.disabled}\"\n            ?clearable=\"${args.clearable}\"\n            fractional-precision=\"${args.fractionalPrecision}\"\n            fractional-separator=\"${ifNotEmpty(args.fractionalSeparator)}\"\n            thousands-separator=\"${ifNotEmpty(args.thousandsSeparator)}\"\n            currency-symbol=\"${ifNotEmpty(args.currencySymbol)}\"\n            formatter=\"${ifNotEmpty(args.formatter)}\"           \n            >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n            ${args.clear ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args.clear))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix || args.clear ? '\\r\\n' : nothing}</omni-currency-field>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) => getSourceFromLit(Interactive!.render!(args), undefined, (s) => s.replace('formatter', '.formatter'))\n            }\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' clearable', ' :clearable=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '123456789',\n        hint: '',\n        error: '',\n        disabled: false,\n        clearable: false,\n        prefix: '',\n        suffix: '',\n        clear: '',\n        fractionalPrecision: 2,\n        fractionalSeparator: '.',\n        thousandsSeparator: ',',\n        currencySymbol: '$',\n        formatter: '\\\\B(?=(\\\\d{3})+(?!\\\\d))'\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Clearable"
        },
        {
          "kind": "variable",
          "name": "Custom_Clear_Slot"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Clearable",
          "declaration": {
            "name": "Clearable",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Clear_Slot",
          "declaration": {
            "name": "Custom_Clear_Slot",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/currency-field/CurrencyField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/currency-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./CurrencyField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/icons/Calendar.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A calendar icon component.",
          "name": "CalenderIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-calendar-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Calendar.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CalenderIcon",
          "declaration": {
            "name": "CalenderIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Calendar.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-calendar-icon",
          "declaration": {
            "name": "CalenderIcon",
            "module": "/Users/runner/work/omni-components/omni-components/src/icons/Calendar.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/date-picker/DatePicker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to get / set a specific date using a calendar.",
          "name": "DatePicker",
          "cssProperties": [
            {
              "description": "Date picker input text align.",
              "name": "--omni-date-picker-text-align"
            },
            {
              "description": "Date picker input font color.",
              "name": "--omni-date-picker-font-color"
            },
            {
              "description": "Date picker input font family.",
              "name": "--omni-date-picker-font-family"
            },
            {
              "description": "Date picker input font size.",
              "name": "--omni-date-picker-font-size"
            },
            {
              "description": "Date picker input font weight.",
              "name": "--omni-date-picker-font-weight"
            },
            {
              "description": "Date picker input height.",
              "name": "--omni-date-picker-height"
            },
            {
              "description": "Date picker input padding.",
              "name": "--omni-date-picker-padding"
            },
            {
              "description": "Date picker width.",
              "name": "--omni-date-picker-width"
            },
            {
              "description": "Date picker min width.",
              "name": "--omni-date-picker-min-width"
            },
            {
              "description": "Date picker disabled font color.",
              "name": "--omni-date-picker-disabled-font-color"
            },
            {
              "description": "Date picker error font color.",
              "name": "--omni-date-picker-error-font-color"
            },
            {
              "description": "Date picker control padding.",
              "name": "--omni-date-picker-control-padding"
            },
            {
              "description": "Date picker control hover.",
              "name": "--omni-date-picker-control-hover-color"
            },
            {
              "description": "Date picker control icon width.",
              "name": "--omni-date-picker-control-icon-width"
            },
            {
              "description": "Date picker control icon height.",
              "name": "--omni-date-picker-control-icon-height"
            },
            {
              "description": "Date picker control icon color.",
              "name": "--omni-date-picker-control-icon-color"
            },
            {
              "description": "Date picker control icon error color.",
              "name": "--omni-date-picker-control-icon-error-color"
            },
            {
              "description": "Date picker control left border width.",
              "name": "--omni-date-picker-control-left-border-width"
            },
            {
              "description": "Date picker control left border color.",
              "name": "--omni-date-picker-control-left-border-color"
            },
            {
              "description": "Date picker control left border focused width.",
              "name": "--omni-date-picker-control-left-focused-border-width"
            },
            {
              "description": "Date picker control left border focused color.",
              "name": "--omni-date-picker-control-left-focused-color"
            },
            {
              "description": "Date picker control left border error color.",
              "name": "--omni-date-picker-control-left-border-error-color"
            },
            {
              "description": "Date picker container z-index.",
              "name": "--omni-date-picker-container-z-index"
            },
            {
              "description": "Date picker dialog left.",
              "name": "--omni-date-picker-mobile-picker-dialog-left"
            },
            {
              "description": "Date picker dialog right",
              "name": "--omni-date-picker-mobile-picker-dialog-right"
            },
            {
              "description": "Date picker dialog bottom",
              "name": "--omni-date-picker-mobile-picker-dialog-bottom"
            },
            {
              "description": "Date picker dialog background color.",
              "name": "--omni-date-picker-mobile-picker-dialog-background-color"
            },
            {
              "description": "Date picker container width.",
              "name": "--omni-date-picker-container-width"
            },
            {
              "description": "Date picker container top.",
              "name": "--omni-date-picker-container-top"
            },
            {
              "description": "Date picker container border bottom.",
              "name": "--omni-date-picker-period-container-border-bottom"
            },
            {
              "description": "Date picker container render bottom top.",
              "name": "--omni-date-picker-container-render-bottom-top"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultLocale",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'en-US'"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale used for formatting the output of the Date time picker.",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "The minimum date inclusively allowed to be selected.",
              "attribute": "min-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "The maximum date inclusively allowed to be selected.",
              "attribute": "max-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "DateTime"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showCalendar",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_bottomOfViewport",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isMobile",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_checkForBottomOfScreen",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_checkforMobile",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_inputClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_windowClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_toggleCalendar",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_dateSelected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1> | unique symbol"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "focusedStatic",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "attribute": "clearable",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "Dispatched when a date is selected.",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale used for formatting the output of the Date time picker.",
              "fieldName": "locale",
              "attribute": "locale"
            },
            {
              "name": "min-date",
              "type": {
                "text": "string | undefined"
              },
              "description": "The minimum date inclusively allowed to be selected.",
              "fieldName": "minDate",
              "attribute": "min-date"
            },
            {
              "name": "max-date",
              "type": {
                "text": "string | undefined"
              },
              "description": "The maximum date inclusively allowed to be selected.",
              "fieldName": "maxDate",
              "attribute": "max-date"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "fieldName": "clearable",
              "attribute": "clearable",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.js"
          },
          "tagName": "omni-date-picker",
          "import": "```js\nimport '@capitec/omni-components/date-picker';\n```",
          "customElement": true,
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the clear slot.",
              "name": "clear",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DatePicker",
          "declaration": {
            "name": "DatePicker",
            "module": "/Users/runner/work/omni-components/omni-components/src/date-picker/DatePicker.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-date-picker",
          "declaration": {
            "name": "DatePicker",
            "module": "/Users/runner/work/omni-components/omni-components/src/date-picker/DatePicker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/date-picker/DatePicker.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/date-picker/DatePicker.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-date-picker\n            data-testid=\"test-date-picker\"\n            label=\"${ifNotEmpty(args.label)}\"\n            value=\"${ifNotEmpty(args.value)}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            locale=\"${args.locale}\"\n            ?disabled=\"${args.disabled}\"\n            ?clearable=\"${args.clearable}\"\n            min-date=\"${ifNotEmpty(args.minDate)}\"\n            max-date=\"${ifNotEmpty(args.maxDate)}\"\n            >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n            ${args.clear ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args.clear))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix || args.clear ? '\\r\\n' : nothing}</omni-date-picker\n        >\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' clearable', ' :clearable=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Select a Date',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        prefix: '',\n        suffix: '',\n        clear: '',\n        locale: 'en-us',\n        maxDate: '',\n        minDate: '',\n        clearable: false\n    } as Args\n}"
        },
        {
          "kind": "variable",
          "name": "Value",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-date-picker\n        data-testid=\"test-date-picker\"\n        label=\"${ifNotEmpty(args.label)}\"\n        value=\"${args.value}\"\n    >\n\n    </omni-date-picker>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniDatePicker } from \"@capitec/omni-components-react/date-picker\";\n\nconst App = () => <OmniDatePicker${args.label ? ` label='${args.label}'` : ''}${args.value ? ` value='${args.value}'` : ''}/>;`\n        }\n    ],\n    name: 'Value',\n    description: 'Set the current value of the Date Picker component.',\n    args: {\n        label: 'Value',\n        value: isoDate\n    } as Args\n}",
          "description": "Set the current value of the Date Picker component."
        },
        {
          "kind": "variable",
          "name": "Locale",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-date-picker\n        data-testid=\"test-date-picker\"\n        label=\"${ifNotEmpty(args.label)}\"\n        .value=\"${args.value}\"\n        locale=\"${args.locale}\"\n    >\n    </omni-date-picker>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniDatePicker } from \"@capitec/omni-components-react/date-picker\";\n\nconst App = () => <OmniDatePicker${args.label ? ` label='${args.label}'` : ''}${args.locale ? ` locale='${args.locale}'` : ''}/>;`\n        }\n    ],\n    name: 'Locale',\n    description: 'Set the current locale of the Date Picker component.',\n    args: {\n        label: 'Locale',\n        locale: testLocale\n    } as Args\n}",
          "description": "Set the current locale of the Date Picker component."
        },
        {
          "kind": "variable",
          "name": "Min_Date",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-date-picker\n        data-testid=\"test-date-picker\"\n        label=\"${ifNotEmpty(args.label)}\"\n        min-date=\"${ifNotEmpty(args.minDate)}\"\n        value=\"${ifNotEmpty(args.value)}\"\n    >\n    </omni-date-picker>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniDatePicker } from \"@capitec/omni-components-react/date-picker\";\n\nconst App = () => <OmniDatePicker${args.label ? ` label='${args.label}'` : ''}${args.minDate ? ` min-date='${args.minDate}'` : ''}${\n                args.value ? ` value='${args.value}'` : ''\n            }/>;`\n        }\n    ],\n    name: 'Min Date',\n    description: 'Limit the Date Picker to only have selectable dates after and including the specified min-date.',\n    args: {\n        minDate: '2023-04-14',\n        value: '2023-04-15'\n    } as Args\n}",
          "description": "Limit the Date Picker to only have selectable dates after and including the specified min-date."
        },
        {
          "kind": "variable",
          "name": "Max_Date",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-date-picker\n        data-testid=\"test-date-picker\"\n        label=\"${ifNotEmpty(args.label)}\"\n        max-date=\"${ifNotEmpty(args.maxDate)}\"\n        value=\"${ifNotEmpty(args.value)}\"\n    >\n    </omni-date-picker>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniDatePicker } from \"@capitec/omni-components-react/date-picker\";\n\nconst App = () => <OmniDatePicker${args.label ? ` label='${args.label}'` : ''}${args.maxDate ? ` max-date='${args.maxDate}'` : ''}${\n                args.value ? ` value='${args.value}'` : ''\n            }/>;`\n        }\n    ],\n    name: 'Max Date',\n    description: 'Limit the Date Picker to only have selectable dates before and including the specified max-date.',\n    args: {\n        maxDate: '2023-04-14',\n        value: '2023-04-13'\n    } as Args\n}",
          "description": "Limit the Date Picker to only have selectable dates before and including the specified max-date."
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Clearable"
        },
        {
          "kind": "variable",
          "name": "Custom_Clear_Slot"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args) =>\n        html`<omni-date-picker data-testid=\"test-date-picker\" label=\"${ifNotEmpty(args.label)}\" value=\"${args.value}\" disabled></omni-date-picker>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniDatePicker } from \"@capitec/omni-components-react/date-picker\";\n\nconst App = () => <OmniDatePicker${args.label ? ` label='${args.label}'` : ''}${args.value ? ` value='${args.value}'` : ''} disabled/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Disabled!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' clearable', ' :clearable=\"true\"')\n                )\n        }\n    ],\n    name: 'Disabled',\n    description: 'Prevent interaction (pointer/input events).',\n    args: {\n        label: 'Disabled',\n        disabled: true,\n        value: '2022-03-01'\n    }\n}",
          "description": "Prevent interaction (pointer/input events)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Locale",
          "declaration": {
            "name": "Locale",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Min_Date",
          "declaration": {
            "name": "Min_Date",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Max_Date",
          "declaration": {
            "name": "Max_Date",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Clearable",
          "declaration": {
            "name": "Clearable",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Clear_Slot",
          "declaration": {
            "name": "Custom_Clear_Slot",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/date-picker/DatePicker.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/date-picker/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./DatePicker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/email-field/EmailField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Email input control, used in forms for input validation and to display correct virtual keyboard on mobile.",
          "name": "EmailField",
          "cssProperties": [
            {
              "description": "Email field text align.",
              "name": "--omni-email-field-text-align"
            },
            {
              "description": "Email field font color.",
              "name": "--omni-email-field-font-color"
            },
            {
              "description": "Email field font family.",
              "name": "--omni-email-field-font-family"
            },
            {
              "description": "Email field font size.",
              "name": "--omni-email-field-font-size"
            },
            {
              "description": "Email field font weight.",
              "name": "--omni-email-field-font-weight"
            },
            {
              "description": "Email field padding.",
              "name": "--omni-email-field-padding"
            },
            {
              "description": "Email field height.",
              "name": "--omni-email-field-height"
            },
            {
              "description": "Email field width.",
              "name": "--omni-email-field-width"
            },
            {
              "description": "Email field disabled font color.",
              "name": "--omni-email-field-disabled-font-color"
            },
            {
              "description": "Email field error font color.",
              "name": "--omni-email-field-error-font-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "noNativeKeyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "attribute": "no-native-keyboard",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_blurOnEnter",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_keyInput",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "attribute": "clearable",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "focusedStatic",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "no-native-keyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "fieldName": "noNativeKeyboard",
              "attribute": "no-native-keyboard"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "fieldName": "clearable",
              "attribute": "clearable",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.js"
          },
          "tagName": "omni-email-field",
          "import": "```js\nimport '@capitec/omni-components/email-field';\n```",
          "customElement": true,
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the clear slot.",
              "name": "clear",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EmailField",
          "declaration": {
            "name": "EmailField",
            "module": "/Users/runner/work/omni-components/omni-components/src/email-field/EmailField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-email-field",
          "declaration": {
            "name": "EmailField",
            "module": "/Users/runner/work/omni-components/omni-components/src/email-field/EmailField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/email-field/EmailField.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/email-field/EmailField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`\n    <omni-email-field\n      data-testid=\"test-email-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\"\n      ?clearable=\"${args.clearable}\"\n      >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n      ${args.clear ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args.clear))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix || args.clear ? '\\r\\n' : nothing}</omni-email-field>\n  `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' clearable', ' :clearable=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        clearable: false,\n        prefix: '',\n        suffix: '',\n        clear: ''\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Clearable"
        },
        {
          "kind": "variable",
          "name": "Custom_Clear_Slot"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Clearable",
          "declaration": {
            "name": "Clearable",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Clear_Slot",
          "declaration": {
            "name": "Custom_Clear_Slot",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/email-field/EmailField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/email-field/EmailField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/email-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./EmailField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/expander/Expander.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/expander/Expander.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Layout component that groups together content in an expanded box.",
          "name": "Expander",
          "cssProperties": [
            {
              "description": "Expander component minimum height.",
              "name": "--omni-expander-header-min-height"
            },
            {
              "description": "Expander component maximum height.",
              "name": "--omni-expander-header-max-height"
            },
            {
              "description": "Expander component width.",
              "name": "--omni-expander-width"
            },
            {
              "description": "Expander component background.",
              "name": "--omni-expander-background"
            },
            {
              "description": "Expander component expanded height.",
              "name": "--omni-expander-expanded-height"
            },
            {
              "description": "Expander header width.",
              "name": "--omni-expander-header-width"
            },
            {
              "description": "Expander header height.",
              "name": "--omni-expander-header-height"
            },
            {
              "description": "Expander header padding.",
              "name": "--omni-expander-header-padding"
            },
            {
              "description": "Expander header border top.",
              "name": "--omni-expander-header-border-top"
            },
            {
              "description": "Expander header hover background.",
              "name": "--omni-expander-header-hover-background"
            },
            {
              "description": "Expander header label font color.",
              "name": "--omni-expander-header-label-font-color"
            },
            {
              "description": "Expander header label font size.",
              "name": "--omni-expander-header-label-font-size"
            },
            {
              "description": "Expander header label font weight.",
              "name": "--omni-expander-header-label-font-weight"
            },
            {
              "description": "Expander header disabled background.",
              "name": "--omni-expander-header-disabled-background"
            },
            {
              "description": "Expander content width.",
              "name": "--omni-expander-content-width"
            },
            {
              "description": "Expander content height.",
              "name": "--omni-expander-content-height"
            },
            {
              "description": " Expander content border.",
              "name": "--omni-expander-content-border"
            },
            {
              "description": "Expander content padding.",
              "name": "--omni-expander-content-padding"
            },
            {
              "description": " Expander content closed top padding.",
              "name": "--omni-expander-content-closed-padding-top"
            },
            {
              "description": "Expander content closed bottom padding.",
              "name": "--omni-expander-content-closed-padding-bottom"
            },
            {
              "description": "Expander header icon container padding.",
              "name": "--omni-expander-header-icon-container-padding"
            },
            {
              "description": "Expander header icon slot width.",
              "name": "--omni-expander-header-icon-slot-width"
            },
            {
              "description": "Expander header icon slot height.",
              "name": "--omni-expander-header-icon-slot-height"
            },
            {
              "description": "Expander expand icon container padding.",
              "name": "--omni-expander-expand-icon-container-padding"
            },
            {
              "description": "Expander expand icon width.",
              "name": "--omni-expander-expand-icon-width"
            },
            {
              "description": "Expander expand icon height.",
              "name": "--omni-expander-expand-icon-height"
            },
            {
              "description": "Expander expand icon color.",
              "name": "--omni-expander-expand-icon-color"
            },
            {
              "description": "Expander expanding content top padding.",
              "name": "--omni-expander-expanding-container-padding-top"
            },
            {
              "description": "Expander expanding content bottom padding.",
              "name": "--omni-expander-expanding-container-padding-bottom"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside the expander once expanded.",
              "name": "[Default Slot]"
            },
            {
              "description": "Replaces the expand icon by default this will be the omni-chevron-down-icon.",
              "name": "expand-icon"
            },
            {
              "description": "Replaces the icon in the header which is usually placed on the opposite end of the expand icon.",
              "name": "header-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Expander component label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the expander is expanded.",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the expander is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "buttonAlignment",
              "type": {
                "text": "'left' | 'right'"
              },
              "default": "'right'",
              "description": "Indicate where the Expander button should be positioned",
              "attribute": "button-alignment",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_headerClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_animationCompleted",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_expand",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_collapse",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderIcon",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "expand",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "collapse",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Expander component label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the expander is expanded.",
              "fieldName": "expanded",
              "attribute": "expanded"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the expander is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "button-alignment",
              "type": {
                "text": "'left' | 'right'"
              },
              "default": "'right'",
              "description": "Indicate where the Expander button should be positioned",
              "fieldName": "buttonAlignment",
              "attribute": "button-alignment"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-expander",
          "import": "```js\nimport '@capitec/omni-components/expander';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Expander",
          "declaration": {
            "name": "Expander",
            "module": "/Users/runner/work/omni-components/omni-components/src/expander/Expander.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-expander",
          "declaration": {
            "name": "Expander",
            "module": "/Users/runner/work/omni-components/omni-components/src/expander/Expander.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/expander/ExpanderGroup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Layout container that groups expanders, allowing for automatic expanding and collapsing of sibling expander components.",
          "name": "ExpanderGroup",
          "cssProperties": [
            {
              "description": "Expander group min width.",
              "name": "--omni-expander-group-container-min-width"
            },
            {
              "description": "Expander group min height.",
              "name": "--omni-expander-group-container-min-height"
            },
            {
              "description": "Expander group container margin bottom.",
              "name": "--omni-expander-group-container-margin-bottom"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Default slot to slot multiple expanders.",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "expandMode",
              "type": {
                "text": "'multiple' | 'single' | undefined"
              },
              "default": "'single'",
              "description": "Expander component label.",
              "attribute": "expand-mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_observer",
              "type": {
                "text": "MutationObserver | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_collapseAllExpanders",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_expanderExpanded",
              "parameters": [
                {
                  "name": "targetExpander",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "expand-mode",
              "type": {
                "text": "'multiple' | 'single' | undefined"
              },
              "default": "'single'",
              "description": "Expander component label.",
              "fieldName": "expandMode",
              "attribute": "expand-mode"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-expander-group",
          "import": "```js\nimport '@capitec/omni-components/expander';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ExpanderGroup",
          "declaration": {
            "name": "ExpanderGroup",
            "module": "/Users/runner/work/omni-components/omni-components/src/expander/ExpanderGroup.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-expander-group",
          "declaration": {
            "name": "ExpanderGroup",
            "module": "/Users/runner/work/omni-components/omni-components/src/expander/ExpanderGroup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/expander/Expander.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-expander\n        data-testid=\"test-expander\"\n        label=\"${ifNotEmpty(args.label)}\"\n        ?disabled=\"${args.disabled}\"\n        ?expanded=\"${args.expanded}\"\n        button-alignment=\"${args.buttonAlignment}\"\n    >\n        ${args.expand_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('expand-icon', args.expand_icon))}` : nothing}\n        ${args.header_icon ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('header-icon', args.header_icon))}` : nothing}\n        ${args['[Default Slot]'] ? html`${'\\r\\n'}${unsafeHTML(args['[Default Slot]'])}` : nothing}\n    </omni-expander>\n    `,\n    name: 'Interactive',\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' expanded', ' :expanded=\"true\"')\n                )\n        }\n    ],\n    args: {\n        label: 'Interactive Expander',\n        '[Default Slot]': raw`<omni-label label=\"The content of the expander\"></omni-label>`,\n        disabled: false,\n        expanded: false,\n        buttonAlignment: 'right',\n        expand_icon: '',\n        header_icon: ''\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-expander\n        data-testid=\"test-expander\"\n        label=\"${ifNotEmpty(args.label)}\"\n        ?disabled=\"${args.disabled}\"\n    >\n        <omni-label label=\"I shall not be seen\"></omni-label>\n    </omni-expander>\n    `,\n    name: 'Disabled',\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) => getSourceFromLit(Disabled!.render!(args), undefined, (s) => s.replace(' disabled', ' :disabled=\"true\"'))\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniExpander } from \"@capitec/omni-components-react/expander\";\nimport { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () => \n<OmniExpander ${args.label ? ` label='${args.label}'` : ''} ${args.disabled ? ` disabled='${args.disabled}'` : ''}>\n    <OmniLabel label=\"I shall not be seen\"></OmniLabel>\n</OmniExpander>;`\n        }\n    ],\n    description: 'Prevent interaction (expanding/collapsing).',\n    args: {\n        label: 'Disabled expander',\n        disabled: true\n    }\n}",
          "description": "Prevent interaction (expanding/collapsing)."
        },
        {
          "kind": "variable",
          "name": "Button_Alignment",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-expander \n        data-testid=\"test-expander\"\n        label=\"${ifNotEmpty(args.label)}\"\n        button-alignment=\"${args.buttonAlignment}\"\n    >\n        <omni-label label='The content of the expander'></omni-label>\n    </omni-expander>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniExpander } from \"@capitec/omni-components-react/expander\";\nimport { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () => \n<OmniExpander ${args.label ? ` label='${args.label}'` : ''} ${args.buttonAlignment ? ` button-alignment='${args.buttonAlignment}'` : ''}>\n    <OmniLabel label=\"The content of the expander\"></OmniLabel>\n</OmniExpander>;`\n        }\n    ],\n    name: 'Button Alignment',\n    description: 'Toggle where the expand button should be oriented.',\n    args: {\n        label: 'Left aligned button',\n        buttonAlignment: 'left'\n    }\n}",
          "description": "Toggle where the expand button should be oriented."
        },
        {
          "kind": "variable",
          "name": "Expanded",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-expander\n        data-testid=\"test-expander\"\n        label=\"${ifNotEmpty(args.label)}\"\n        expanded=\"${args.expanded}\"   \n    >\n        <omni-label label=\"The content of the expander\"></omni-label>\n    </omni-expander>\n    `,\n    name: 'Expanded',\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) => getSourceFromLit(Expanded!.render!(args), undefined, (s) => s.replace(' expanded', ' :expanded=\"true\"'))\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniExpander } from \"@capitec/omni-components-react/expander\";\nimport { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () => \n<OmniExpander ${args.label ? ` label='${args.label}'` : ''} ${args.expanded ? ` expanded='${args.expanded}'` : ''}>\n    <OmniLabel label=\"The content of the expander\"></OmniLabel>\n</OmniExpander>;`\n        }\n    ],\n    description: 'Toggle expander expanded state',\n    args: {\n        label: 'Expanded expander state',\n        expanded: true\n    }\n}",
          "description": "Toggle expander expanded state"
        },
        {
          "kind": "variable",
          "name": "Expand_Icon",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-expander data-testid=\"test-expander\" label=\"${ifNotEmpty(args.label)}\">\n        ${unsafeHTML(args.expand_icon)}\n        <omni-label label=\"The content of the expander\"></omni-label>\n    </omni-expander>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniExpander } from \"@capitec/omni-components-react/expander\";\nimport { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () =>\n<OmniExpander${args.label ? ` label='${args.label}'` : ''}>\n    <svg slot=\"expand-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\"><path d=\"m7.446 6.397.084.073L13 11.939l5.47-5.47a.75.75 0 0 1 1.133.977l-.073.084L14.061 13l5.47 5.47a.75.75 0 0 1-.977 1.133l-.084-.073L13 14.061l-5.47 5.47a.75.75 0 0 1-1.133-.977l.073-.084L11.939 13l-5.47-5.47a.75.75 0 0 1 .977-1.133Z\"/></svg>\n    <OmniLabel label=\"The content of the expander\"></OmniLabel>\n</OmniExpander>;`\n        }\n    ],\n    name: 'Slotted Expand Icon',\n    description: 'Custom slotted expand icon',\n    args: {\n        label: 'Slotted Expand Icon',\n        expand_icon: raw`<svg slot=\"expand-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\"><path d=\"m7.446 6.397.084.073L13 11.939l5.47-5.47a.75.75 0 0 1 1.133.977l-.073.084L14.061 13l5.47 5.47a.75.75 0 0 1-.977 1.133l-.084-.073L13 14.061l-5.47 5.47a.75.75 0 0 1-1.133-.977l.073-.084L11.939 13l-5.47-5.47a.75.75 0 0 1 .977-1.133Z\"/></svg>`\n    }\n}",
          "description": "Custom slotted expand icon"
        },
        {
          "kind": "variable",
          "name": "Header_Icon",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-expander data-testid=\"test-expander\" label=\"${ifNotEmpty(args.label)}\">\n        ${unsafeHTML(args.header_icon)}       \n        <omni-label label=\"The content of the expander\"></omni-label>\n    </omni-expander>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniExpander } from \"@capitec/omni-components-react/expander\";\nimport { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () => \n<OmniExpander${args.label ? ` label='${args.label}'` : ''}>\n    <svg slot=\"header-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"><path d=\"m7.446 6.397.084.073L13 11.939l5.47-5.47a.75.75 0 0 1 1.133.977l-.073.084L14.061 13l5.47 5.47a.75.75 0 0 1-.977 1.133l-.084-.073L13 14.061l-5.47 5.47a.75.75 0 0 1-1.133-.977l.073-.084L11.939 13l-5.47-5.47a.75.75 0 0 1 .977-1.133Z\"/></svg>\n    <OmniLabel label=\"The content of the expander\"></OmniLabel>\n</OmniExpander>;`\n        }\n    ],\n    name: 'Slotted Header Icon',\n    description: 'Custom slotted header icon',\n    args: {\n        label: 'Slotted Header Icon',\n        header_icon: raw`<svg slot=\"header-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\"><path d=\"m7.446 6.397.084.073L13 11.939l5.47-5.47a.75.75 0 0 1 1.133.977l-.073.084L14.061 13l5.47 5.47a.75.75 0 0 1-.977 1.133l-.084-.073L13 14.061l-5.47 5.47a.75.75 0 0 1-1.133-.977l.073-.084L11.939 13l-5.47-5.47a.75.75 0 0 1 .977-1.133Z\"/></svg>`\n    }\n}",
          "description": "Custom slotted header icon"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/expander/Expander.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/expander/Expander.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Button_Alignment",
          "declaration": {
            "name": "Button_Alignment",
            "module": "src/expander/Expander.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Expanded",
          "declaration": {
            "name": "Expanded",
            "module": "src/expander/Expander.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Expand_Icon",
          "declaration": {
            "name": "Expand_Icon",
            "module": "src/expander/Expander.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Header_Icon",
          "declaration": {
            "name": "Header_Icon",
            "module": "src/expander/Expander.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/expander/ExpanderGroup.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/expander/ExpanderGroup.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-expander-group\n        data-testid=\"test-expander-group\"\n        expand-mode=\"${args.expandMode}\"\n    >\n        ${args['[Default Slot]'] ? html`${'\\r\\n'}${unsafeHTML(args['[Default Slot]'])}` : nothing}\n    </omni-expander-group>\n    `,\n    name: 'Interactive',\n    description: () => html`<p>\n    The <code class=\"language-html\">&lt;omni-expander-group&gt;</code> should be used if grouping multiple <code class=\"language-html\">&lt;omni-expander&gt;</code> components together. \n    </p>`,\n    args: {\n        expandMode: 'single',\n        '[Default Slot]': raw`<omni-expander label=\"First Expander\">\n            <omni-label label=\"First expander content\"></omni-label>\n        </omni-expander>\n        <omni-expander label=\"Second Expander\">\n            <omni-label label=\"Second expander content\"></omni-label>\n        </omni-expander>`\n    }\n}",
          "description": "<p>\n    The <code class=\"language-html\">&lt;omni-expander-group&gt;</code> should be used if grouping multiple <code class=\"language-html\">&lt;omni-expander&gt;</code> components together. \n    </p>"
        },
        {
          "kind": "variable",
          "name": "Expand_Mode",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-expander-group\n    data-testid=\"test-expander-group\"\n    expand-mode=\"${args.expandMode}\"\n    >\n        ${args['[Default Slot]'] ? html`${'\\r\\n'}${unsafeHTML(args['[Default Slot]'])}` : nothing}\n    </omni-expander-group>\n    `,\n    name: 'Expand Mode',\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniExpanderGroup, OmniExpander } from \"@capitec/omni-components-react/expander\";\n            import { OmniLabel } from \"@capitec/omni-components-react/label\";\n        \nconst App = () => \n<OmniExpanderGroup ${args.expandMode ? ` expand-mode='${args.expandMode}'` : ''}>\n    <OmniExpander label=\"First Expander\">\n        <OmniLabel label=\"First expander content\"></OmniLabel>\n    </OmniExpander>\n    <OmniExpander label=\"Second Expander\">\n        <OmniLabel label=\"Second expander content\"></OmniLabel>\n    </OmniExpander>\n</OmniExpanderGroup>;`\n        }\n    ],\n    description: () => html`<p>\n    The <code class=\"language-html\">&lt;omni-expander-group&gt;</code> opens one <code class=\"language-html\">&lt;omni-expander&gt;</code> by default, to expand mutiple set the attribute <code class=\"language-js\">expand-mode=\"multiple\"</code>. \n    </p>`,\n    args: {\n        expandMode: 'multiple',\n        '[Default Slot]': raw`<omni-expander label=\"First Expander\">\n            <omni-label label=\"First expander content\"></omni-label>\n        </omni-expander>\n        <omni-expander label=\"Second Expander\">\n            <omni-label label=\"Second expander content\"></omni-label>\n        </omni-expander>`\n    }\n}",
          "description": "<p>\n    The <code class=\"language-html\">&lt;omni-expander-group&gt;</code> opens one <code class=\"language-html\">&lt;omni-expander&gt;</code> by default, to expand mutiple set the attribute <code class=\"language-js\">expand-mode=\"multiple\"</code>. \n    </p>"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/expander/ExpanderGroup.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Expand_Mode",
          "declaration": {
            "name": "Expand_Mode",
            "module": "src/expander/ExpanderGroup.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/expander/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Expander.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./ExpanderGroup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/hyperlink/Hyperlink.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/hyperlink/Hyperlink.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to indicate an action to be executed. Typically used for navigational purposes.",
          "name": "Hyperlink",
          "cssProperties": [
            {
              "description": "Hyperlink disabled color.",
              "name": "--omni-hyperlink-color-disabled"
            },
            {
              "description": "Hyperlink font size.",
              "name": "--omni-hyperlink-font-size"
            },
            {
              "description": "Hyperlink font weight.",
              "name": "--omni-hyperlink-font-family"
            },
            {
              "description": "Hyperlink font weight.",
              "name": "--omni-hyperlink-font-weight"
            },
            {
              "description": "Hyperlink color.",
              "name": "--omni-hyperlink-color"
            },
            {
              "description": "Hyperlink text decorator",
              "name": "--omni-hyperlink-text-decorator"
            },
            {
              "description": "Hyperlink small font size variation",
              "name": "--omni-hyperlink-font-size-small"
            },
            {
              "description": "Hyperlink small font family variation",
              "name": "--omni-hyperlink-font-family-small"
            },
            {
              "description": "Hyperlink small font weight",
              "name": "--omni-hyperlink-font-weight-small"
            },
            {
              "description": "Hyperlink color when in an active state.",
              "name": "--omni-hyperlink-color-active"
            },
            {
              "description": "Hyperlink text decorator in active state.",
              "name": "--omni-hyperlink-text-decorator-active"
            },
            {
              "description": "Hyperlink text decorator when in hover state.",
              "name": "--omni-hyperlink-text-decorator-hover"
            },
            {
              "description": "Hyperlink color when visited",
              "name": "--omni-hyperlink-color-visited"
            },
            {
              "description": "Hyperlink text decorator when visited.",
              "name": "--omni-hyperlink-text-decorator-visited"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside the component. Registry of all properties defined by the component.",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "URL to link to.",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top'"
              },
              "default": "'_self'",
              "description": "Where to load the URL specified in \"href\"",
              "attribute": "target",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the link is used as part of a sentence.",
              "attribute": "inline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string | undefined"
              },
              "description": "Size of the Hyperlink text.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_click",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "URL to link to.",
              "fieldName": "href",
              "attribute": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top'"
              },
              "default": "'_self'",
              "description": "Where to load the URL specified in \"href\"",
              "fieldName": "target",
              "attribute": "target"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the link is used as part of a sentence.",
              "fieldName": "inline",
              "attribute": "inline"
            },
            {
              "name": "size",
              "type": {
                "text": "string | undefined"
              },
              "description": "Size of the Hyperlink text.",
              "fieldName": "size",
              "attribute": "size"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-hyperlink",
          "import": "```js\nimport '@capitec/omni-components/hyperlink';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Hyperlink",
          "declaration": {
            "name": "Hyperlink",
            "module": "/Users/runner/work/omni-components/omni-components/src/hyperlink/Hyperlink.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-hyperlink",
          "declaration": {
            "name": "Hyperlink",
            "module": "/Users/runner/work/omni-components/omni-components/src/hyperlink/Hyperlink.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/hyperlink/Hyperlink.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-hyperlink\n      data-testid=\"test-hyperlink\"\n      label=\"${ifNotEmpty(args.label)}\"\n      href=\"${ifNotEmpty(args.href)}\"\n      target=\"${ifNotEmpty(args.target)}\"\n      ?disabled=\"${args.disabled}\"\n      ?inline=\"${args.inline}\"\n      size=\"${args.size}\">\n      ${unsafeHTML(args['[Default Slot]'])}\n    </omni-hyperlink>\n  `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' inline', ' :inline=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Click',\n        href: '',\n        disabled: false,\n        inline: false,\n        size: '',\n        '[Default Slot]': undefined\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`<omni-hyperlink data-testid=\"test-hyperlink\" label=\"${args.label}\"></omni-hyperlink>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniHyperlink } from \"@capitec/omni-components-react/hyperlink\";\n\nconst App = () => <OmniHyperlink${args.label ? ` label='${args.label}'` : ''}/>;`\n        }\n    ],\n    name: 'Label',\n    description: 'Set the text content of the component.',\n    args: {\n        label: 'Click'\n    }\n}",
          "description": "Set the text content of the component."
        },
        {
          "kind": "variable",
          "name": "Size",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`<omni-hyperlink data-testid=\"test-hyperlink\" label=\"${args.label}\" size=\"${args.size}\"></omni-hyperlink>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniHyperlink } from \"@capitec/omni-components-react/hyperlink\";\n\nconst App = () => <OmniHyperlink${args.label ? ` label='${args.label}'` : ''}${args.size ? ` size='${args.size}'` : ''}/>;`\n        }\n    ],\n    name: 'Size',\n    description: 'Set the component to a predefined size.',\n    args: {\n        label: 'Click',\n        size: 'small'\n    }\n}",
          "description": "Set the component to a predefined size."
        },
        {
          "kind": "variable",
          "name": "Href",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) =>\n        html`<omni-hyperlink data-testid=\"test-hyperlink\" label=\"${args.label}\" href=\"${args.href}\" target=\"_blank\"></omni-hyperlink>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniHyperlink } from \"@capitec/omni-components-react/hyperlink\";\n\nconst App = () => <OmniHyperlink${args.label ? ` label='${args.label}'` : ''}${args.href ? ` href='${args.href}'` : ''} target=\"_blank\"/>;`\n        }\n    ],\n    name: 'Href',\n    description: 'Set the hypertext reference.',\n    args: {\n        label: 'Click',\n        href: 'https://example.com'\n    }\n}",
          "description": "Set the hypertext reference."
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) =>\n        html`<omni-hyperlink\n      data-testid=\"test-hyperlink\"\n      href=\"https://example.com\"\n      label=\"${args.label}\"\n      ?disabled=\"${args.disabled}\"></omni-hyperlink>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniHyperlink } from \"@capitec/omni-components-react/hyperlink\";\n\nconst App = () => <OmniHyperlink href=\"https://example.com\"${args.label ? ` label='${args.label}'` : ''}${args.disabled ? ` disabled` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' inline', ' :inline=\"true\"')\n                )\n        }\n    ],\n    name: 'Disabled',\n    description: 'Prevent interaction (pointer events).',\n    args: {\n        label: 'Click',\n        disabled: true\n    }\n}",
          "description": "Prevent interaction (pointer events)."
        },
        {
          "kind": "variable",
          "name": "Inline",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) =>\n        html`<p data-testid=\"test-paragraph\"> Inline <omni-hyperlink label=\"${args.label}\" ?inline=\"${args.inline}\"></omni-hyperlink> example </p>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniHyperlink } from \"@capitec/omni-components-react/hyperlink\";\n\nconst App = () => <p> Inline <OmniHyperlink${args.label ? ` label='${args.label}'` : ''}${args.inline ? ` inline` : ''}/> example </p>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Inline!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' inline', ' :inline=\"true\"')\n                )\n        }\n    ],\n    name: 'Inline',\n    description: 'Render the component using its inline styles.',\n    args: {\n        label: 'click',\n        inline: true\n    }\n}",
          "description": "Render the component using its inline styles."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Size",
          "declaration": {
            "name": "Size",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Href",
          "declaration": {
            "name": "Href",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inline",
          "declaration": {
            "name": "Inline",
            "module": "src/hyperlink/Hyperlink.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/hyperlink/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Hyperlink.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icon/Icon.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/icon/Icon.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <!-- Icons loaded by content path instead of font-based or slotted content will not be able to be styled directly -->\n        <omni-icon \n            data-testid=\"test-icon\" \n            size=\"${ifNotEmpty(args.size)}\" \n            icon=\"${ifNotEmpty(args.icon)}\"\n            ?symmetrical=${args.symmetrical}>\n            ${unsafeHTML(args['[Default Slot]'])}\n        </omni-icon>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) => getSourceFromLit(Interactive!.render!(args), undefined, (s) => s.replace(' symmetrical', ' :symmetrical=\"true\"'))\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        size: 'default',\n        '[Default Slot]': raw`<svg\n    version=\"1.1\"\n    viewBox=\"0 0 16 16\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100%\"\n    height=\"100%\">\n    <g transform=\"translate(-2,-2)\">\n        <path d=\"m8.229 14.062-3.521-3.541L5.75 9.479l2.479 2.459 6.021-6L15.292 7Z\" />\n    </g>\n</svg>`,\n        icon: undefined as unknown as string\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "SVG",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`<omni-icon data-testid=\"test-icon\" size=\"${args.size}\">${unsafeHTML(args['[Default Slot]'])}</omni-icon>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniIcon } from \"@capitec/omni-components-react/icon\";\n\nconst App = () => <OmniIcon${args.size ? ` size='${args.size}'` : ''}${args.symmetrical ? ` symmetrical` : ''}>\n                    <svg\n                        version=\"1.1\"\n                        viewBox=\"0 0 16 16\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"100%\"\n                        height=\"100%\">\n                        <g transform=\"translate(-2,-2)\">\n                            <path d=\"m8.229 14.062-3.521-3.541L5.75 9.479l2.479 2.459 6.021-6L15.292 7Z\" />\n                        </g>\n                    </svg>\n                  </OmniIcon>;`\n        }\n    ],\n    name: 'SVG',\n    description: 'Set html/svg content to display as an icon.',\n    args: {\n        size: 'large',\n        '[Default Slot]': raw`\n            <svg\n                version=\"1.1\"\n                viewBox=\"0 0 16 16\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"100%\"\n                height=\"100%\">\n                <g transform=\"translate(-2,-2)\">\n                  <path d=\"m8.229 14.062-3.521-3.541L5.75 9.479l2.479 2.459 6.021-6L15.292 7Z\" />\n                </g>\n              </svg>\n        `\n    }\n}",
          "description": "Set html/svg content to display as an icon."
        },
        {
          "kind": "variable",
          "name": "Local_Source",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <!-- Icons loaded by content path instead of font-based or slotted content will not be able to be styled directly -->\n\n    <omni-icon data-testid=\"test-icon\" size=\"${args.size}\" icon=\"${args.icon}\"></omni-icon>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniIcon } from \"@capitec/omni-components-react/icon\";\n            \n/*\n    Icons loaded by content path instead of font-based or slotted content will not be able to be styled directly\n*/\nconst App = () => <OmniIcon${args.size ? ` size='${args.size}'` : ''}${args.icon ? ` icon='${args.icon}'` : ''}${\n                args.symmetrical ? ` symmetrical` : ''\n            }/>;`,\n            disableCodePen: true\n        },\n        {\n            framework: 'HTML',\n            disableCodePen: true\n        }\n    ],\n    name: 'Local Source',\n    description: 'Set the icon to display as a local source file.',\n    args: {\n        size: 'default',\n        icon: './assets/images/colors.svg'\n    }\n}",
          "description": "Set the icon to display as a local source file."
        },
        {
          "kind": "variable",
          "name": "Remote_Source",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <!-- Icons loaded by content path instead of font-based or slotted content will not be able to be styled directly -->\n\n    <omni-icon data-testid=\"test-icon\" size=\"${args.size}\" icon=\"${args.icon}\"></omni-icon>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniIcon } from \"@capitec/omni-components-react/icon\";\n            \n/*\n    Icons loaded by content path instead of font-based or slotted content will not be able to be styled directly\n*/\nconst App = () => <OmniIcon${args.size ? ` size='${args.size}'` : ''}${args.icon ? ` icon='${args.icon}'` : ''}${\n                args.symmetrical ? ` symmetrical` : ''\n            }/>;`\n        }\n    ],\n    name: 'Remote Source',\n    description: 'Set the icon to display as a remote file.',\n    args: {\n        size: 'default',\n        icon: 'https://img.shields.io/badge/Source-remote-lightgrey.svg'\n    }\n}",
          "description": "Set the icon to display as a remote file."
        },
        {
          "kind": "variable",
          "name": "Material",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <!-- Add Material to your project, e.g. Adding below link in <head>-->\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\" />\n    <!-- ------------------------------------------------------------- -->\n\n    <omni-icon data-testid=\"test-icon\" size=\"${args.size}\" icon=\"${args.icon}\"></omni-icon>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniIcon } from \"@capitec/omni-components-react/icon\";\n\n/*\n<!-- Add Material to your project, e.g. Adding below link in <head>-->\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\" />\n<!-- ------------------------------------------------------------- -->\n*/\nconst App = () => <OmniIcon${args.size ? ` size='${args.size}'` : ''}${args.icon ? ` icon='${args.icon}'` : ''}${\n                args.symmetrical ? ` symmetrical` : ''\n            }/>;`\n        }\n    ],\n    description: 'Set the icon to display as a font icon from the Material Icons library.',\n    args: {\n        size: 'default',\n        icon: '@material/receipt_long'\n    }\n}",
          "description": "Set the icon to display as a font icon from the Material Icons library."
        },
        {
          "kind": "variable",
          "name": "Asymmetrical",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-icon \n            data-testid=\"test-icon\" \n            size=\"${args.size}\" \n            ?symmetrical=${args.symmetrical}>\n            <svg \n                viewBox=\"0 0 138 26\" \n                fill=\"none\" \n                stroke=\"var(--omni-icon-fill, currentColor)\"\n                stroke-width=\"2.3\" \n                stroke-linecap=\"round\" \n                stroke-linejoin=\"round\"\n                width=\"100%\"\n                height=\"100%\"\n                title=\"CodePen\">\n                    <path d=\"M15 8a7 7 0 1 0 0 10m7-8.7L33 2l11 7.3v7.4L33 24l-11-7.3zm0 0 11 7.4 11-7.4m0 7.4L33 9.3l-11 7.4M33 2v7.3m0 7.4V24M52 6h5a7 7 0 0 1 0 14h-5zm28 0h-9v14h9m-9-7h6m11 1h6a4 4 0 0 0 0-8h-6v14m26-14h-9v14h9m-9-7h6m11 7V6l11 14V6\"></path>\n                </svg>\n        </omni-icon>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniIcon } from \"@capitec/omni-components-react/icon\";\n\nconst App = () => <OmniIcon${args.size ? ` size='${args.size}'` : ''}${args.symmetrical ? ` symmetrical` : ''}>\n                    <svg \n                        viewBox=\"0 0 138 26\" \n                        fill=\"none\" \n                        stroke=\"var(--omni-icon-fill, currentColor)\"\n                        stroke-width=\"2.3\" \n                        stroke-linecap=\"round\" \n                        stroke-linejoin=\"round\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        title=\"CodePen\">\n                            <path d=\"M15 8a7 7 0 1 0 0 10m7-8.7L33 2l11 7.3v7.4L33 24l-11-7.3zm0 0 11 7.4 11-7.4m0 7.4L33 9.3l-11 7.4M33 2v7.3m0 7.4V24M52 6h5a7 7 0 0 1 0 14h-5zm28 0h-9v14h9m-9-7h6m11 1h6a4 4 0 0 0 0-8h-6v14m26-14h-9v14h9m-9-7h6m11 7V6l11 14V6\"></path>\n                    </svg>\n                  </OmniIcon>;`\n        }\n    ],\n    description: () =>\n        html`Renders the icon by aligning only the inner height to the <code class=\"language-javascript\">'size'</code> attribute, this is the default behavior.`,\n    args: {\n        size: 'large',\n        symmetrical: false\n    }\n}",
          "description": "() =>\n        htmlRenders the icon by aligning only the inner height to the <code class=\"language-javascript\">'size'</code> attribute, this is the default behavior."
        },
        {
          "kind": "variable",
          "name": "Symmetrical",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-icon \n            data-testid=\"test-icon\" \n            size=\"${args.size}\" \n            ?symmetrical=${args.symmetrical}>\n            <svg \n                viewBox=\"0 0 138 26\" \n                fill=\"none\" \n                stroke=\"var(--omni-icon-fill, currentColor)\"\n                stroke-width=\"2.3\" \n                stroke-linecap=\"round\" \n                stroke-linejoin=\"round\"\n                width=\"100%\"\n                height=\"100%\"\n                title=\"CodePen\">\n                    <path d=\"M15 8a7 7 0 1 0 0 10m7-8.7L33 2l11 7.3v7.4L33 24l-11-7.3zm0 0 11 7.4 11-7.4m0 7.4L33 9.3l-11 7.4M33 2v7.3m0 7.4V24M52 6h5a7 7 0 0 1 0 14h-5zm28 0h-9v14h9m-9-7h6m11 1h6a4 4 0 0 0 0-8h-6v14m26-14h-9v14h9m-9-7h6m11 7V6l11 14V6\"></path>\n                </svg>\n        </omni-icon>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniIcon } from \"@capitec/omni-components-react/icon\";\n\nconst App = () => <OmniIcon${args.size ? ` size='${args.size}'` : ''}${args.symmetrical ? ` symmetrical` : ''}>\n                    <svg \n                        viewBox=\"0 0 138 26\" \n                        fill=\"none\" \n                        stroke=\"var(--omni-icon-fill, currentColor)\"\n                        stroke-width=\"2.3\" \n                        stroke-linecap=\"round\" \n                        stroke-linejoin=\"round\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        title=\"CodePen\">\n                            <path d=\"M15 8a7 7 0 1 0 0 10m7-8.7L33 2l11 7.3v7.4L33 24l-11-7.3zm0 0 11 7.4 11-7.4m0 7.4L33 9.3l-11 7.4M33 2v7.3m0 7.4V24M52 6h5a7 7 0 0 1 0 14h-5zm28 0h-9v14h9m-9-7h6m11 1h6a4 4 0 0 0 0-8h-6v14m26-14h-9v14h9m-9-7h6m11 7V6l11 14V6\"></path>\n                    </svg>\n                  </OmniIcon>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) => getSourceFromLit(Symmetrical!.render!(args), undefined, (s) => s.replace(' symmetrical', ' :symmetrical=\"true\"'))\n        }\n    ],\n    description: () =>\n        html`Renders the icon by aligning both the inner height and width to the <code class=\"language-javascript\">'size'</code> attribute, creating a 1:1 aspect ratio.`,\n    args: {\n        size: 'large',\n        symmetrical: true\n    },\n    play: async (context) => {\n        const icon = within(context.canvasElement).getByTestId<Icon>('test-icon');\n        const svg = icon.querySelector('svg') as SVGElement;\n        await expect(svg.clientWidth).toEqual(svg.clientHeight);\n    }\n}",
          "description": "() =>\n        htmlRenders the icon by aligning both the inner height and width to the <code class=\"language-javascript\">'size'</code> attribute, creating a 1:1 aspect ratio."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SVG",
          "declaration": {
            "name": "SVG",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Local_Source",
          "declaration": {
            "name": "Local_Source",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Remote_Source",
          "declaration": {
            "name": "Remote_Source",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Material",
          "declaration": {
            "name": "Material",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Asymmetrical",
          "declaration": {
            "name": "Asymmetrical",
            "module": "src/icon/Icon.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Symmetrical",
          "declaration": {
            "name": "Symmetrical",
            "module": "src/icon/Icon.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icon/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/EyeHidden.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Hidden eye icon component",
          "name": "EyeHiddenIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-eye-hidden-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/EyeHidden.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EyeHiddenIcon",
          "declaration": {
            "name": "EyeHiddenIcon",
            "module": "src/icons/EyeHidden.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-eye-hidden-icon",
          "declaration": {
            "name": "EyeHiddenIcon",
            "module": "src/icons/EyeHidden.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/EyeVisible.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Visible eye icon component.",
          "name": "EyeVisibleIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-eye-visible-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/EyeVisible.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EyeVisibleIcon",
          "declaration": {
            "name": "EyeVisibleIcon",
            "module": "src/icons/EyeVisible.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-eye-visible-icon",
          "declaration": {
            "name": "EyeVisibleIcon",
            "module": "src/icons/EyeVisible.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/LockClosed.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Closed lock icon component.",
          "name": "LockClosedIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-lock-closed-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/LockClosed.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LockClosedIcon",
          "declaration": {
            "name": "LockClosedIcon",
            "module": "src/icons/LockClosed.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-lock-closed-icon",
          "declaration": {
            "name": "LockClosedIcon",
            "module": "src/icons/LockClosed.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/LockOpen.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Open lock icon component.",
          "name": "LockOpenIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-lock-open-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/LockOpen.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LockOpenIcon",
          "declaration": {
            "name": "LockOpenIcon",
            "module": "src/icons/LockOpen.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-lock-open-icon",
          "declaration": {
            "name": "LockOpenIcon",
            "module": "src/icons/LockOpen.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Minus.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Minus icon component.",
          "name": "MinusIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-minus-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Minus.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MinusIcon",
          "declaration": {
            "name": "MinusIcon",
            "module": "src/icons/Minus.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-minus-icon",
          "declaration": {
            "name": "MinusIcon",
            "module": "src/icons/Minus.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/Plus.icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Plus icon component.",
          "name": "PlusIcon",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "inheritedFrom": {
                "name": "DOMTreeElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/DOMTreeElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "DOMTreeElement",
            "module": "/src/core/DOMTreeElement.js"
          },
          "tagName": "omni-plus-icon",
          "import": "```js\nimport '@capitec/omni-components/icons/Plus.icon.js';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PlusIcon",
          "declaration": {
            "name": "PlusIcon",
            "module": "src/icons/Plus.icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-plus-icon",
          "declaration": {
            "name": "PlusIcon",
            "module": "src/icons/Plus.icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./ArrowRight.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Backspace.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Calendar.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./CapsOff.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./CapsOn.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./CapsLock.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Check.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./ChevronDown.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./ChevronLeft.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./ChevronRight.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Clear.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Close.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./EyeHidden.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./EyeVisible.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Indeterminate.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Loading.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./LockClosed.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./LockOpen.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Minus.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./More.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Next.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Plus.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Previous.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Search.icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Send.icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/keyboard/Keyboard.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/number-field/NumberField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Input control to enter a single line of numbers.",
          "name": "NumberField",
          "cssProperties": [
            {
              "description": "Number field text align.",
              "name": "--omni-number-field-text-align"
            },
            {
              "description": "Number field font color.",
              "name": "--omni-number-field-font-color"
            },
            {
              "description": "Number field font family.",
              "name": "--omni-number-field-font-family"
            },
            {
              "description": "Number field font size.",
              "name": "--omni-number-field-font-size"
            },
            {
              "description": "Number field font weight.",
              "name": "--omni-number-field-font-weight"
            },
            {
              "description": "Number field padding.",
              "name": "--omni-number-field-padding"
            },
            {
              "description": "Number field height.",
              "name": "--omni-number-field-height"
            },
            {
              "description": "Number field width.",
              "name": "--omni-number-field-width"
            },
            {
              "description": "Number field disabled font color.",
              "name": "--omni-number-field-disabled-font-color"
            },
            {
              "description": "Number field error font color.",
              "name": "--omni-number-field-error-font-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "noNativeKeyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "attribute": "no-native-keyboard",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyDown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_keyInput",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "attribute": "clearable",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "focusedStatic",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "no-native-keyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "fieldName": "noNativeKeyboard",
              "attribute": "no-native-keyboard"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Value entered into the form component.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "fieldName": "clearable",
              "attribute": "clearable",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.js"
          },
          "tagName": "omni-number-field",
          "import": "```js\nimport '@capitec/omni-components/number-field';\n```",
          "customElement": true,
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the clear slot.",
              "name": "clear",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NumberField",
          "declaration": {
            "name": "NumberField",
            "module": "/Users/runner/work/omni-components/omni-components/src/number-field/NumberField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-number-field",
          "declaration": {
            "name": "NumberField",
            "module": "/Users/runner/work/omni-components/omni-components/src/number-field/NumberField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/number-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./NumberField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/password-field/PasswordField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Password input control.",
          "name": "PasswordField",
          "cssProperties": [
            {
              "description": "Password field control padding right.",
              "name": "--omni-password-field-control-padding-right"
            },
            {
              "description": "Password field control padding left.",
              "name": "--omni-password-field-control-padding-left"
            },
            {
              "description": "Password field control padding top.",
              "name": "--omni-password-field-control-padding-top"
            },
            {
              "description": "Password field control padding bottom.",
              "name": "--omni-password-field-control-padding-bottom"
            },
            {
              "description": "Password field slot icon color.",
              "name": "--omni-password-field-icon-color"
            },
            {
              "description": "Password field slot width.",
              "name": "--omni-password-field-icon-width"
            },
            {
              "description": "Password field slot height.",
              "name": "--omni-password-field-icon-height"
            },
            {
              "description": "Password field text align.",
              "name": "--omni-password-field-text-align"
            },
            {
              "description": "Password field font color.",
              "name": "--omni-password-field-font-color"
            },
            {
              "description": "Password field font family.",
              "name": "--omni-password-field-font-family"
            },
            {
              "description": "Password field font size.",
              "name": "--omni-password-field-font-size"
            },
            {
              "description": "Password field font weight.",
              "name": "--omni-password-field-font-weight"
            },
            {
              "description": "Password field padding.",
              "name": "--omni-password-field-padding"
            },
            {
              "description": "Password field height.",
              "name": "--omni-password-field-height"
            },
            {
              "description": "Password field width.",
              "name": "--omni-password-field-width"
            },
            {
              "description": "Password field disabled font color.",
              "name": "--omni-password-field-disabled-color"
            },
            {
              "description": "Password field error font color.",
              "name": "--omni-password-field-error-font-color"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the clear slot.",
              "name": "clear",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the password value hidden state.",
              "name": "hide"
            },
            {
              "description": "Replaces the icon for the checked value visible state.",
              "name": "show"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Override for the value property inherited from the OmniFormElement component with reflect set to false.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "noNativeKeyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "attribute": "no-native-keyboard",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLDivElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "method",
              "name": "_setInputValue",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_focusInput",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyInput",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_iconClicked",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "attribute": "clearable",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "focusedStatic",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "no-native-keyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "fieldName": "noNativeKeyboard",
              "attribute": "no-native-keyboard"
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Override for the value property inherited from the OmniFormElement component with reflect set to false.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "fieldName": "clearable",
              "attribute": "clearable",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.js"
          },
          "tagName": "omni-password-field",
          "import": "```js\nimport '@capitec/omni-components/password-field';\n```",
          "customElement": true,
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PasswordField",
          "declaration": {
            "name": "PasswordField",
            "module": "/Users/runner/work/omni-components/omni-components/src/password-field/PasswordField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-password-field",
          "declaration": {
            "name": "PasswordField",
            "module": "/Users/runner/work/omni-components/omni-components/src/password-field/PasswordField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/password-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./PasswordField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/pin-field/PinField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Input control to enter a masked numeric value.",
          "name": "PinField",
          "cssProperties": [
            {
              "description": "Pin field control padding right.",
              "name": "--omni-pin-field-control-padding-right"
            },
            {
              "description": "Pin field control padding left.",
              "name": "--omni-pin-field-control-padding-left"
            },
            {
              "description": "Pin field control padding top.",
              "name": "--omni-pin-field-control-padding-top"
            },
            {
              "description": "Pin field control padding bottom.",
              "name": "--omni-pin-field-control-padding-bottom"
            },
            {
              "description": "Pin field slot icon color.",
              "name": "--omni-pin-field-icon-color"
            },
            {
              "description": "Pin field slot width.",
              "name": "--omni-pin-field-icon-width"
            },
            {
              "description": "Pin field slot height.",
              "name": "--omni-pin-field-icon-height"
            },
            {
              "description": "Pin field text align.",
              "name": "--omni-pin-field-text-align"
            },
            {
              "description": "Pin field font color.",
              "name": "--omni-pin-field-font-color"
            },
            {
              "description": "Pin field font family.",
              "name": "--omni-pin-field-font-family"
            },
            {
              "description": "Pin field font size.",
              "name": "--omni-pin-field-font-size"
            },
            {
              "description": "Pin field font weight.",
              "name": "--omni-pin-field-font-weight"
            },
            {
              "description": "Pin field padding.",
              "name": "--omni-pin-field-padding"
            },
            {
              "description": "Pin field height.",
              "name": "--omni-pin-field-height"
            },
            {
              "description": "Pin field width.",
              "name": "--omni-pin-field-width"
            },
            {
              "description": "Pin field disabled font color.",
              "name": "--omni-pin-field-disabled-font-color"
            },
            {
              "description": "Pin field error font color.",
              "name": "--omni-pin-field-error-font-color"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the clear slot.",
              "name": "clear",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the prefix slot.",
              "name": "prefix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the suffix slot.",
              "name": "suffix",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "description": "Replaces the icon for the pin value hidden state.",
              "name": "hide"
            },
            {
              "description": "Replaces the icon for the checked value visible state.",
              "name": "show"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "noNativeKeyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "attribute": "no-native-keyboard",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Override for the value property inherited from the OmniFormElement component with reflect set to false.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Maximum character input length.",
              "attribute": "max-length",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLDivElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "showPin",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isWebkit",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_sanitiseValue",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_blurOnEnter",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_isNumber",
              "parameters": [
                {
                  "name": "number",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_beforeInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onInput",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_iconClicked",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "attribute": "hint",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "attribute": "clearable",
              "reflects": true,
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "focusedStatic",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderClear",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "typeof nothing | TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "no-native-keyboard",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables native on screen keyboards for the component.",
              "fieldName": "noNativeKeyboard",
              "attribute": "no-native-keyboard"
            },
            {
              "name": "max-length",
              "type": {
                "text": "number | undefined"
              },
              "description": "Maximum character input length.",
              "fieldName": "maxLength",
              "attribute": "max-length"
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Record<string, unknown> | undefined"
              },
              "default": "null as unknown",
              "description": "Override for the value property inherited from the OmniFormElement component with reflect set to false.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "Hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "Error message guiding a user to correct a mistake.",
              "fieldName": "error",
              "attribute": "error",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicator if the component should be disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles the ability to clear the value of the component.",
              "fieldName": "clearable",
              "attribute": "clearable",
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniFormElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.js"
          },
          "tagName": "omni-pin-field",
          "import": "```js\nimport '@capitec/omni-components/pin-field';\n```",
          "customElement": true,
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "OmniFormElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniFormElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PinField",
          "declaration": {
            "name": "PinField",
            "module": "/Users/runner/work/omni-components/omni-components/src/pin-field/PinField.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-pin-field",
          "declaration": {
            "name": "PinField",
            "module": "/Users/runner/work/omni-components/omni-components/src/pin-field/PinField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/pin-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./PinField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/search-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./SearchField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/text-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./TextField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/label/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/switch/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Switch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/keyboard/Keyboard.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n\n        <!-- Add the Keyboard once to the DOM -->    \n        <omni-keyboard \n            id=\"keyboard-interactive\" \n            attach-mode=\"${args.attachMode}\" \n            clear-label=\"${args.clearLabel}\" \n            space-label=\"${args.spaceLabel}\" \n            action-label=\"${args.actionLabel}\" \n            close-label=\"${args.closeLabel}\" >${\n        args['caps-off'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('caps-off', args['caps-off']))}` : nothing\n    }${args['caps-on'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('caps-on', args['caps-on']))}` : nothing}${\n        args['caps-lock'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('caps-lock', args['caps-lock']))}` : nothing\n    }${args['close'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('close', args['close']))}` : nothing}${\n        args['clear'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args['clear']))}` : nothing\n    }${args['backspace'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('backspace', args['backspace']))}` : nothing}${\n        args['action-done'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-done', args['action-done']))}` : nothing\n    }${args['action-go'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-go', args['action-go']))}` : nothing}${\n        args['action-next'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-next', args['action-next']))}` : nothing\n    }${args['action-previous'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-previous', args['action-previous']))}` : nothing}${\n        args['action-search'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-search', args['action-search']))}` : nothing\n    }${args['action-send'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-send', args['action-send']))}` : nothing}${\n        args['action-enter'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-enter', args['action-enter']))}` : nothing\n    }\n        </omni-keyboard>\n        \n        <!-- Examples -->\n        ${\n            args.attachMode === 'all'\n                ? html`\n            <div class=\"keyboard-showcase\">\n                <omni-text-field label=\"Text Field\" tabindex=\"1\"></omni-text-field>  \n                <omni-currency-field thousands-separator=\",\" label=\"Currency Field\"  tabindex=\"2\"></omni-currency-field>\n                <omni-number-field label=\"Number Field\"  tabindex=\"3\"></omni-number-field>\n                <omni-password-field label=\"Password Field\" tabindex=\"4\"></omni-password-field>\n                <omni-pin-field label=\"Pin Field\" tabindex=\"5\"></omni-pin-field>\n                <omni-search-field label=\"Search Field\" tabindex=\"6\"></omni-search-field>\n                <omni-email-field label=\"Email Field\"  tabindex=\"7\"></omni-email-field>\n            </div>\n            `\n                : html`<span>To illustrate this, update the <strong>Interactive</strong> Keyboard properties to have the <code>attach-mode</code> attribute set to <code class=\"language-js\">'all'</code>.</span>`\n        }\n    `,\n    name: 'Interactive',\n    description: () => html`\n        <style>\n            .keyboard-showcase {            \n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: stretch;\n            }\n\n            .keyboard-showcase > * {\n                margin: 10px;\n            }\n\n            .center-inline {\n                height: 100%;\n                display: inline-flex;\n                align-items: center;\n            }\n\n            .example-icon-preview {\n                flex-direction: row !important;\n                width: 20px;\n                height: 20px;\n                display: inline-flex !important;\n                color: var(--omni-theme-primary-color);\n                fill: currentColor;\n            }\n        </style>\n        <p>\n            <span>\n                The Keyboard supports <code class=\"language-html\">&lt;input&gt;</code> and <code class=\"language-html\">&lt;textarea&gt;</code> \n                elements as well as custom web components that internally utilise <code class=\"language-html\">&lt;input&gt;</code> or \n                <code class=\"language-html\">&lt;textarea&gt;</code> elements.\n            </span>\n        </p>\n        <p>\n            <span>All Omni Components input fields are fully supported.</span>\n        </p>\n    `,\n    args: {\n        clearLabel: 'Clear',\n        actionLabel: 'Enter',\n        closeLabel: 'Close',\n        spaceLabel: 'Space',\n        attachMode: 'all',\n        'caps-off': raw`<omni-caps-off-icon style=\"display: inherit;\"></omni-caps-off-icon>`,\n        'caps-on': raw`<omni-caps-on-icon style=\"display: inherit;\"></omni-caps-on-icon>`,\n        'caps-lock': raw`<omni-caps-lock-icon style=\"display: inherit;\"></omni-caps-lock-icon>`,\n        'action-done': raw`<omni-check-icon style=\"display: inherit;\"></omni-check-icon>`,\n        'action-enter': '',\n        'action-go': raw`<omni-arrow-right-icon style=\"display: inherit;\"></omni-arrow-right-icon>`,\n        'action-next': raw`<omni-next-icon style=\"display: inherit;\"></omni-next-icon>`,\n        'action-previous': raw`<omni-previous-icon style=\"display: inherit;\"></omni-previous-icon>`,\n        'action-search': raw`<omni-search-icon style=\"display: inherit;\"></omni-search-icon>`,\n        'action-send': raw`<omni-send-icon style=\"display: inherit;\"></omni-send-icon>`,\n        backspace: raw`<omni-backspace-icon style=\"display: inherit;\"></omni-backspace-icon>`,\n        clear: '',\n        close: raw`<omni-chevron-down-icon style=\"display: inherit;\"></omni-chevron-down-icon>`\n    }\n}",
          "description": "\n        <style>\n            .keyboard-showcase {            \n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: stretch;\n            }\n\n            .keyboard-showcase > * {\n                margin: 10px;\n            }\n\n            .center-inline {\n                height: 100%;\n                display: inline-flex;\n                align-items: center;\n            }\n\n            .example-icon-preview {\n                flex-direction: row !important;\n                width: 20px;\n                height: 20px;\n                display: inline-flex !important;\n                color: var(--omni-theme-primary-color);\n                fill: currentColor;\n            }\n        </style>\n        <p>\n            <span>\n                The Keyboard supports <code class=\"language-html\">&lt;input&gt;</code> and <code class=\"language-html\">&lt;textarea&gt;</code> \n                elements as well as custom web components that internally utilise <code class=\"language-html\">&lt;input&gt;</code> or \n                <code class=\"language-html\">&lt;textarea&gt;</code> elements.\n            </span>\n        </p>\n        <p>\n            <span>All Omni Components input fields are fully supported.</span>\n        </p>\n    "
        },
        {
          "kind": "variable",
          "name": "Attach_By_Attribute",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    ...Interactive,\n    description: () => html`\n    <span>When the <code>attach-mode</code> attribute is set to <code class=\"language-js\">'attribute'</code> on the Keyboard, then the Keyboard will only react to supported inputs with the <code>data-omni-keyboard-attach</code> attribute without a value.</span>\n    `,\n    frameworkSources: [{ framework: 'HTML', load: () => getSourceFromLit(attachByAttribute), disableCodePen: true }],\n    render: (args: Args) =>\n        Interactive.args!.attachMode === 'attribute'\n            ? attachByAttribute\n            : html`\n        <div class=\"keyboard-showcase\">\n            <span>To illustrate this, update the <strong>Interactive</strong> Keyboard properties to have the <code>attach-mode</code> attribute set to <code class=\"language-js\">'attribute'</code>.</span>\n            <omni-button @click=\"${() => {\n                Interactive.args!.attachMode = 'attribute';\n                document.dispatchEvent(\n                    new CustomEvent('story-renderer-interactive-update', {\n                        bubbles: true,\n                        composed: true\n                    })\n                );\n            }}\" class=\"docs-omni-component\"><span>Update <code>attach-mode</code> to <code class=\"language-js\">'attribute'</code></span></omni-button>\n        </div>\n        `,\n    name: 'Attach By Attribute'\n}",
          "description": "\n    <span>When the <code>attach-mode</code> attribute is set to <code class=\"language-js\">'attribute'</code> on the Keyboard, then the Keyboard will only react to supported inputs with the <code>data-omni-keyboard-attach</code> attribute without a value.</span>\n    "
        },
        {
          "kind": "variable",
          "name": "Attach_By_Id",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    ...Interactive,\n    description: () => html`\n    <span>When the <code>attach-mode</code> attribute is set to <code class=\"language-js\">'id'</code> on the Keyboard, then it will only react to supported inputs with the <code>data-omni-keyboard-attach</code> attribute set equal to the Keyboard's id.</span>\n    `,\n    render: (args: Args) =>\n        Interactive.args!.attachMode === 'id'\n            ? attachById\n            : html`\n    <div class=\"keyboard-showcase\">\n    <span>To illustrate this, update the <strong>Interactive</strong> Keyboard properties to have <code>attach-mode</code> attribute set to <code class=\"language-js\">'id'</code>.</span>\n        <omni-button @click=\"${() => {\n            Interactive.args!.attachMode = 'id';\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" class=\"docs-omni-component\"><span>Update <code>attach-mode</code> to <code class=\"language-js\">'id'</code></span></omni-button>\n    </div>\n    `,\n    frameworkSources: [{ framework: 'HTML', load: () => getSourceFromLit(attachByAttribute), disableCodePen: true }],\n    name: 'Attach By Id'\n}",
          "description": "\n    <span>When the <code>attach-mode</code> attribute is set to <code class=\"language-js\">'id'</code> on the Keyboard, then it will only react to supported inputs with the <code>data-omni-keyboard-attach</code> attribute set equal to the Keyboard's id.</span>\n    "
        },
        {
          "kind": "variable",
          "name": "Enter_Key_Hint_Variations",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    ...Interactive,\n    description: () => html`\n    <span>When the <code>enterkeyhint</code> attribute is set on a supported input, the Keyboard's call to action button will react to it accordingly. It is supported as follows:\n        <ul>\n            <li><code class=\"language-js\">'enter'</code> (Default) - The <code>action-enter</code> slot will apply to the call to action button. If not provided, the value defined with the <code>action-label</code> attribute on the keyboard will be displayed on the call to action button.</li>\n            <li><code class=\"language-js\">'go'</code> - The <code>action-go</code> slot will apply to the call to action button. If not provided, a right arrow icon <omni-arrow-right-icon class=\"example-icon-preview\"></omni-arrow-right-icon> will be displayed by default.</li>\n            <li><code class=\"language-js\">'done'</code> - The <code>action-done</code> slot will apply to the call to action button. If not provided, a checkmark icon <omni-check-icon class=\"example-icon-preview\"></omni-check-icon> will be displayed by default.</li>\n            <li><code class=\"language-js\">'next'</code> - The <code>action-next</code> slot will apply to the call to action button. If not provided, an icon of a right arrow within a circle <omni-next-icon class=\"example-icon-preview\"></omni-next-icon> will be displayed by default.</li>\n            <li><code class=\"language-js\">'previous'</code> - The <code>action-previous</code> slot will apply to the call to action button. If not provided, an icon of a left arrow within a circle <omni-previous-icon class=\"example-icon-preview\"></omni-previous-icon> will be displayed by default. The Keyboard's default behaviour of focusing the next <code>tabIndex</code> will also reverse to focus the previous instead.</li>\n            <li><code class=\"language-js\">'search'</code> - The <code>action-search</code> slot will apply to the call to action button. If not provided, a magnifying glass icon <omni-search-icon class=\"example-icon-preview\"></omni-search-icon> will be displayed by default.</li>\n            <li><code class=\"language-js\">'send'</code> - The <code>action-send</code> slot will apply to the call to action button. If not provided, a paper plane icon <omni-send-icon class=\"example-icon-preview\"></omni-send-icon> will be displayed by default.</li>\n        </ul>\n    </span>\n    `,\n    frameworkSources: [{ framework: 'HTML', load: () => getSourceFromLit(attachByAttribute), disableCodePen: true }],\n    render: (args: Args) =>\n        Interactive.args!.attachMode === 'all'\n            ? html`\n        <div class=\"keyboard-showcase\">\n            <omni-label type=\"subtitle\" label=\"Enter Key Variations\"></omni-label>\n            <!-- Enter Key Variations -->\n            <span>Text input with <code class=\"language-js\">enterkeyhint=\"enter\"</code></span>\n            <omni-text-field enterkeyhint=\"enter\" label=\"Enter\" tabindex=\"12\"></omni-text-field> \n            <span>Number input with <code class=\"language-js\">enterkeyhint=\"enter\"</code></span>\n            <omni-number-field enterkeyhint=\"enter\" label=\"Enter\" tabindex=\"13\"></omni-number-field> \n            <span>Text input with <code class=\"language-js\">enterkeyhint=\"go\"</code></span>\n            <omni-text-field enterkeyhint=\"go\" label=\"Go\" tabindex=\"14\"></omni-text-field> \n            <span>Number input with <code class=\"language-js\">enterkeyhint=\"go\"</code></span>\n            <omni-number-field enterkeyhint=\"go\" label=\"Go\" tabindex=\"15\"></omni-number-field> \n            <span>Text input with <code class=\"language-js\">enterkeyhint=\"done\"</code></span>\n            <omni-text-field enterkeyhint=\"done\" label=\"Done\" tabindex=\"16\"></omni-text-field> \n            <span>Number input with <code class=\"language-js\">enterkeyhint=\"done\"</code></span>\n            <omni-number-field enterkeyhint=\"done\" label=\"Done\" tabindex=\"17\"></omni-number-field> \n            <span>Text input with <code class=\"language-js\">enterkeyhint=\"next\"</code></span>\n            <omni-text-field enterkeyhint=\"next\" label=\"Next\" tabindex=\"18\"></omni-text-field> \n            <span>Number input with <code class=\"language-js\">enterkeyhint=\"next\"</code></span>\n            <omni-number-field enterkeyhint=\"next\" label=\"Next\" tabindex=\"19\"></omni-number-field>\n            <span>Text input with <code class=\"language-js\">enterkeyhint=\"previous\"</code></span>\n            <omni-text-field enterkeyhint=\"previous\" label=\"Previous\" tabindex=\"20\"></omni-text-field> \n            <span>Number input with <code class=\"language-js\">enterkeyhint=\"previous\"</code></span>\n            <omni-number-field enterkeyhint=\"previous\" label=\"Previous\" tabindex=\"21\"></omni-number-field>\n            <span>Text input with <code class=\"language-js\">enterkeyhint=\"search\"</code></span>\n            <omni-text-field enterkeyhint=\"search\" label=\"Search\" tabindex=\"22\"></omni-text-field> \n            <span>Number input with <code class=\"language-js\">enterkeyhint=\"search\"</code></span>\n            <omni-number-field enterkeyhint=\"search\" label=\"Search\" tabindex=\"23\"></omni-number-field> \n            <span>Text input with <code class=\"language-js\">enterkeyhint=\"send\"</code></span>\n            <omni-text-field enterkeyhint=\"send\" label=\"Send\" tabindex=\"24\"></omni-text-field> \n            <span>Number input with <code class=\"language-js\">enterkeyhint=\"send\"</code></span>\n            <omni-number-field enterkeyhint=\"send\" label=\"Send\" tabindex=\"25\"></omni-number-field> \n        </div>\n  `\n            : html`\n            <div class=\"keyboard-showcase\">\n                <span>To illustrate this, update the <strong>Interactive</strong> Keyboard properties to have <code>attach-mode</code> attribute set to <code class=\"language-js\">'attach-mode'</code>.</span>\n                <omni-button @click=\"${() => {\n                    Interactive.args!.attachMode = 'all';\n                    document.dispatchEvent(\n                        new CustomEvent('story-renderer-interactive-update', {\n                            bubbles: true,\n                            composed: true\n                        })\n                    );\n                }}\" class=\"docs-omni-component\"><span>Update <code>attach-mode</code> to <code class=\"language-js\">'all'</code></span></omni-button>\n            </div>`,\n    name: 'Enter Key Hint Variations'\n}",
          "description": "\n    <span>When the <code>enterkeyhint</code> attribute is set on a supported input, the Keyboard's call to action button will react to it accordingly. It is supported as follows:\n        <ul>\n            <li><code class=\"language-js\">'enter'</code> (Default) - The <code>action-enter</code> slot will apply to the call to action button. If not provided, the value defined with the <code>action-label</code> attribute on the keyboard will be displayed on the call to action button.</li>\n            <li><code class=\"language-js\">'go'</code> - The <code>action-go</code> slot will apply to the call to action button. If not provided, a right arrow icon <omni-arrow-right-icon class=\"example-icon-preview\"></omni-arrow-right-icon> will be displayed by default.</li>\n            <li><code class=\"language-js\">'done'</code> - The <code>action-done</code> slot will apply to the call to action button. If not provided, a checkmark icon <omni-check-icon class=\"example-icon-preview\"></omni-check-icon> will be displayed by default.</li>\n            <li><code class=\"language-js\">'next'</code> - The <code>action-next</code> slot will apply to the call to action button. If not provided, an icon of a right arrow within a circle <omni-next-icon class=\"example-icon-preview\"></omni-next-icon> will be displayed by default.</li>\n            <li><code class=\"language-js\">'previous'</code> - The <code>action-previous</code> slot will apply to the call to action button. If not provided, an icon of a left arrow within a circle <omni-previous-icon class=\"example-icon-preview\"></omni-previous-icon> will be displayed by default. The Keyboard's default behaviour of focusing the next <code>tabIndex</code> will also reverse to focus the previous instead.</li>\n            <li><code class=\"language-js\">'search'</code> - The <code>action-search</code> slot will apply to the call to action button. If not provided, a magnifying glass icon <omni-search-icon class=\"example-icon-preview\"></omni-search-icon> will be displayed by default.</li>\n            <li><code class=\"language-js\">'send'</code> - The <code>action-send</code> slot will apply to the call to action button. If not provided, a paper plane icon <omni-send-icon class=\"example-icon-preview\"></omni-send-icon> will be displayed by default.</li>\n        </ul>\n    </span>\n    "
        },
        {
          "kind": "variable",
          "name": "Masked_Values",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    ...Interactive,\n    description: () => html`\n    <span>The Keyboard supports masking of the input value on the display preview.</span>\n    <span>Masking will apply to the following:\n        <ul>\n            <li>Any elements with the <code>data-omni-keyboard-mask</code> attribute .</li>\n            <li>Any supported web component with the <code>type</code> attribute set to <code class=\"language-js\">'password'</code> on their internal <code class=\"language-html\">&lt;input&gt;</code> elements.</li>\n            <li>Any supported web component utilising <code>data-omni-keyboard-mask</code> on their internal <code class=\"language-html\">&lt;input&gt;</code> elements.</li>\n        </ul>\n    </span>\n    `,\n    frameworkSources: [{ framework: 'HTML', load: () => getSourceFromLit(attachByAttribute), disableCodePen: true }],\n    render: (args: Args) =>\n        Interactive.args!.attachMode === 'all'\n            ? html`\n        <div class=\"keyboard-showcase\">\n            <omni-label type=\"subtitle\" label=\"Masked Values\"></omni-label>\n            <!-- Masked Values -->\n            <span>Text input with <code>data-omni-keyboard-mask</code> attribute</span>\n            <omni-text-field data-omni-keyboard-mask label=\"Masked on Keyboard\" value=\"Only visible in field\" tabindex=\"26\"></omni-text-field> \n            <span>Password input (Utilises <code class=\"language-js\">type=\"password\"</code> internally)</span>\n            <omni-password-field tabindex=\"27\" value=\"Mask This\"></omni-password-field>\n            <span>Pin input (Utilises <code>data-omni-keyboard-mask</code> internally)</span>\n            <omni-pin-field tabindex=\"28\" value=\"1234\"></omni-pin-field>\n        </div>\n  `\n            : html`\n            <div class=\"keyboard-showcase\">\n                <span>To illustrate this, update the <strong>Interactive</strong> Keyboard properties to have <code>attach-mode</code> attribute set to <code class=\"language-js\">'all'</code>.</span>\n                <omni-button @click=\"${() => {\n                    Interactive.args!.attachMode = 'all';\n                    document.dispatchEvent(\n                        new CustomEvent('story-renderer-interactive-update', {\n                            bubbles: true,\n                            composed: true\n                        })\n                    );\n                }}\" class=\"docs-omni-component\"><span>Update <code>attach-mode</code> to <code class=\"language-js\">'all'</code></span></omni-button>\n            </div>`,\n    name: 'Masked Values'\n}",
          "description": "\n    <span>The Keyboard supports masking of the input value on the display preview.</span>\n    <span>Masking will apply to the following:\n        <ul>\n            <li>Any elements with the <code>data-omni-keyboard-mask</code> attribute .</li>\n            <li>Any supported web component with the <code>type</code> attribute set to <code class=\"language-js\">'password'</code> on their internal <code class=\"language-html\">&lt;input&gt;</code> elements.</li>\n            <li>Any supported web component utilising <code>data-omni-keyboard-mask</code> on their internal <code class=\"language-html\">&lt;input&gt;</code> elements.</li>\n        </ul>\n    </span>\n    "
        },
        {
          "kind": "variable",
          "name": "Hide_Display_Value",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    ...Interactive,\n    description: () => html`\n    <span>When the <code>data-omni-keyboard-no-display</code> attribute is set on a supported input, the display preview on the Keyboard header will not be visible.</span>\n    `,\n    frameworkSources: [{ framework: 'HTML', load: () => getSourceFromLit(attachByAttribute), disableCodePen: true }],\n    render: (args: Args) =>\n        Interactive.args!.attachMode === 'all'\n            ? html`\n    <div class=\"keyboard-showcase\">\n        <omni-label type=\"subtitle\" label=\"Hide Display Value\"></omni-label>\n        <!-- Hide Display Value -->\n        <span>Input field with a value and no <code>data-omni-keyboard-no-display</code> attribute</span>\n        <omni-text-field label=\"Display not hidden\" value=\"Visible on Keyboard\" tabindex=\"29\"></omni-text-field> \n        <span>Input field with a value and <code>data-omni-keyboard-no-display</code> attribute</span>\n        <omni-text-field data-omni-keyboard-no-display value=\"Not visible on Keyboard\" label=\"Display hidden\" tabindex=\"30\"></omni-text-field> \n    </div>  \n  `\n            : html`\n            <div class=\"keyboard-showcase\">\n                <span>To illustrate this, update the <strong>Interactive</strong> Keyboard properties to have <code class=\"language-js\">'attach-mode</code> attribute set to <code class=\"language-js\">'all'</code>.</span>\n                <omni-button @click=\"${() => {\n                    Interactive.args!.attachMode = 'all';\n                    document.dispatchEvent(\n                        new CustomEvent('story-renderer-interactive-update', {\n                            bubbles: true,\n                            composed: true\n                        })\n                    );\n                }}\" class=\"docs-omni-component\"><span>Update <code class=\"language-js\">'attach-mode'</code> to <code class=\"language-js\">'all'</code></span></omni-button>\n            </div>`,\n    name: 'Hide Display Value'\n}",
          "description": "\n    <span>When the <code>data-omni-keyboard-no-display</code> attribute is set on a supported input, the display preview on the Keyboard header will not be visible.</span>\n    "
        },
        {
          "kind": "variable",
          "name": "Hide_Keyboard",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    ...Interactive,\n    description: () => html`\n    <span>When the <code>data-omni-keyboard-hidden</code> attribute is set on a supported input, the Keyboard will not apply to that input.</span>\n    \n    `,\n    frameworkSources: [{ framework: 'HTML', load: () => getSourceFromLit(attachByAttribute), disableCodePen: true }],\n    render: (args: Args) => html`\n        <div class=\"keyboard-showcase\">\n            <omni-label type=\"subtitle\" label=\"Hide Keyboard\"></omni-label>\n            <!-- Hide Keyboard -->\n            <span>Input field without <code>data-omni-keyboard-hidden</code></span>\n            <omni-text-field label=\"With Keyboard\" tabindex=\"31\"></omni-text-field>\n            <span>Input field with <code>data-omni-keyboard-hidden</code></span>\n            <omni-text-field data-omni-keyboard-hidden label=\"No Keyboard\" tabindex=\"32\"></omni-text-field>\n        </div>  \n  `,\n    name: 'Hide Keyboard'\n}",
          "description": "\n    <span>When the <code>data-omni-keyboard-hidden</code> attribute is set on a supported input, the Keyboard will not apply to that input.</span>\n    \n    "
        },
        {
          "kind": "variable",
          "name": "Alternate_Modes",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    ...Interactive,\n    description: () => html`\n    <span>The Keyboard will react accordingly to the <code>data-omni-keyboard-mode</code> attribute on supported target elements.</span>\n        \n    `,\n    frameworkSources: [{ framework: 'HTML', load: () => getSourceFromLit(attachByAttribute), disableCodePen: true }],\n    render: (args: Args) =>\n        Interactive.args!.attachMode === 'all'\n            ? html`\n        <div class=\"keyboard-showcase\">\n            <omni-label type=\"subtitle\" label=\"Alternate Keyboard Modes\"></omni-label>\n            <!-- Alternate Keyboard Modes on Omni Components input fields -->\n            <span>Search field with <code class=\"language-js\">data-omni-keyboard-mode=\"numeric\"</code></span>\n            <omni-search-field label=\"Search Field\" data-omni-keyboard-mode=\"numeric\" no-native-keyboard tabindex=\"33\"></omni-search-field>\n            <span>Text field with <code class=\"language-js\">data-omni-keyboard-mode=\"tel\"</code></span>\n            <omni-text-field label=\"Text Field\" data-omni-keyboard-mode=\"tel\" no-native-keyboard tabindex=\"34\"></omni-text-field>\n        </div>\n  `\n            : html`\n            <div class=\"keyboard-showcase\">\n                <span>To illustrate this, update the <strong>Interactive</strong> Keyboard properties to have <code>attach-mode</code> attribute set to <code class=\"language-js\">'all'</code>.</span>\n                <omni-button @click=\"${() => {\n                    Interactive.args!.attachMode = 'all';\n                    document.dispatchEvent(\n                        new CustomEvent('story-renderer-interactive-update', {\n                            bubbles: true,\n                            composed: true\n                        })\n                    );\n                }}\" class=\"docs-omni-component\"><span>Update <code>attach-mode</code> to <code class=\"language-js\">'all'</code></span></omni-button>\n            </div>`,\n    name: 'Alternate Modes'\n}",
          "description": "\n    <span>The Keyboard will react accordingly to the <code>data-omni-keyboard-mode</code> attribute on supported target elements.</span>\n        \n    "
        },
        {
          "kind": "variable",
          "name": "Slotted_Content",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n\n    <!-- Add the Keyboard with slots to the DOM -->    \n    <omni-keyboard id=\"keyboard-slots\" \n        attach-mode=\"${args.attachMode}\" \n        clear-label=\"${args.clearLabel}\" \n        space-label=\"${args.spaceLabel}\" \n        action-label=\"${args.actionLabel}\" \n        close-label=\"${args.closeLabel}\" >${args['caps-off'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('caps-off', args['caps-off']))}` : nothing}${\n        args['caps-on'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('caps-on', args['caps-on']))}` : nothing\n    }${args['caps-lock'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('caps-lock', args['caps-lock']))}` : nothing}${\n        args['close'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('close', args['close']))}` : nothing\n    }${args['clear'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args['clear']))}` : nothing}${\n        args['backspace'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('backspace', args['backspace']))}` : nothing\n    }${args['action-done'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-done', args['action-done']))}` : nothing}${\n        args['action-go'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-go', args['action-go']))}` : nothing\n    }${args['action-next'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-next', args['action-next']))}` : nothing}${\n        args['action-previous'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-previous', args['action-previous']))}` : nothing\n    }${args['action-search'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-search', args['action-search']))}` : nothing}${\n        args['action-send'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-send', args['action-send']))}` : nothing\n    }${args['action-enter'] ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('action-enter', args['action-enter']))}` : nothing}\n    </omni-keyboard>\n\n\n    <div class=\"keyboard-showcase\">\n\n        <omni-label type=\"subtitle\" label=\"Slotted Enter Key Variations\"></omni-label>\n        <!-- Enter Key Variations -->\n        <span>Text input with <code class=\"language-js\">enterkeyhint=\"enter\"</code></span>\n        <omni-text-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"enter\" label=\"Enter\" tabindex=\"35\"></omni-text-field> \n        <span>Number input with <code class=\"language-js\">enterkeyhint=\"enter\"</code></span>\n        <omni-number-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"enter\" label=\"Enter\" tabindex=\"36\"></omni-number-field> \n        <span>Text input with <code class=\"language-js\">enterkeyhint=\"go\"</code></span>\n        <omni-text-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"go\" label=\"Go\" tabindex=\"37\"></omni-text-field> \n        <span>Number input with <code class=\"language-js\">enterkeyhint=\"go\"</code></span>\n        <omni-number-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"go\" label=\"Go\" tabindex=\"38\"></omni-number-field> \n        <span>Text input with <code class=\"language-js\">enterkeyhint=\"done\"</code></span>\n        <omni-text-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"done\" label=\"Done\" tabindex=\"39\"></omni-text-field> \n        <span>Number input with <code class=\"language-js\">enterkeyhint=\"done\"</code></span>\n        <omni-number-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"done\" label=\"Done\" tabindex=\"40\"></omni-number-field> \n        <span>Text input with <code class=\"language-js\">enterkeyhint=\"next\"</code></span>\n        <omni-text-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"next\" label=\"Next\" tabindex=\"41\"></omni-text-field> \n        <span>Number input with <code class=\"language-js\">enterkeyhint=\"next\"</code></span>\n        <omni-number-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"next\" label=\"Next\" tabindex=\"42\"></omni-number-field>\n        <span>Text input with <code class=\"language-js\">enterkeyhint=\"previous\"</code></span>\n        <omni-text-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"previous\" label=\"Previous\" tabindex=\"43\"></omni-text-field> \n        <span>Number input with <code class=\"language-js\">enterkeyhint=\"previous\"</code></span>\n        <omni-number-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"previous\" label=\"Previous\" tabindex=\"44\"></omni-number-field>\n        <span>Text input with <code class=\"language-js\">enterkeyhint=\"search\"</code></span>\n        <omni-text-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"search\" label=\"Search\" tabindex=\"45\"></omni-text-field> \n        <span>Number input with <code class=\"language-js\">enterkeyhint=\"search\"</code></span>\n        <omni-number-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"search\" label=\"Search\" tabindex=\"46\"></omni-number-field> \n        <span>Text input with <code class=\"language-js\">enterkeyhint=\"send\"</code></span>\n        <omni-text-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"send\" label=\"Send\" tabindex=\"47\"></omni-text-field> \n        <span>Number input with <code class=\"language-js\">enterkeyhint=\"send\"</code></span>\n        <omni-number-field data-omni-keyboard-attach=\"keyboard-slots\" enterkeyhint=\"send\" label=\"Send\" tabindex=\"48\"></omni-number-field> \n\n    </div>\n\n  `,\n    name: 'Slotted Content',\n    args: {\n        clearLabel: 'Clear',\n        actionLabel: 'Enter',\n        closeLabel: 'Close',\n        spaceLabel: 'Space',\n        attachMode: 'id',\n        'caps-off': raw`<span class=\"center-inline\">lower</span>`,\n        'caps-on': raw`<span class=\"center-inline\">upper</span>`,\n        'caps-lock': raw`<span class=\"center-inline\">UPPER</span>`,\n        'action-done': raw`<span class=\"center-inline\">Done</span>`,\n        'action-enter': raw`<span class=\"center-inline\">↵</span>`,\n        'action-go': raw`<span class=\"center-inline\">Go</span>`,\n        'action-next': raw`<span class=\"center-inline\">→</span>`,\n        'action-previous': raw`<span class=\"center-inline\">←</span>`,\n        'action-search': raw`<span class=\"center-inline\">Search</span>`,\n        'action-send': raw`<span class=\"center-inline\">Send</span>`,\n        backspace: raw`<span class=\"center-inline\">⌫</span>`,\n        clear: raw`<span class=\"center-inline\">(X)</span>`,\n        close: raw`<span class=\"center-inline\">^</span>`\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Via_Script",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => {\n        const id = 'keyboard-script-generated';\n        if (!document.getElementById(id)) {\n            Keyboard.create({\n                id: id,\n                attachMode: args.attachMode,\n                clearLabel: args.clearLabel,\n                actionLabel: args.actionLabel,\n                closeLabel: args.closeLabel,\n                spaceLabel: args.spaceLabel,\n                backspace: () => {\n                    const elm = document.createElement('span');\n                    elm.textContent = '⌫';\n                    elm.style.height = '100%';\n                    elm.style.display = 'inline-flex';\n                    elm.style.alignItems = 'center';\n                    let color = elm.style.color;\n                    elm.addEventListener('mouseenter', () => {\n                        color = elm.style.color;\n                        elm.style.color = 'lightgreen';\n                    });\n                    elm.addEventListener('mouseleave', () => {\n                        elm.style.color = color;\n                    });\n\n                    return elm;\n                }\n            });\n        }\n        return html`\n            <div class=\"keyboard-showcase\">\n                <span>Input field utilising Keyboard generated from a script.</span>\n                <omni-text-field data-omni-keyboard-attach=\"keyboard-script-generated\" label=\"Keyboard from script\" tabindex=\"49\"></omni-text-field> \n            </div> \n        `;\n    },\n    name: 'Via Script',\n    args: {\n        attachMode: 'id',\n        clearLabel: 'Clear',\n        actionLabel: '↵',\n        closeLabel: 'Close',\n        spaceLabel: 'Space'\n    },\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: `<!-- Add an input that targets the keyboard id created from script -->\n<omni-text-field data-omni-keyboard-attach=\"keyboard-script-generated\" label=\"Keyboard from script\" tabindex=\"49\"></omni-text-field> `,\n                jsFragment: `import { Keyboard } from '@capitec/omni-components/keyboard';\n\nKeyboard.create({\n    id: 'keyboard-script-generated',\n    attachMode: 'id',\n    clearLabel: 'Clear',\n    actionLabel: '↵',\n    closeLabel: 'Close',\n    spaceLabel: 'Space',\n    backspace: () => {\n        const elm = document.createElement('span');\n        elm.textContent = '⌫';\n        elm.style.height = '100%';\n        elm.style.display = 'inline-flex';\n        elm.style.alignItems = 'center';\n        let color = elm.style.color;\n        elm.addEventListener('mouseenter', () => {\n            color = elm.style.color;\n            elm.style.color = 'lightgreen';\n        })\n        elm.addEventListener('mouseleave', () => {\n            elm.style.color = color;\n        })\n\n        return elm;\n    }\n});`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: `<!-- Add an input that targets the keyboard id created from script -->\n<omni-text-field data-omni-keyboard-attach=\"keyboard-script-generated\" label=\"Keyboard from script\" tabindex=\"49\"></omni-text-field> `,\n                jsFragment: `import { Keyboard } from '@capitec/omni-components/keyboard';\n\nKeyboard.create({\n    id: 'keyboard-script-generated',\n    attachMode: 'id',\n    clearLabel: 'Clear',\n    actionLabel: '↵',\n    closeLabel: 'Close',\n    spaceLabel: 'Space',\n    backspace: () => {\n        const elm = document.createElement('span');\n        elm.textContent = '⌫';\n        elm.style.height = '100%';\n        elm.style.display = 'inline-flex';\n        elm.style.alignItems = 'center';\n        let color = elm.style.color;\n        elm.addEventListener('mouseenter', () => {\n            color = elm.style.color;\n            elm.style.color = 'lightgreen';\n        })\n        elm.addEventListener('mouseleave', () => {\n            elm.style.color = color;\n        })\n\n        return elm;\n    }\n});`\n            }\n        },\n        {\n            framework: 'HTML',\n            disableCodePen: false,\n            load: () => raw`\n<!-- Add an input that targets the keyboard id created from script -->\n<omni-text-field data-omni-keyboard-attach=\"keyboard-script-generated\" label=\"Keyboard from script\" tabindex=\"49\"></omni-text-field> \n\n<!-- A script that creates a keyboard to its default parent container (document.body) with some custom button labels including a custom backspace via render function -->\n<script type=\"module\">\n    import { Keyboard } from '@capitec/omni-components/keyboard';\n    Keyboard.create({\n        id: 'keyboard-script-generated',\n        attachMode: 'id',\n        clearLabel: 'Clear',\n        actionLabel: '↵',\n        closeLabel: 'Close',\n        spaceLabel: 'Space',\n        backspace: () => {\n            const elm = document.createElement('span');\n            elm.textContent = '⌫';\n            elm.style.height = '100%';\n            elm.style.display = 'inline-flex';\n            elm.style.alignItems = 'center';\n            let color = elm.style.color;\n            elm.addEventListener('mouseenter', () => {\n                color = elm.style.color;\n                elm.style.color = 'lightgreen';\n            })\n            elm.addEventListener('mouseleave', () => {\n                elm.style.color = color;\n            })\n\n            return elm;\n        }\n    });\n</script>\n    `\n        }\n    ]\n}"
        },
        {
          "kind": "variable",
          "name": "Vanilla_Inputs",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    ...Interactive,\n    description: () => html`\n    <span>The Keyboard supports vanilla native HTML <code class=\"language-html\">&lt;input&gt;</code> and <code class=\"language-html\">&lt;textarea&gt;</code> elements.</span>\n    `,\n    frameworkSources: [{ framework: 'HTML', load: () => getSourceFromLit(attachByAttribute), disableCodePen: true }],\n    render: (args: Args) =>\n        Interactive.args!.attachMode === 'all'\n            ? html`\n        <div class=\"keyboard-showcase\">\n            <omni-label type=\"subtitle\" label=\"Vanilla Element Types\"></omni-label>\n            <!-- Vanilla Element Types -->\n            <span>text</span>\n            <input type=\"text\" tabindex=\"50\" />\n            <span>tel</span>\n            <input type=\"tel\" tabindex=\"51\" />\n            <span>number</span>\n            <input type=\"number\" tabindex=\"52\" />\n            <span>email</span>\n            <input type=\"email\" tabindex=\"53\" />\n            <span>password</span>\n            <input type=\"password\" tabindex=\"54\" />\n            <span>search</span>\n            <input type=\"search\" tabindex=\"55\" />\n            <span>url</span>\n            <input type=\"url\" tabindex=\"56\" />\n            <span>textarea</span>\n            <textarea tabindex=\"57\"></textarea>\n        </div>\n  `\n            : html`\n            <div class=\"keyboard-showcase\">\n                <span>To illustrate this, update the <strong>Interactive</strong> Keyboard properties to have <code>attach-mode</code> attribute set to <code class=\"language-js\">'all'</code>.</span>\n                <omni-button @click=\"${() => {\n                    Interactive.args!.attachMode = 'all';\n                    document.dispatchEvent(\n                        new CustomEvent('story-renderer-interactive-update', {\n                            bubbles: true,\n                            composed: true\n                        })\n                    );\n                }}\" class=\"docs-omni-component\"><span>Update <code class=\"language-js\">attach-mode</code> to <code class=\"language-js\">'all'</code></span></omni-button>\n            </div>`,\n    name: 'Vanilla Inputs'\n}",
          "description": "\n    <span>The Keyboard supports vanilla native HTML <code class=\"language-html\">&lt;input&gt;</code> and <code class=\"language-html\">&lt;textarea&gt;</code> elements.</span>\n    "
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/keyboard/Keyboard.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Attach_By_Attribute",
          "declaration": {
            "name": "Attach_By_Attribute",
            "module": "src/keyboard/Keyboard.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Attach_By_Id",
          "declaration": {
            "name": "Attach_By_Id",
            "module": "src/keyboard/Keyboard.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Enter_Key_Hint_Variations",
          "declaration": {
            "name": "Enter_Key_Hint_Variations",
            "module": "src/keyboard/Keyboard.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Masked_Values",
          "declaration": {
            "name": "Masked_Values",
            "module": "src/keyboard/Keyboard.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hide_Display_Value",
          "declaration": {
            "name": "Hide_Display_Value",
            "module": "src/keyboard/Keyboard.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hide_Keyboard",
          "declaration": {
            "name": "Hide_Keyboard",
            "module": "src/keyboard/Keyboard.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Alternate_Modes",
          "declaration": {
            "name": "Alternate_Modes",
            "module": "src/keyboard/Keyboard.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slotted_Content",
          "declaration": {
            "name": "Slotted_Content",
            "module": "src/keyboard/Keyboard.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Via_Script",
          "declaration": {
            "name": "Via_Script",
            "module": "src/keyboard/Keyboard.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Vanilla_Inputs",
          "declaration": {
            "name": "Vanilla_Inputs",
            "module": "src/keyboard/Keyboard.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/keyboard/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Keyboard.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/label/Label.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/label/Label.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) =>\n        html`<omni-label data-testid=\"test-label\" label=\"${ifNotEmpty(args.label)}\" type=\"${args.type}\">${unsafeHTML(\n            args['[Default Slot]']\n        )}</omni-label> `,\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        type: 'default',\n        '[Default Slot]': undefined\n    },\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () => <OmniLabel${args.label ? ` label='${args.label}'` : ''}${args.type ? ` type='${args.type}'` : ''}${\n                !args['[Default Slot]']\n                    ? '/>'\n                    : `>\n                      ${args['[Default Slot]']}\n                  </OmniLabel>`\n            };`\n        }\n    ]\n}"
        },
        {
          "kind": "variable",
          "name": "Title",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-label data-testid=\"test-label\" label=\"${args.label}\" type=\"${args.type}\"> </omni-label> `,\n    description: 'Set the text to display with the styles of a title.',\n    args: {\n        label: 'Title',\n        type: 'title'\n    },\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () => <OmniLabel${args.label ? ` label='${args.label}'` : ''}${args.type ? ` type='${args.type}'` : ''}/>;`\n        }\n    ]\n}",
          "description": "Set the text to display with the styles of a title."
        },
        {
          "kind": "variable",
          "name": "Subtitle",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-label data-testid=\"test-label\" label=\"${args.label}\" type=\"${args.type}\"> </omni-label> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () => <OmniLabel${args.label ? ` label='${args.label}'` : ''}${args.type ? ` type='${args.type}'` : ''}${\n                !args['[Default Slot]']\n                    ? '/>'\n                    : `>\n                      ${args['[Default Slot]']}\n                  </OmniLabel>`\n            };`\n        }\n    ],\n    description: 'Set the text to display with the styles of a subtitle.',\n    args: {\n        label: 'Subtitle',\n        type: 'subtitle'\n    }\n}",
          "description": "Set the text to display with the styles of a subtitle."
        },
        {
          "kind": "variable",
          "name": "Strong",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-label data-testid=\"test-label\" label=\"${args.label}\" type=\"${args.type}\"></omni-label>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () => <OmniLabel${args.label ? ` label='${args.label}'` : ''}${args.type ? ` type='${args.type}'` : ''}${\n                !args['[Default Slot]']\n                    ? '/>'\n                    : `>\n                      ${args['[Default Slot]']}\n                  </OmniLabel>`\n            };`\n        }\n    ],\n    description: 'Set the text to display with a bold font style.',\n    args: {\n        label: 'Strong',\n        type: 'strong'\n    }\n}",
          "description": "Set the text to display with a bold font style."
        },
        {
          "kind": "variable",
          "name": "Slot",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-label data-testid=\"test-label\" type=\"${args.type}\">\n            <span>This is <span style=\"text-decoration: underline;\">underlined</span> text inside a paragraph.</span>\n        </omni-label>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () => <OmniLabel${args.label ? ` label='${args.label}'` : ''}${args.type ? ` type='${args.type}'` : ''}>\n                    <span>This is <span style={{textDecoration: 'underline'}}>underlined</span> text inside a paragraph.</span>\n                  </OmniLabel>;`\n        }\n    ],\n    description: 'Set html content to display within.',\n    args: {\n        label: 'Slot',\n        type: 'strong'\n    }\n}",
          "description": "Set html content to display within."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Title",
          "declaration": {
            "name": "Title",
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Subtitle",
          "declaration": {
            "name": "Subtitle",
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Strong",
          "declaration": {
            "name": "Strong",
            "module": "src/label/Label.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slot",
          "declaration": {
            "name": "Slot",
            "module": "src/label/Label.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/modal/Modal.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/modal/Modal.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-modal-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Modal\" ></omni-button>\n        ${modalHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            load: (args) => raw`\n            ${getSourceFromLit(modalHtml(args), (container) => {\n                const modal = container.querySelector('omni-modal');\n                if (modal) {\n                    modal.removeAttribute('hide');\n                }\n            })}            \n            `\n        },\n        {\n            framework: 'Vue',\n            load: (args) => raw`\n            ${getSourceFromLit(\n                modalHtml(args),\n                (container) => {\n                    const modal = container.querySelector('omni-modal');\n                    if (modal) {\n                        modal.removeAttribute('hide');\n                    }\n                },\n                (s) =>\n                    s\n                        .replace(' hide', ' :hide=\"true\"')\n                        .replace(' no-header', ' :no-header=\"true\"')\n                        .replace(' no-footer', ' :no-footer=\"true\"')\n                        .replace(' no-fullscreen', ' :no-fullscreen=\"true\"')\n            )}            \n            `\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        header: raw`<strong style=\"padding-left: 10px;\">Slotted Header Content</strong>`,\n        '[Default Slot]': raw`<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>`,\n        footer: raw`<span>Footer Content</span>`,\n        hide: true,\n        headerAlign: 'left',\n        headerLabel: 'Header Label',\n        noFullscreen: false,\n        noHeader: false,\n        noFooter: false\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Header_Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: 'Set text content to display in the modal header.',\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-modal-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Modal\" ></omni-button>\n        ${modalHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'Lit',\n            load: (args) => raw`\n${getSourceFromLit(\n    modalHtml(args),\n    (container) => {\n        const modal = container.querySelector('omni-modal');\n        if (modal) {\n            modal.removeAttribute('hide');\n            modal.setAttribute('id', 'omni-modal');\n        }\n    },\n    (s) => s.replace('id=\"modal-close-btn\"', '@click=\"${() => document.getElementById(\\'omni-modal\\').hide = true}\"')\n)}\n            `\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n${getSourceFromLit(\n    modalHtml(args),\n    (container) => {\n        const modal = container.querySelector('omni-modal');\n        if (modal) {\n            modal.removeAttribute('hide');\n            modal.setAttribute('id', 'omni-modal');\n        }\n    },\n    (s) => s.replace('id=\"modal-close-btn\"', '@click=\"closeModal\"')\n)}`,\n                jsFragment: `window.vueData = {\n        closeModal: () => document.getElementById(\"omni-modal\").hide = true\n};`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) => raw`\n            ${getSourceFromLit(\n                modalHtml({\n                    ...args,\n                    footer: footerSource\n                }),\n                (container) => {\n                    const modal = container.querySelector('omni-modal');\n                    if (modal) {\n                        modal.removeAttribute('hide');\n                        modal.setAttribute('id', 'omni-modal');\n                    }\n                }\n            )}\n            `\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniModal } from \"@capitec/omni-components-react/modal\";\nimport { OmniButton } from \"@capitec/omni-components-react/button\";\n            \nconst App = () => {\n    let omniModal = null;\n    const setRef = e => {\n        omniModal = e;\n    }\n    return (<OmniModal ref={setRef}${args.headerLabel ? ` header-label='${args.headerLabel}'` : ''}${\n                args.headerAlign ? ` header-align='${args.headerAlign}'` : ''\n            }${args.noFooter ? ` no-footer` : ''}${args.noHeader ? ` no-header` : ''}${args.noFullscreen ? ` no-fullscreen` : ''}>        \n               <span style={{\n                   minWidth: \"777px\",\n                   minHeight: \"434px\",\n                   display: \"flex\",\n                   justifyContent: \"center\",\n                   textAlign: \"center\",\n                   alignItems: \"center\"\n                 }}>Body Content</span>\n               <div slot=\"footer\">\n                 <OmniButton label=\"Close\" onclick={() => {\n                     omniModal.hide = true;\n                 }}/>\n               </div>\n             </OmniModal>);\n}`\n        }\n    ],\n    name: 'Header Label',\n    args: {\n        '[Default Slot]': raw`<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>`,\n        hide: true,\n        headerLabel: 'Header Label',\n        footer: footerTemplate\n    }\n}",
          "description": "Set text content to display in the modal header."
        },
        {
          "kind": "variable",
          "name": "Header_Align",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: 'Align header content horizontally.',\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-modal-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Modal\" ></omni-button>\n        ${modalHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n${getSourceFromLit(\n    modalHtml(args),\n    (container) => {\n        const modal = container.querySelector('omni-modal');\n        if (modal) {\n            modal.removeAttribute('hide');\n            modal.setAttribute('id', 'omni-modal');\n        }\n    },\n    (s) => s.replace('id=\"modal-close-btn\"', '@click=\"closeModal\"')\n)}`,\n                jsFragment: `window.vueData = {\n        closeModal: () => document.getElementById(\"omni-modal\").hide = true\n};`\n            }\n        },\n        {\n            framework: 'Lit',\n            load: (args) => raw`\n${getSourceFromLit(\n    modalHtml(args),\n    (container) => {\n        const modal = container.querySelector('omni-modal');\n        if (modal) {\n            modal.removeAttribute('hide');\n            modal.setAttribute('id', 'omni-modal');\n        }\n    },\n    (s) => s.replace('id=\"modal-close-btn\"', '@click=\"${() => document.getElementById(\\'omni-modal\\').hide = true}\"')\n)}\n            `\n        },\n        {\n            framework: 'HTML',\n            load: (args) => raw`\n            ${getSourceFromLit(\n                modalHtml({\n                    ...args,\n                    footer: footerSource\n                }),\n                (container) => {\n                    const modal = container.querySelector('omni-modal');\n                    if (modal) {\n                        modal.removeAttribute('hide');\n                        modal.setAttribute('id', 'omni-modal');\n                    }\n                }\n            )}\n            \n            `\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniModal } from \"@capitec/omni-components-react/modal\";\nimport { OmniButton } from \"@capitec/omni-components-react/button\";\n            \nconst App = () => {\n    let omniModal = null;\n    const setRef = e => {\n        omniModal = e;\n    }\n    return (<OmniModal ref={setRef}${args.headerLabel ? ` header-label='${args.headerLabel}'` : ''}${\n                args.headerAlign ? ` header-align='${args.headerAlign}'` : ''\n            }${args.noFooter ? ` no-footer` : ''}${args.noHeader ? ` no-header` : ''}${args.noFullscreen ? ` no-fullscreen` : ''}>        \n                <span style={{\n                    minWidth: \"777px\",\n                    minHeight: \"434px\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    textAlign: \"center\",\n                    alignItems: \"center\"\n                    }}>Body Content</span>\n                <div slot=\"footer\">\n                    <OmniButton label=\"Close\" onclick={() => {\n                        omniModal.hide = true;\n                    }}/>\n                </div>\n            </OmniModal>);\n}`\n        }\n    ],\n    name: 'Header Align',\n    args: {\n        '[Default Slot]': raw`<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>`,\n        hide: true,\n        headerLabel: 'Header Aligned',\n        headerAlign: 'center',\n        footer: footerTemplate\n    }\n}",
          "description": "Align header content horizontally."
        },
        {
          "kind": "variable",
          "name": "Header_Slot",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: 'Set custom html content to display in modal header.',\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-modal-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Modal\" ></omni-button>\n        ${modalHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n${getSourceFromLit(\n    modalHtml(args),\n    (container) => {\n        const modal = container.querySelector('omni-modal');\n        if (modal) {\n            modal.removeAttribute('hide');\n            modal.setAttribute('id', 'omni-modal');\n        }\n    },\n    (s) => s.replace('id=\"modal-close-btn\"', '@click=\"closeModal\"')\n)}`,\n                jsFragment: `window.vueData = {\n        closeModal: () => document.getElementById(\"omni-modal\").hide = true\n};`\n            }\n        },\n        {\n            framework: 'Lit',\n            load: (args) => raw`\n${getSourceFromLit(\n    modalHtml(args),\n    (container) => {\n        const modal = container.querySelector('omni-modal');\n        if (modal) {\n            modal.removeAttribute('hide');\n            modal.setAttribute('id', 'omni-modal');\n        }\n    },\n    (s) => s.replace('id=\"modal-close-btn\"', '@click=\"${() => document.getElementById(\\'omni-modal\\').hide = true}\"')\n)}\n            `\n        },\n        {\n            framework: 'HTML',\n            load: (args) => raw`\n            ${getSourceFromLit(\n                modalHtml({\n                    ...args,\n                    footer: footerSource\n                }),\n                (container) => {\n                    const modal = container.querySelector('omni-modal');\n                    if (modal) {\n                        modal.removeAttribute('hide');\n                        modal.setAttribute('id', 'omni-modal');\n                    }\n                }\n            )}\n            \n            `\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniModal } from \"@capitec/omni-components-react/modal\";\nimport { OmniButton } from \"@capitec/omni-components-react/button\";\n            \nconst App = () => {\n    let omniModal = null;\n    const setRef = e => {\n        omniModal = e;\n    }\n    return (<OmniModal ref={setRef}${args.headerLabel ? ` header-label='${args.headerLabel}'` : ''}${\n                args.headerAlign ? ` header-align='${args.headerAlign}'` : ''\n            }${args.noFooter ? ` no-footer` : ''}${args.noHeader ? ` no-header` : ''}${args.noFullscreen ? ` no-fullscreen` : ''}>        \n                <span slot=\"header\">Header <strong>Slot</strong></span>\n                <span style={{\n                    minWidth: \"777px\",\n                    minHeight: \"434px\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    textAlign: \"center\",\n                    alignItems: \"center\"\n                    }}>Body Content</span>\n                <div slot=\"footer\">\n                    <OmniButton label=\"Close\" onclick={() => {\n                        omniModal.hide = true;\n                    }}/>\n                </div>\n            </OmniModal>);\n}`\n        }\n    ],\n    name: 'Header Slot',\n    args: {\n        '[Default Slot]': raw`<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>`,\n        hide: true,\n        header: raw`<span>Header <strong>Slot</strong></span>`,\n        footer: footerTemplate\n    }\n}",
          "description": "Set custom html content to display in modal header."
        },
        {
          "kind": "variable",
          "name": "No_Header",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: 'Remove the header section of the modal.',\n    render: (args: Args) => html`\n       <omni-button data-testid=\"test-modal-btn\" @click=\"${() => {\n           args.hide = false;\n           document.dispatchEvent(\n               new CustomEvent('story-renderer-interactive-update', {\n                   bubbles: true,\n                   composed: true\n               })\n           );\n       }}\" label=\"Show Modal\" ></omni-button>\n        ${modalHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n${getSourceFromLit(\n    modalHtml(args),\n    (container) => {\n        const modal = container.querySelector('omni-modal');\n        if (modal) {\n            modal.removeAttribute('hide');\n            modal.setAttribute('id', 'omni-modal');\n        }\n    },\n    (s) =>\n        s\n            .replace('id=\"modal-close-btn\"', '@click=\"closeModal\"')\n            .replace(' hide', ' :hide=\"true\"')\n            .replace(' no-header', ' :no-header=\"true\"')\n            .replace(' no-footer', ' :no-footer=\"true\"')\n            .replace(' no-fullscreen', ' :no-fullscreen=\"true\"')\n)}`,\n                jsFragment: `window.vueData = {\n        closeModal: () => document.getElementById(\"omni-modal\").hide = true\n};`\n            }\n        },\n        {\n            framework: 'Lit',\n            load: (args) => raw`\n${getSourceFromLit(\n    modalHtml(args),\n    (container) => {\n        const modal = container.querySelector('omni-modal');\n        if (modal) {\n            modal.removeAttribute('hide');\n            modal.setAttribute('id', 'omni-modal');\n        }\n    },\n    (s) => s.replace('id=\"modal-close-btn\"', '@click=\"${() => document.getElementById(\\'omni-modal\\').hide = true}\"')\n)}\n            `\n        },\n        {\n            framework: 'HTML',\n            load: (args) => raw`\n            ${getSourceFromLit(\n                modalHtml({\n                    ...args,\n                    footer: footerSource\n                }),\n                (container) => {\n                    const modal = container.querySelector('omni-modal');\n                    if (modal) {\n                        modal.removeAttribute('hide');\n                        modal.setAttribute('id', 'omni-modal');\n                    }\n                }\n            )}\n            \n            `\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniModal } from \"@capitec/omni-components-react/modal\";\nimport { OmniButton } from \"@capitec/omni-components-react/button\";\n            \nconst App = () => {\n    let omniModal = null;\n    const setRef = e => {\n        omniModal = e;\n    }\n    return (<OmniModal ref={setRef}${args.headerLabel ? ` header-label='${args.headerLabel}'` : ''}${\n                args.headerAlign ? ` header-align='${args.headerAlign}'` : ''\n            }${args.noFooter ? ` no-footer` : ''}${args.noHeader ? ` no-header` : ''}${args.noFullscreen ? ` no-fullscreen` : ''}>        \n                <span style={{\n                    minWidth: \"777px\",\n                    minHeight: \"434px\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    textAlign: \"center\",\n                    alignItems: \"center\"\n                    }}>Body Content</span>\n                <div slot=\"footer\">\n                    <OmniButton label=\"Close\" onclick={() => {\n                        omniModal.hide = true;\n                    }}/>\n                </div>\n            </OmniModal>);\n}`\n        }\n    ],\n    name: 'No Header',\n    args: {\n        '[Default Slot]': raw`<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>`,\n        hide: true,\n        noHeader: true,\n        footer: footerTemplate\n    }\n}",
          "description": "Remove the header section of the modal."
        },
        {
          "kind": "variable",
          "name": "Footer_Slot",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: 'Set custom html content to display in modal footer.',\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-modal-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Modal\" ></omni-button>\n        ${modalHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n${getSourceFromLit(\n    modalHtml(args),\n    (container) => {\n        const modal = container.querySelector('omni-modal');\n        if (modal) {\n            modal.removeAttribute('hide');\n            modal.setAttribute('id', 'omni-modal');\n        }\n    },\n    (s) =>\n        s\n            .replace('id=\"modal-close-btn\"', '@click=\"closeModal\"')\n            .replace(' hide', ' :hide=\"true\"')\n            .replace(' no-header', ' :no-header=\"true\"')\n            .replace(' no-footer', ' :no-footer=\"true\"')\n            .replace(' no-fullscreen', ' :no-fullscreen=\"true\"')\n)}`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) => raw`\n            ${getSourceFromLit(modalHtml(args), (container) => {\n                const modal = container.querySelector('omni-modal');\n                if (modal) {\n                    modal.removeAttribute('hide');\n                }\n            })}\n            \n            `\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniModal } from \"@capitec/omni-components-react/modal\";\n            \nconst App = () => <OmniModal${args.headerLabel ? ` header-label='${args.headerLabel}'` : ''}${\n                args.headerAlign ? ` header-align='${args.headerAlign}'` : ''\n            }${args.noFooter ? ` no-footer` : ''}${args.noHeader ? ` no-header` : ''}${args.noFullscreen ? ` no-fullscreen` : ''}>\n                    <span style={{\n                        minWidth: \"777px\",\n                        minHeight: \"434px\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        textAlign: \"center\",\n                        alignItems: \"center\"\n                      }}>Body Content</span>\n                      <span slot=\"footer\">Footer <strong>Slot</strong></span>\n                  </OmniModal>;`\n        }\n    ],\n    name: 'Footer Slot',\n    args: {\n        '[Default Slot]': raw`<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>`,\n        hide: true,\n        footer: raw`<span>Footer <strong>Slot</strong></span>`\n    }\n}",
          "description": "Set custom html content to display in modal footer."
        },
        {
          "kind": "variable",
          "name": "No_Footer",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: 'Remove the footer section of the modal.',\n    render: (args: Args) => html`\n        <omni-button data-testid=\"test-modal-btn\" @click=\"${() => {\n            args.hide = false;\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\" label=\"Show Modal\" ></omni-button>\n        ${modalHtml(args)}\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) => raw`\n${getSourceFromLit(\n    modalHtml(args),\n    (container) => {\n        const modal = container.querySelector('omni-modal');\n        if (modal) {\n            modal.removeAttribute('hide');\n            modal.setAttribute('id', 'omni-modal');\n        }\n    },\n    (s) =>\n        s\n            .replace('id=\"modal-close-btn\"', '@click=\"closeModal\"')\n            .replace(' hide', ' :hide=\"true\"')\n            .replace(' no-header', ' :no-header=\"true\"')\n            .replace(' no-footer', ' :no-footer=\"true\"')\n            .replace(' no-fullscreen', ' :no-fullscreen=\"true\"')\n)}`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) => raw`\n            ${getSourceFromLit(modalHtml(args), (container) => {\n                const modal = container.querySelector('omni-modal');\n                if (modal) {\n                    modal.removeAttribute('hide');\n                }\n            })}\n            \n            `\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniModal } from \"@capitec/omni-components-react/modal\";\n            \nconst App = () => <OmniModal${args.headerLabel ? ` header-label='${args.headerLabel}'` : ''}${\n                args.headerAlign ? ` header-align='${args.headerAlign}'` : ''\n            }${args.noFooter ? ` no-footer` : ''}${args.noHeader ? ` no-header` : ''}${args.noFullscreen ? ` no-fullscreen` : ''}>\n                    <span style={{\n                        minWidth: \"777px\",\n                        minHeight: \"434px\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        textAlign: \"center\",\n                        alignItems: \"center\"\n                      }}>Body Content</span>\n                  </OmniModal>;`\n        }\n    ],\n    name: 'No Footer',\n    args: {\n        '[Default Slot]': raw`<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>`,\n        hide: true,\n        noFooter: true\n    }\n}",
          "description": "Remove the footer section of the modal."
        },
        {
          "kind": "variable",
          "name": "Scripted_Modal",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`Create and show an <code class=\"language-html\">&lt;omni-modal&gt;</code> instance programmatically.`,\n    render: (args: Args) => html`\n                    <omni-button data-testid=\"test-modal-btn\" @click=\"${() => {\n                        args.hide = false;\n                        if (modal) {\n                            modal.hide = false;\n                        } else {\n                            modal = Modal.show({\n                                body: () =>\n                                    raw`<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>`,\n                                footer: footer,\n                                header: args.header,\n                                headerAlign: args.headerAlign,\n                                id: 'some-id'\n                            });\n                            if (modal) {\n                                modal.setAttribute('data-testid', 'test-modal-scripted');\n                                modal.addEventListener('click-outside', () => {\n                                    modal!.hide = true;\n                                    args.hide = true;\n\n                                    document.dispatchEvent(\n                                        new CustomEvent('story-renderer-interactive-update', {\n                                            bubbles: true,\n                                            composed: true\n                                        })\n                                    );\n                                });\n                            }\n                        }\n\n                        document.dispatchEvent(\n                            new CustomEvent('story-renderer-interactive-update', {\n                                bubbles: true,\n                                composed: true\n                            })\n                        );\n                    }}\" label=\"Show Modal\" ></omni-button>\n     `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: raw`<span>Page Content</span>`,\n                jsFragment: `import { Modal } from '@capitec/omni-components/modal';\n\nconst footer = document.createElement('div');\nfooter.textContent = 'The footer';\nfooter.style.color = 'orange';\n\nconst modal = Modal.show({\n    body: () => '<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>',\n    footer: footer,\n    header: 'Header Content',\n    headerAlign: 'right',\n    id: 'some-id'\n});\n                `\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: raw`<span>Page Content</span>`,\n                jsFragment: `import { Modal } from '@capitec/omni-components/modal';\n\nconst footer = document.createElement('div');\nfooter.textContent = 'The footer';\nfooter.style.color = 'orange';\n\nconst modal = Modal.show({\n    body: () => html\\`<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>\\`,\n    footer: footer,\n    header: 'Header Content',\n    headerAlign: 'right',\n    id: 'some-id'\n});\n                `\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) => raw`\n                <script type=\"module\">                        \n                        import { Modal } from '@capitec/omni-components/modal';\n\n                        const footer = document.createElement('div');\n                        footer.textContent = 'The footer';\n                        footer.style.color = 'orange';\n\n                        const modal = Modal.show({\n                            body: () => '<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>',\n                            footer: footer,\n                            header: 'Header Content',\n                            headerAlign: 'right',\n                            id: 'some-id'\n                        });\n                </script>\n            `\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { Modal } from \"@capitec/omni-components-react/modal\";\n\nconst footerContainer = document.createElement('div');\nfooterContainer.style.display = 'contents';\n\nconst Footer = () => <>\n                        <div style={{ color: 'orange' }}>\n                            The footer\n                        </div>\n                     </>;\nReactDOM.render(<Footer/>, footerContainer);\n\nconst modal = Modal.show({\n    body: () => '<span style=\"min-width: 777px;min-height: 434px;display: flex;justify-content: center;text-align: center;align-items: center;\">Body Content</span>',\n    footer: footerContainer,\n    header: 'Header Content',\n    headerAlign: 'right',\n    id: 'some-id'\n});\n            \nconst App = () => <>\n                    App Content\n                  </>;`\n        }\n    ],\n    name: 'Scripted Modal',\n    args: {\n        hide: true,\n        header: 'Header Content',\n        headerAlign: 'right'\n    }\n}",
          "description": "Create and show an <code class=\"language-html\">&lt;omni-modal&gt;</code> instance programmatically."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/modal/Modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Header_Label",
          "declaration": {
            "name": "Header_Label",
            "module": "src/modal/Modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Header_Align",
          "declaration": {
            "name": "Header_Align",
            "module": "src/modal/Modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Header_Slot",
          "declaration": {
            "name": "Header_Slot",
            "module": "src/modal/Modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "No_Header",
          "declaration": {
            "name": "No_Header",
            "module": "src/modal/Modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Footer_Slot",
          "declaration": {
            "name": "Footer_Slot",
            "module": "src/modal/Modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "No_Footer",
          "declaration": {
            "name": "No_Footer",
            "module": "src/modal/Modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Scripted_Modal",
          "declaration": {
            "name": "Scripted_Modal",
            "module": "src/modal/Modal.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/modal/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Modal.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/number-field/NumberField.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/number-field/NumberField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`\n    <omni-number-field\n      data-testid=\"test-number-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\"\n      ?clearable=\"${args.clearable}\"\n      >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n      ${args.clear ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args.clear))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix || args.clear ? '\\r\\n' : nothing}</omni-number-field>\n  `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' clearable', ' :clearable=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        prefix: '',\n        suffix: '',\n        clear: ''\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Clearable"
        },
        {
          "kind": "variable",
          "name": "Custom_Clear_Slot"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Clearable",
          "declaration": {
            "name": "Clearable",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Clear_Slot",
          "declaration": {
            "name": "Custom_Clear_Slot",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/number-field/NumberField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/number-field/NumberField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/password-field/PasswordField.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/password-field/PasswordField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-password-field\n      data-testid=\"test-password-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\"\n      ?clearable=\"${args.clearable}\">${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n      ${args.clear ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args.clear))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.hide ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('hide', args.hide))}` : nothing}${\n        args.show ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('show', args.show))}` : nothing\n    }</omni-password-field>\n  `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' clearable', ' :clearable=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        clearable: false,\n        prefix: '',\n        suffix: '',\n        clear: '',\n        hide: '',\n        show: ''\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Clearable"
        },
        {
          "kind": "variable",
          "name": "Custom_Clear_Slot"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        },
        {
          "kind": "variable",
          "name": "Custom_Icon_Slot",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-password-field data-testid=\"test-password-field\" label=\"${ifNotEmpty(args.label)}\" ?disabled=\"${args.disabled}\">\n      <omni-lock-open-icon style=\"fill: orange;\" slot=\"show\"></omni-lock-open-icon>\n      <omni-lock-closed-icon style=\"fill: lightgreen;\" slot=\"hide\"></omni-lock-closed-icon>\n    </omni-password-field>\n  `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniPasswordField } from \"@capitec/omni-components-react/password-field\";\nimport { OmniLockClosedIcon,OmniLockOpenIcon } from \"@capitec/omni-components-react/icons\";\n\nconst App = () => <OmniPasswordField${args.label ? ` label='${args.label}'` : ''}${args.disabled ? ` disabled` : ''}>\n                    <OmniLockOpenIcon style={{fill: 'orange'}} slot=\"show\"/>\n                    <OmniLockClosedIcon style={{fill: 'lightgreen'}} slot=\"hide\"/>\n                  </OmniPasswordField>;`\n        }\n    ],\n    name: 'Custom Icon Slot',\n    description: 'Set html content to display as the visibility indicators of the field.',\n    args: {\n        label: 'Custom Icon Slot'\n    }\n}",
          "description": "Set html content to display as the visibility indicators of the field."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Clearable",
          "declaration": {
            "name": "Clearable",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Clear_Slot",
          "declaration": {
            "name": "Custom_Clear_Slot",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Icon_Slot",
          "declaration": {
            "name": "Custom_Icon_Slot",
            "module": "src/password-field/PasswordField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pin-field/PinField.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/pin-field/PinField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-pin-field\n      data-testid=\"test-pin-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      max-length=${args.maxLength}\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\"\n      ?clearable=\"${args.clearable}\">${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n      ${args.clear ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args.clear))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.hide ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('hide', args.hide))}` : nothing}${\n        args.show ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('show', args.show))}` : nothing\n    }</omni-pin-field>\n  `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' clearable', ' :clearable=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        clearable: false,\n        prefix: '',\n        suffix: '',\n        clear: '',\n        hide: '',\n        show: '',\n        maxLength: undefined\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Max_Length",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-pin-field\n      data-testid=\"test-pin-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      max-length=${ifDefined(args.maxLength)}>\n    </omni-pin-field>\n  `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniPinField } from \"@capitec/omni-components-react/pin-field\";\n\nconst App = () => <OmniPinField${args.label ? ` label='${args.label}'` : ''}${args.value ? ` value='${args.value}'` : ''}${\n                args.maxLength ? ` max-length='${args.maxLength}'` : ''\n            }/>;`\n        }\n    ],\n    name: 'Max Length',\n    description: 'Limit the character input length based on the value provided.',\n    args: {\n        label: 'Max Length',\n        maxLength: 5\n    }\n}",
          "description": "Limit the character input length based on the value provided."
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Clearable"
        },
        {
          "kind": "variable",
          "name": "Custom_Clear_Slot"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Max_Length",
          "declaration": {
            "name": "Max_Length",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Clearable",
          "declaration": {
            "name": "Clearable",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Clear_Slot",
          "declaration": {
            "name": "Custom_Clear_Slot",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/pin-field/PinField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/pin-field/PinField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/Radio.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/radio/Radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to select a single value from a group of values.",
          "name": "Radio",
          "cssProperties": [
            {
              "description": "Width.",
              "name": "--omni-radio-width"
            },
            {
              "description": "Height.",
              "name": "--omni-radio-height"
            },
            {
              "description": "Padding.",
              "name": "--omni-radio-padding"
            },
            {
              "description": "Label Font Color.",
              "name": "--omni-radio-label-font-color"
            },
            {
              "description": "Label Font Family.",
              "name": "--omni-radio-label-font-family"
            },
            {
              "description": "Label Font Size.",
              "name": "--omni-radio-label-font-size"
            },
            {
              "description": "Label Font Weight.",
              "name": "--omni-radio-label-font-weight"
            },
            {
              "description": "Label Line Height.",
              "name": "--omni-radio-label-line-height"
            },
            {
              "description": "Label Spacing.",
              "name": "--omni-radio-label-spacing"
            },
            {
              "description": "Hint Font Color.",
              "name": "--omni-input-hint-label-font-color"
            },
            {
              "description": "Hint Font Family.",
              "name": "--omni-input-hint-label-font-family"
            },
            {
              "description": "Hint Font Size.",
              "name": "--omni-input-hint-label-font-size"
            },
            {
              "description": "Hint Font Weight.",
              "name": "--omni-input-hint-label-font-weight"
            },
            {
              "description": "Error Font Color.",
              "name": "--omni-input-error-label-font-color"
            },
            {
              "description": "Error Font Family.",
              "name": "--omni-input-error-label-font-family"
            },
            {
              "description": "Error Font Size.",
              "name": "--omni-input-error-label-font-size"
            },
            {
              "description": "Error Font Weight.",
              "name": "--omni-input-error-label-font-weight"
            },
            {
              "description": "Background Color.",
              "name": "--omni-radio-background-color"
            },
            {
              "description": "Border Width.",
              "name": "--omni-radio-border-width"
            },
            {
              "description": "Border Style.",
              "name": "--omni-radio-border-style"
            },
            {
              "description": "Border Color.",
              "name": "--omni-radio-border-color"
            },
            {
              "description": "Border Radius.",
              "name": "--omni-radio-border-radius"
            },
            {
              "description": "Indicator Border Width.",
              "name": "--omni-radio-indicator-border-width"
            },
            {
              "description": "Indicator Border Color.",
              "name": "--omni-radio-indicator-border-color"
            },
            {
              "description": "Indicator Border Radius.",
              "name": "--omni-radio-border-radius"
            },
            {
              "description": "Indicator Color.",
              "name": "--omni-radio-indicator-color"
            },
            {
              "description": "Checked Background color.",
              "name": "--omni-radio-checked-background-color"
            },
            {
              "description": "Hover Box Shadow.",
              "name": "--omni-radio-hover-box-shadow"
            },
            {
              "description": "Hover Background Color.",
              "name": "--omni-radio-hover-background-color"
            },
            {
              "description": "Disabled Border Color.",
              "name": "--omni-radio-disabled-border-color"
            },
            {
              "description": "Disabled Background Color.",
              "name": "--omni-radio-disabled-background-color"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside the component.",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "A hint message to assist the user.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "An error message to guide users to correct a mistake.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is checked or not.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_click",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_toggleChecked",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "value-change",
              "type": {
                "text": "CustomEvent<{ old: Boolean; new: Boolean; }>"
              },
              "description": "Dispatched when the control value is changed to either on or off."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data"
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "A hint message to assist the user.",
              "fieldName": "hint",
              "attribute": "hint"
            },
            {
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "An error message to guide users to correct a mistake.",
              "fieldName": "error",
              "attribute": "error"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is checked or not.",
              "fieldName": "checked",
              "attribute": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the component is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-radio",
          "import": "```js\nimport '@capitec/omni-components/radio';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Radio",
          "declaration": {
            "name": "Radio",
            "module": "/Users/runner/work/omni-components/omni-components/src/radio/Radio.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-radio",
          "declaration": {
            "name": "Radio",
            "module": "/Users/runner/work/omni-components/omni-components/src/radio/Radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/Radio.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-radio\n            data-testid=\"test-radio\"\n            label=\"${ifNotEmpty(args.label)}\"\n            .data=\"${args.data}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            ?checked=\"${args.checked}\"\n            ?disabled=\"${args.disabled}\">${unsafeHTML(args['[Default Slot]'])}</omni-radio>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: '',\n        data: {},\n        hint: '',\n        error: '',\n        checked: false,\n        disabled: false,\n        '[Default Slot]': undefined\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-radio data-testid=\"test-radio\" label=\"${args.label}\"></omni-radio> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniRadio } from \"@capitec/omni-components-react/radio\";\n\nconst App = () => <OmniRadio${args.label ? ` label='${args.label}'` : ''}/>;`\n        }\n    ],\n    description: 'Set a text value to display next to the component.',\n    args: {\n        label: 'Label'\n    }\n}",
          "description": "Set a text value to display next to the component."
        },
        {
          "kind": "variable",
          "name": "Hint",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" hint=\"${args.hint}\"></omni-radio> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniRadio } from \"@capitec/omni-components-react/radio\";\n\nconst App = () => <OmniRadio${args.label ? ` label='${args.label}'` : ''}${args.hint ? ` hint='${args.hint}'` : ''}/>;`\n        }\n    ],\n    description: 'Set a text value to as a hint.',\n    args: {\n        label: 'Hint',\n        hint: 'This is a hint'\n    }\n}",
          "description": "Set a text value to as a hint."
        },
        {
          "kind": "variable",
          "name": "Error_Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    name: 'Error', // Explicitly named as error, the exported name cannot be 'Error' as that is reserved\n    render: (args: Args) => html` <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" error=\"${args.error}\"></omni-radio> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniRadio } from \"@capitec/omni-components-react/radio\";\n\nconst App = () => <OmniRadio${args.label ? ` label='${args.label}'` : ''}${args.error ? ` error='${args.error}'` : ''}/>;`\n        }\n    ],\n    description: 'Set a text value to display as an error.',\n    args: {\n        label: 'Error',\n        error: 'This is an error state'\n    }\n}",
          "description": "Set a text value to display as an error."
        },
        {
          "kind": "variable",
          "name": "Checked",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" ?checked=\"${args.checked}\"></omni-radio> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniRadio } from \"@capitec/omni-components-react/radio\";\n\nconst App = () => <OmniRadio${args.label ? ` label='${args.label}'` : ''}${args.checked ? ` checked` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Error_Label!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    description: 'Set the component to a checked state.',\n    args: {\n        label: 'Checked',\n        checked: true\n    }\n}",
          "description": "Set the component to a checked state."
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-radio data-testid=\"test-radio\" label=\"${args.label}\" ?disabled=\"${args.disabled}\"></omni-radio> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniRadio } from \"@capitec/omni-components-react/radio\";\n\nconst App = () => <OmniRadio${args.label ? ` label='${args.label}'` : ''}${args.disabled ? ` disabled` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Disabled!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    description: 'Prevent interaction (pointer events).',\n    args: {\n        label: 'Disabled',\n        disabled: true\n    }\n}",
          "description": "Prevent interaction (pointer events)."
        },
        {
          "kind": "variable",
          "name": "Slot",
          "default": "{\n    render: () => html`\n        <omni-radio data-testid=\"test-radio\">Slotted</omni-radio>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniRadio } from \"@capitec/omni-components-react/radio\";\n\nconst App = () => <OmniRadio>\n                    Slotted\n                  </OmniRadio>;`\n        }\n    ],\n    name: 'Slot',\n    description: 'Set content to display within.',\n    args: {}\n}",
          "description": "Set content to display within."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checked",
          "declaration": {
            "name": "Checked",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/radio/Radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slot",
          "declaration": {
            "name": "Slot",
            "module": "src/radio/Radio.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/RadioGroup.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/radio/RadioGroup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control to group radio components for single selection",
          "name": "RadioGroup",
          "cssProperties": [
            {
              "description": "Label font size.",
              "name": "--omni-radio-group-label-font-size"
            },
            {
              "description": "Label font weight.",
              "name": "--omni-radio-group-label-font-weight"
            },
            {
              "description": "Label bottom margin.",
              "name": "--omni-radio-group-label-margin-bottom"
            },
            {
              "description": "Margin in between radio elements when arranged vertically.",
              "name": "--omni-radio-group-vertical-margin"
            },
            {
              "description": "Margin in between radio elements when arranged horizontally.",
              "name": "--omni-radio-group-horizontal-margin"
            }
          ],
          "cssParts": [
            {
              "description": "Container element for slotted radio elements",
              "name": "radios"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to manage in the radio group, typically &lt;input type=\"radio\" /&gt; and/or &lt;omni-radio&gt;&lt;/omni-radio&gt;.",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "allowDeselect",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Allow deselection of radio elements.",
              "attribute": "allow-deselect",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Arrange radio elements horizontally.",
              "attribute": "horizontal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_selected",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "NaN"
            },
            {
              "kind": "field",
              "name": "radios",
              "type": {
                "text": "CheckableElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "_uncheckElement",
              "privacy": "private",
              "parameters": [
                {
                  "name": "previousSelected",
                  "type": {
                    "text": "CheckableElement"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_checkElement",
              "privacy": "private",
              "parameters": [
                {
                  "name": "newSelected",
                  "type": {
                    "text": "CheckableElement"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_loadRadios",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "radio-change",
              "type": {
                "text": "CustomEvent<RadioChangeEventDetail>"
              },
              "description": "Dispatched when a radio selection is changed."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "allow-deselect",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Allow deselection of radio elements.",
              "fieldName": "allowDeselect",
              "attribute": "allow-deselect"
            },
            {
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Arrange radio elements horizontally.",
              "fieldName": "horizontal",
              "attribute": "horizontal"
            },
            {
              "name": "data",
              "type": {
                "text": "object | undefined"
              },
              "description": "Data associated with the component.",
              "fieldName": "data",
              "attribute": "data"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-radio-group",
          "import": "```js\nimport '@capitec/omni-components/radio';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RadioGroup",
          "declaration": {
            "name": "RadioGroup",
            "module": "/Users/runner/work/omni-components/omni-components/src/radio/RadioGroup.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-radio-group",
          "declaration": {
            "name": "RadioGroup",
            "module": "/Users/runner/work/omni-components/omni-components/src/radio/RadioGroup.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "CheckableElement",
          "type": "HTMLElement & { checked: boolean | undefined }"
        },
        {
          "alias": "RadioChangeEventDetail",
          "type": "{ current?: CheckableElement; previous?: CheckableElement }"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/RadioGroup.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-radio-group data-testid=\"test-radio-group\" label=\"${ifNotEmpty(args.label)}\" ?allow-deselect=\"${args['allow-deselect']}\" ?horizontal=\"${\n        args.horizontal\n    }\">\n      ${unsafeHTML(args['[Default Slot]'])}\n    </omni-radio-group>\n  `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' horizontal', ' :horizontal=\"true\"').replace(' allow-deselect', ' :allow-deselect=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Radio Group',\n        'allow-deselect': false,\n        horizontal: false,\n        '[Default Slot]': raw`<omni-radio label=\"One\" data-testid=\"test-radio\"></omni-radio> \n<omni-radio label=\"Two\" disabled></omni-radio> \n<omni-radio label=\"Three\"></omni-radio>`\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-radio-group data-testid=\"test-radio-group\" label=\"${args.label}\" >\n        <omni-radio label=\"One\" ></omni-radio> \n        <omni-radio label=\"Two\" ></omni-radio> \n        <omni-radio label=\"Three\"></omni-radio> \n    </omni-radio-group>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniRadio, OmniRadioGroup } from \"@capitec/omni-components-react/radio\";\n\nconst App = () => <OmniRadioGroup label=\"${args.label}\">\n                    <OmniRadio label=\"One\" /> \n                    <OmniRadio label=\"Two\" /> \n                    <OmniRadio label=\"Three\"/> \n                  </OmniRadioGroup>;`\n        }\n    ],\n    description: 'Set a text value to display for the component.',\n    args: {\n        label: 'Label'\n    }\n}",
          "description": "Set a text value to display for the component."
        },
        {
          "kind": "variable",
          "name": "Horizontal",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-radio-group data-testid=\"test-radio-group\" label=\"${args.label}\" ?horizontal=\"${args.horizontal}\">\n        <omni-radio label=\"One\" ></omni-radio> \n        <omni-radio label=\"Two\" ></omni-radio> \n        <omni-radio label=\"Three\"></omni-radio> \n    </omni-radio-group>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniRadio, OmniRadioGroup } from \"@capitec/omni-components-react/radio\";\n\nconst App = () => <OmniRadioGroup label=\"${args.label}\" horizontal>\n                    <OmniRadio label=\"One\" /> \n                    <OmniRadio label=\"Two\" /> \n                    <OmniRadio label=\"Three\"/> \n                  </OmniRadioGroup>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Horizontal!.render!(args), undefined, (s) =>\n                    s.replace(' horizontal', ' :horizontal=\"true\"').replace(' allow-deselect', ' :allow-deselect=\"true\"')\n                )\n        }\n    ],\n    description: 'Arrange radio elements horizontally.',\n    args: {\n        label: 'Horizontal',\n        horizontal: true\n    }\n}",
          "description": "Arrange radio elements horizontally."
        },
        {
          "kind": "variable",
          "name": "Allow_Deselect",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-radio-group data-testid=\"test-radio-group\" label=\"${args.label}\" ?allow-deselect=\"${args['allow-deselect']}\">\n        <omni-radio label=\"One\" ></omni-radio> \n        <omni-radio label=\"Two\" checked  data-testid=\"test-radio\"></omni-radio>  \n        <input type=\"radio\" id=\"native_radio_2\" />\n        <label for=\"native_radio_2\">Three</label><br>\n    </omni-radio-group>`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniRadio, OmniRadioGroup } from \"@capitec/omni-components-react/radio\";\n\nconst App = () => <OmniRadioGroup label=\"${args.label}\" allow-deselect>\n                    <OmniRadio label=\"One\" /> \n                    <OmniRadio label=\"Two\" checked/> \n                    <input type=\"radio\" id=\"native_radio_2\" />\n                    <label for=\"native_radio_2\">Three</label><br/>\n                  </OmniRadioGroup>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Allow_Deselect!.render!(args), undefined, (s) =>\n                    s.replace(' horizontal', ' :horizontal=\"true\"').replace(' allow-deselect', ' :allow-deselect=\"true\"')\n                )\n        }\n    ],\n    description: 'Allow radios in the group to be deselected.',\n    args: {\n        label: 'Allow Deselect',\n        'allow-deselect': true\n    }\n}",
          "description": "Allow radios in the group to be deselected."
        },
        {
          "kind": "variable",
          "name": "Native_Radio_Input",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) =>\n        html` \n            <omni-radio-group label=\"${args.label}\">\n                <omni-radio label=\"One\"></omni-radio> \n                <input type=\"radio\" id=\"native_radio\" />\n                <label for=\"native_radio\">Two</label><br>\n                <omni-switch label=\"Three\"></omni-switch> \n                <omni-radio label=\"Four\"></omni-radio> \n            </omni-radio-group>\n        `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniRadio, OmniRadioGroup } from \"@capitec/omni-components-react/radio\";\nimport { OmniSwitch } from \"@capitec/omni-components-react/switch\";\n\nconst App = () => <OmniRadioGroup label=\"${args.label}\">\n                    <OmniRadio label=\"One\" /> \n                    <input type=\"radio\" id=\"native_radio\" />\n                    <label for=\"native_radio\">Two</label><br/>\n                    <OmniSwitch label=\"Three\"/> \n                    <OmniRadio label=\"Four\"/> \n                  </OmniRadioGroup>;`\n        }\n    ],\n    description:\n        'Grouping supports native input with type=\"radio\" as well as omni-radio (and any other element that is driven by a checked attribute).',\n    args: {\n        label: 'Group with alternate elements'\n    }\n}",
          "description": "Grouping supports native input with type=\"radio\" as well as omni-radio (and any other element that is driven by a checked attribute)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/radio/RadioGroup.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/radio/RadioGroup.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Horizontal",
          "declaration": {
            "name": "Horizontal",
            "module": "src/radio/RadioGroup.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Allow_Deselect",
          "declaration": {
            "name": "Allow_Deselect",
            "module": "src/radio/RadioGroup.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Native_Radio_Input",
          "declaration": {
            "name": "Native_Radio_Input",
            "module": "src/radio/RadioGroup.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Radio.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./RadioGroup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/render-element/RenderElement.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/render-element/RenderElement.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Lit_Template",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            sourceParts: {\n                jsFragment: () => `import { html } from 'https://unpkg.com/lit/index.js?module';\nimport { render } from 'https://unpkg.com/lit-html/lit-html.js?module';\n\nwindow.vueData = {\n    someData: {\n        hello: 'world',\n        'other-data': false\n    },\n    renderAsLit: async (data) => {\n        await new Promise((r) => setTimeout(() => r(), 3000));\n        return html\\`<span>\\${JSON.stringify(data)}</span>\\`;\n    }\n}`,\n                htmlFragment: `\n<omni-render-element \n    .data=\"someData\" \n    .renderer=\"renderAsLit\">\n</omni-render-element>`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                jsFragment: () => `const someData = {\n    hello: 'world',\n    'other-data': false\n};\nasync function renderAsLit(data) {\n    await new Promise((r) => setTimeout(() => r(), 3000));\n    return html\\`<span>\\${JSON.stringify(data)}</span>\\`;\n}`,\n                htmlFragment: `\n<omni-render-element \n    .data=\"\\${someData}\" \n    .renderer=\"\\${renderAsLit}\">\n</omni-render-element>`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: () => `\n \n<script type=\"module\">\n    import { html } from 'https://unpkg.com/lit/index.js?module';\n    import { render } from 'https://unpkg.com/lit-html/lit-html.js?module';\n\n    const someData = {\n        hello: 'world',\n        'other-data': false\n    };\n    async function renderAsLit(data) {\n        await new Promise((r) => setTimeout(() => r(), 3000));\n        return html\\`<span>\\${JSON.stringify(data)}</span>\\`;\n    }\n\n    render(html\\`                \n        <omni-render-element \n            .data=\"\\${someData}\" \n            .renderer=\"\\${renderAsLit}\">\n        </omni-render-element>\n    \\`, document.getElementById('root'));\n</script>  \n<div id=\"root\"></div>\n`\n            // disableCodePen: true\n        },\n        {\n            framework: 'React',\n            load: () => `import { OmniRenderElement } from \"@capitec/omni-components-react/render-element\";\nimport { html } from 'https://unpkg.com/lit/index.js?module';\n\nasync function renderAsLit(data) {\n    await new Promise((r) => setTimeout(() => r(), 3000));\n    return html\\`<span>\\${JSON.stringify(data)}</span>\\`;\n}\nconst App = () => <OmniRenderElement renderer={renderAsLit} data={{\n                    hello: 'world',\n                    'other-data': false\n                  }}/>;`\n        }\n    ],\n    name: 'Lit Template',\n    description: 'Render a Lit template string from the renderer function.',\n    render: (args: Args) => html`\n    <omni-render-element data-testid=\"test-render\" .data=\"${args.data}\" .renderer=\"${args.renderer}\"\n      >${\n          args.loading_indicator ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('loading_indicator', args.loading_indicator))}${'\\r\\n'}` : nothing\n      }</omni-render-element\n    >\n  `,\n    args: {\n        data: {\n            hello: 'world',\n            'other-data': false\n        },\n        renderer: renderAsLit,\n        loading_indicator: ''\n    } as Args\n}",
          "description": "Render a Lit template string from the renderer function."
        },
        {
          "kind": "variable",
          "name": "HTML_Element_Instance",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => {\n        const addValues = async () => {\n            let renderEl: RenderElement = undefined as any;\n            while (!renderEl) {\n                await new Promise<void>((r) => setTimeout(() => r(), 200));\n                renderEl = document.getElementById('renderElI') as RenderElement;\n            }\n\n            renderEl.renderer = args.renderer;\n            renderEl.data = args.data;\n        };\n        addValues();\n        return html` <omni-render-element id=\"renderElI\" data-testid=\"test-render\"></omni-render-element> `;\n    },\n    name: 'HTML Element Instance',\n    description: 'Render an HTMLElement instance from the renderer function.',\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            sourceParts: {\n                jsFragment: `window.vueData = {\n    someData: {\n        hello: 'world',\n        'other-data': false\n    },\n    renderAsElement: async (data) => {\n        await new Promise((r) => setTimeout(() => r(), 3000));\n        const span = document.createElement('span');\n        span.appendChild(document.createTextNode(JSON.stringify(data)));\n        span.addEventListener('click', (ev) => alert('Clicked'));\n        return span;\n    }\n}`,\n                htmlFragment: `\n<omni-render-element .renderer=\"renderAsElement\" .data=\"someData\"></omni-render-element>`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                jsFragment: () => `async function renderAsElement(data) {\n    await new Promise((r) => setTimeout(() => r(), 3000));\n    const span = document.createElement('span');\n    span.appendChild(document.createTextNode(JSON.stringify(data)));\n    span.addEventListener('click', (ev) => alert('Clicked'));\n    return span;\n}`,\n                htmlFragment: `\n<omni-render-element .renderer=\"\\${renderAsElement}\" .data=\"\\${{\n    hello: 'world',\n    'other-data': false\n}}\"></omni-render-element>`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: () => `\n<omni-render-element id=\"renderElI\"></omni-render-element>\n<script defer>\n    async function renderAsElement(data) {\n        await new Promise((r) => setTimeout(() => r(), 3000));\n        const span = document.createElement('span');\n        span.appendChild(document.createTextNode(JSON.stringify(data)));\n        span.addEventListener('click', (ev) => alert('Clicked'));\n        return span;\n    }\n    renderEl = document.getElementById('renderElI');\n\n\n    renderEl.renderer = renderAsElement;\n    renderEl.data = {\n            hello: 'world',\n            'other-data': false\n    };\n</script>`\n        },\n        {\n            framework: 'React',\n            load: () => `import { OmniRenderElement } from \"@capitec/omni-components-react/render-element\";\n\nasync function renderAsElement(data) {\n    await new Promise((r) => setTimeout(() => r(), 3000));\n    const span = document.createElement('span');\n    span.appendChild(document.createTextNode(JSON.stringify(data)));\n    span.addEventListener('click', (ev) => alert('Clicked'));\n    return span;\n}\nconst App = () => <OmniRenderElement renderer={renderAsElement} data={{\n                    hello: 'world',\n                    'other-data': false\n                  }}/>;`\n        }\n    ],\n    args: {\n        data: {\n            hello: 'world',\n            'other-data': false\n        },\n        renderer: renderAsElement\n    } as Args\n}"
        },
        {
          "kind": "variable",
          "name": "HTML_String",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => {\n        const addValues = async () => {\n            let renderEl: RenderElement = undefined as any;\n            while (!renderEl) {\n                renderEl = document.getElementById('renderElS') as RenderElement;\n                if (!renderEl) await new Promise<void>((r) => setTimeout(() => r(), 200));\n            }\n\n            renderEl.renderer = args.renderer;\n            renderEl.data = args.data;\n        };\n        addValues();\n        return html` <omni-render-element id=\"renderElS\" data-testid=\"test-render\"> </omni-render-element> `;\n    },\n    name: 'HTML String',\n    description: 'Render a string from the renderer function as html.',\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            sourceParts: {\n                jsFragment: `window.vueData = {\n    someData: {\n        hello: 'world',\n        'other-data': false\n    },\n    renderAsString: async (data) => {\n        await new Promise((r) => setTimeout(() => r(), 3000));\n        return \\`<span>\\${JSON.stringify(data)}</span>\\`;\n    }\n}`,\n                htmlFragment: `\n<omni-render-element .renderer=\"renderAsString\" .data=\"someData\"></omni-render-element>`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                jsFragment: () => `async function renderAsString(data) {\n    await new Promise((r) => setTimeout(() => r(), 3000));\n    return \\`<span>\\${JSON.stringify(data)}</span>\\`;\n}`,\n                htmlFragment: `\n<omni-render-element .renderer=\"\\${renderAsString}\" .data=\"\\${{\n    hello: 'world',\n    'other-data': false\n}}\"></omni-render-element>`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: () => `\n<omni-render-element id=\"renderElS\"></omni-render-element>\n<script defer>\n    async function renderAsString(data) {\n        await new Promise((r) => setTimeout(() => r(), 3000));\n        return \\`<span>\\${JSON.stringify(data)}</span>\\`;\n    }\n    renderEl = document.getElementById('renderElS');\n\n\n    renderEl.renderer = renderAsString;\n    renderEl.data = {\n            hello: 'world',\n            'other-data': false\n    };\n</script>`\n        },\n        {\n            framework: 'React',\n            load: () => `import { OmniRenderElement } from \"@capitec/omni-components-react/render-element\";\n\nasync function renderAsString(data) {\n    await new Promise((r) => setTimeout(() => r(), 3000));\n    return \\`<span>\\${JSON.stringify(data)}</span>\\`;\n}\nconst App = () => <OmniRenderElement renderer={renderAsString} data={{\n                    hello: 'world',\n                    'other-data': false\n                  }}/>;`\n        }\n    ],\n    args: {\n        data: {\n            hello: 'world',\n            'other-data': false\n        },\n        renderer: renderAsString\n    } as Args\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Lit_Template",
          "declaration": {
            "name": "Lit_Template",
            "module": "src/render-element/RenderElement.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HTML_Element_Instance",
          "declaration": {
            "name": "HTML_Element_Instance",
            "module": "src/render-element/RenderElement.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HTML_String",
          "declaration": {
            "name": "HTML_String",
            "module": "src/render-element/RenderElement.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/render-element/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./RenderElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-field/SearchField.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/search-field/SearchField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`\n        <omni-search-field\n            data-testid=\"test-search-field\"\n            label=\"${ifNotEmpty(args.label)}\"\n            value=\"${args.value}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            ?disabled=\"${args.disabled}\"\n            ?clearable=\"${args.clearable}\">${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n            ${args.clear ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args.clear))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix || args.clear ? '\\r\\n' : nothing}</omni-search-field>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' clearable', ' :clearable=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        clearable: false,\n        prefix: '',\n        suffix: '',\n        clear: ''\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Clearable"
        },
        {
          "kind": "variable",
          "name": "Custom_Clear_Slot"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Clearable",
          "declaration": {
            "name": "Clearable",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Clear_Slot",
          "declaration": {
            "name": "Custom_Clear_Slot",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/search-field/SearchField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/search-field/SearchField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select/Select.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/select/Select.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select\n            data-testid=\"test-select\"\n            label=\"${ifNotEmpty(args.label)}\"\n            value=\"${args.value}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            .items=\"${args.items}\"\n            display-field=\"${args.displayField}\"\n            .renderItem=\"${args.renderItem}\"\n            .renderSelection=\"${args.renderSelection}\"\n            .filterItems=\"${args.filterItems}\"\n            id-field=\"${args.idField}\"\n            ?disabled=\"${args.disabled}\"\n            ?clearable=\"${args.clearable}\"\n            ?searchable=\"${args.searchable}\"\n            empty-message=\"${args.emptyMessage}\"\n            >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n            ${args.clear ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args.clear))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }\n            ${args.loading_indicator ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('loading_indicator', args.loading_indicator))}${'\\r\\n'}` : nothing}${\n        args.prefix || args.suffix || args.clear ? '\\r\\n' : nothing\n    }</omni-select\n        >\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        Interactive.render!(args),\n                        (container) => container.firstElementChild?.setAttribute('replace-token', 'x'),\n                        (content) =>\n                            content\n                                .replace('replace-token=\"x\"', '.items=\"displayItems\"')\n                                .replace(' disabled', ' :disabled=\"true\"')\n                                .replace(' clearable', ' :clearable=\"true\"')\n                                .replace(' searchable', ' :searchable=\"true\"')\n                    ),\n                jsFragment: (args) => `window.vueData = {\n    displayItems: ${JSON.stringify(args.items, undefined, 2)}\n};`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        Interactive.render!(args),\n                        (container) => container.firstElementChild?.setAttribute('replace-token', 'x'),\n                        (content) => content.replace('replace-token=\"x\"', '.items=\"${displayItems}\"')\n                    ),\n                jsFragment: (args) => `const displayItems = ${JSON.stringify(args.items, undefined, 2)};`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) =>\n                getSourceFromLit(\n                    Interactive.render!(args),\n                    (container) => (container.firstElementChild!.id = 'omni-select'),\n                    (content) =>\n                        content +\n                        `\n<script defer>\n    const displayItems = ${JSON.stringify(args.items, undefined, 2)};       \n    const select = document.getElementById('omni-select');\n    select.items = displayItems;\n</script>`\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        clearable: false,\n        searchable: false,\n        prefix: '',\n        suffix: '',\n        clear: '',\n        items: displayItems as Record<string, unknown>[],\n        displayField: 'label',\n        idField: 'id',\n        loading_indicator: '',\n        emptyMessage: 'No items provided'\n    } as Args\n}"
        },
        {
          "kind": "variable",
          "name": "Async_Per_Item",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select\n            data-testid=\"test-select\"\n            label=\"${ifNotEmpty(args.label)}\"\n            .data=\"${args.data}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            .items=\"${args.items}\"\n            display-field=\"${args.displayField}\"\n            .renderItem=\"${args.renderItem}\"\n            id-field=\"${args.idField}\">\n        </omni-select>\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            load: (args) => `\n            \n<omni-select\n    id=\"omni-select\"\n    label=\"${args.label}\"\n    display-field=\"${args.displayField}\"\n    id-field=\"${args.idField}\">\n</omni-select>\n<script defer>\n    const displayItems = [\n        { id: '1', label: 'Peter Parker' },\n        { id: '2', label: 'James Howlett' },\n        { id: '3', label: 'Tony Stark' },\n        { id: '4', label: 'Steve Rodgers' },\n        { id: '5', label: 'Bruce Banner' },\n        { id: '6', label: 'Wanda Maximoff' },\n        { id: '7', label: 'TChalla' },\n        { id: '8', label: 'Henry P. McCoy' },\n        { id: '9', label: 'Carl Lucas' },\n        { id: '10', label: 'Frank Castle' }\n    ];\n                \n    async function promiseDisplayItems(data) {\n        await new Promise((r) => setTimeout(() => r(), 2000));\n        return data;\n    }\n                \n    async function renderItem(item) {\n        await new Promise((resolve, reject) => {\n            // Setting 2000 ms time\n            setTimeout(resolve, 2000);\n        });\n        const i = document.createElement('i');\n        i.innerText = item.label;\n        i.style.color = 'red';\n\n        return i;\n    }       \n    select = document.getElementById('omni-select');\n\n\n    select.renderItem = renderItem;\n    select.items = () => promiseDisplayItems(displayItems);\n</script>\n`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        Async_Per_Item.render!(args),\n                        (container) => container.firstElementChild?.setAttribute('replace-token', 'x'),\n                        (content) =>\n                            content\n                                .replace('replace-token=\"x\"', '.items=\"promiseDisplayItems\" :render-item.camel=\"renderItem\"')\n                                .replace(' disabled', ' :disabled=\"true\"')\n                                .replace(' clearable', ' :clearable=\"true\"')\n                                .replace(' searchable', ' :searchable=\"true\"')\n                    ),\n                jsFragment: (args) => `window.vueData = {\n    promiseDisplayItems: async () => {\n        await new Promise((r) => setTimeout(() => r(), 2000));\n        return [\n            { id: '1', label: 'Peter Parker' },\n            { id: '2', label: 'James Howlett' },\n            { id: '3', label: 'Tony Stark' },\n            { id: '4', label: 'Steve Rodgers' },\n            { id: '5', label: 'Bruce Banner' },\n            { id: '6', label: 'Wanda Maximoff' },\n            { id: '7', label: 'TChalla' },\n            { id: '8', label: 'Henry P. McCoy' },\n            { id: '9', label: 'Carl Lucas' },\n            { id: '10', label: 'Frank Castle' }\n        ];\n    },\n    renderItem: async (item) => {\n        await new Promise((resolve, reject) => {\n            // Setting 2000 ms time\n            setTimeout(resolve, 2000);\n        });\n        const i = document.createElement('i');\n        i.innerText = item.label;\n        i.style.color = 'red';\n    \n        return i;\n    }\n};`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`<omni-select label=\"${args.label}\" display-field=\"${args.displayField}\" .items=\"\\${() => promiseDisplayItems(displayItems)}\" .renderItem=\"\\${renderItem}\" id-field=\"${args.idField}\"></omni-select>`,\n                jsFragment: (args) => `const displayItems = [\n    { id: '1', label: 'Peter Parker' },\n    { id: '2', label: 'James Howlett' },\n    { id: '3', label: 'Tony Stark' },\n    { id: '4', label: 'Steve Rodgers' },\n    { id: '5', label: 'Bruce Banner' },\n    { id: '6', label: 'Wanda Maximoff' },\n    { id: '7', label: 'TChalla' },\n    { id: '8', label: 'Henry P. McCoy' },\n    { id: '9', label: 'Carl Lucas' },\n    { id: '10', label: 'Frank Castle' }\n];\n            \nconst promiseDisplayItems = async (data) => {\n    await new Promise((r) => setTimeout(() => r(), 2000));\n    return data;\n}\n            \nconst renderItem = async (item) => {\n    await new Promise((resolve, reject) => {\n        // Setting 2000 ms time\n        setTimeout(resolve, 2000);\n    });\n    const i = document.createElement('i');\n    i.innerText = item.label;\n    i.style.color = 'red';\n\n    return i;\n}\n`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSelect } from \"@capitec/omni-components-react/select\";\n\nconst displayItems = [\n    { id: '1', label: 'Peter Parker' },\n    { id: '2', label: 'James Howlett' },\n    { id: '3', label: 'Tony Stark' },\n    { id: '4', label: 'Steve Rodgers' },\n    { id: '5', label: 'Bruce Banner' },\n    { id: '6', label: 'Wanda Maximoff' },\n    { id: '7', label: 'TChalla' },\n    { id: '8', label: 'Henry P. McCoy' },\n    { id: '9', label: 'Carl Lucas' },\n    { id: '10', label: 'Frank Castle' }\n];\n            \nasync function promiseDisplayItems(data) {\n    await new Promise((r) => setTimeout(() => r(), 2000));\n    return data;\n}\n            \nasync function renderItem(item) {\n    await new Promise((resolve, reject) => {\n        // Setting 2000 ms time\n        setTimeout(resolve, 2000);\n    });\n    const i = document.createElement('i');\n    i.innerText = item.label;\n    i.style.color = 'red';\n\n    return i;\n}           \nconst App = () => <OmniSelect label=\"${args.label}\" display-field=\"${args.displayField}\" id-field=\"${args.idField}\" items={() => promiseDisplayItems(displayItems)} renderItem={renderItem} />;`\n        }\n    ],\n    name: 'Async',\n    description: 'Render each item from an async function.',\n    args: {\n        label: 'Async item renderer function',\n        data: {},\n        items: () => promiseDisplayItems(displayItems),\n        displayField: 'label',\n        idField: 'id',\n        renderItem: async (item: any) => {\n            await new Promise((resolve, reject) => {\n                // Setting 2000 ms time\n                setTimeout(resolve, 2000);\n            });\n            const i = document.createElement('i');\n            i.innerText = item.label;\n            i.style.color = 'red';\n\n            return i;\n        }\n    } as Args\n}",
          "description": "Render each item from an async function."
        },
        {
          "kind": "variable",
          "name": "Loading_Slot",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select\n            data-testid=\"test-select\"\n            label=\"${ifNotEmpty(args.label)}\"\n            .data=\"${args.data}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            .items=\"${args.items}\"\n            display-field=\"${args.displayField}\"\n            .renderItem=\"${args.renderItem}\"\n            id-field=\"${args.idField}\">\n            ${unsafeHTML(assignToSlot('loading_indicator', args.loading_indicator))}\n        </omni-select>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`<omni-select label=\"${args.label}\" display-field=\"${args.displayField}\" .items=\"\\${() => promiseDisplayItems(displayItems)}\" .renderItem=\"\\${renderItem}\" id-field=\"${args.idField}\">\n    <span slot=\"loading_indicator\">...</span>\n</omni-select>`,\n                jsFragment: `const displayItems = [\n    { id: '1', label: 'Peter Parker' },\n    { id: '2', label: 'James Howlett' },\n    { id: '3', label: 'Tony Stark' },\n    { id: '4', label: 'Steve Rodgers' },\n    { id: '5', label: 'Bruce Banner' },\n    { id: '6', label: 'Wanda Maximoff' },\n    { id: '7', label: 'TChalla' },\n    { id: '8', label: 'Henry P. McCoy' },\n    { id: '9', label: 'Carl Lucas' },\n    { id: '10', label: 'Frank Castle' }\n];\n            \nconst promiseDisplayItems = async (data) => {\n    await new Promise((r) => setTimeout(() => r(), 2000));\n    return data;\n}\n            \nconst renderItem = async (item) => {\n    await new Promise((resolve, reject) => {\n        // Setting 2000 ms time\n        setTimeout(resolve, 2000);\n    });\n    const i = document.createElement('i');\n    i.innerText = item.label;\n    i.style.color = 'red';\n\n    return i;\n}\n`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        Loading_Slot.render!(args),\n                        (container) => container.firstElementChild?.setAttribute('replace-token', 'x'),\n                        (content) =>\n                            content\n                                .replace('replace-token=\"x\"', '.items=\"promiseDisplayItems\" :render-item.camel=\"renderItem\"')\n                                .replace(' disabled', ' :disabled=\"true\"')\n                                .replace(' clearable', ' :clearable=\"true\"')\n                                .replace(' searchable', ' :searchable=\"true\"')\n                    ),\n                jsFragment: (args) => `window.vueData = {\n    promiseDisplayItems: async () => {\n        await new Promise((r) => setTimeout(() => r(), 2000));\n        return [\n            { id: '1', label: 'Peter Parker' },\n            { id: '2', label: 'James Howlett' },\n            { id: '3', label: 'Tony Stark' },\n            { id: '4', label: 'Steve Rodgers' },\n            { id: '5', label: 'Bruce Banner' },\n            { id: '6', label: 'Wanda Maximoff' },\n            { id: '7', label: 'TChalla' },\n            { id: '8', label: 'Henry P. McCoy' },\n            { id: '9', label: 'Carl Lucas' },\n            { id: '10', label: 'Frank Castle' }\n        ];\n    },\n    renderItem: async (item) => {\n        await new Promise((resolve, reject) => {\n            // Setting 2000 ms time\n            setTimeout(resolve, 2000);\n        });\n        const i = document.createElement('i');\n        i.innerText = item.label;\n        i.style.color = 'red';\n    \n        return i;\n    }\n};`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) => `\n            \n<omni-select\n    id=\"omni-select\"\n    label=\"${args.label}\"\n    display-field=\"${args.displayField}\"\n    id-field=\"${args.idField}\">\n    <span slot=\"loading_indicator\">...</span>\n</omni-select>\n<script defer>\n    const displayItems = [\n        { id: '1', label: 'Peter Parker' },\n        { id: '2', label: 'James Howlett' },\n        { id: '3', label: 'Tony Stark' },\n        { id: '4', label: 'Steve Rodgers' },\n        { id: '5', label: 'Bruce Banner' },\n        { id: '6', label: 'Wanda Maximoff' },\n        { id: '7', label: 'TChalla' },\n        { id: '8', label: 'Henry P. McCoy' },\n        { id: '9', label: 'Carl Lucas' },\n        { id: '10', label: 'Frank Castle' }\n    ];\n                \n    async function promiseDisplayItems(data) {\n        await new Promise((r) => setTimeout(() => r(), 2000));\n        return data;\n    }\n                \n    async function renderItem(item) {\n        await new Promise((resolve, reject) => {\n            // Setting 2000 ms time\n            setTimeout(resolve, 2000);\n        });\n        const i = document.createElement('i');\n        i.innerText = item.label;\n        i.style.color = 'red';\n\n        return i;\n    }       \n    select = document.getElementById('omni-select');\n\n\n    select.renderItem = renderItem;\n    select.items = () => promiseDisplayItems(displayItems);\n</script>\n`\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSelect } from \"@capitec/omni-components-react/select\";\n\nconst displayItems = [\n    { id: '1', label: 'Peter Parker' },\n    { id: '2', label: 'James Howlett' },\n    { id: '3', label: 'Tony Stark' },\n    { id: '4', label: 'Steve Rodgers' },\n    { id: '5', label: 'Bruce Banner' },\n    { id: '6', label: 'Wanda Maximoff' },\n    { id: '7', label: 'TChalla' },\n    { id: '8', label: 'Henry P. McCoy' },\n    { id: '9', label: 'Carl Lucas' },\n    { id: '10', label: 'Frank Castle' }\n];\n            \nasync function promiseDisplayItems(data) {\n    await new Promise((r) => setTimeout(() => r(), 2000));\n    return data;\n}\n            \nasync function renderItem(item) {\n    await new Promise((resolve, reject) => {\n        // Setting 2000 ms time\n        setTimeout(resolve, 2000);\n    });\n    const i = document.createElement('i');\n    i.innerText = item.label;\n    i.style.color = 'red';\n\n    return i;\n}           \nconst App = () => <OmniSelect label=\"${args.label}\" display-field=\"${args.displayField}\" id-field=\"${args.idField}\" items={() => promiseDisplayItems(displayItems)} renderItem={renderItem}>\n                    <span slot=\"loading_indicator\">...</span>\n                  </OmniSelect>;`\n        }\n    ],\n    name: 'Loading Slot',\n    description: 'Set html content to render while populating items list.',\n    args: {\n        label: 'Loading Slot',\n        data: {},\n        items: () => promiseDisplayItems(displayItems),\n        displayField: 'label',\n        idField: 'id',\n        renderItem: async (item: any) => {\n            await new Promise((resolve, reject) => {\n                // Setting 2000 ms time\n                setTimeout(resolve, 2000);\n            });\n            const i = document.createElement('i');\n            i.innerText = item.label;\n            i.style.color = 'red';\n\n            return i;\n        },\n        loading_indicator: raw`<span>...</span>`\n    } as Args\n}",
          "description": "Set html content to render while populating items list."
        },
        {
          "kind": "variable",
          "name": "String_Array",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select\n            data-testid=\"test-select\"\n            label=\"${ifNotEmpty(args.label)}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            .items=\"${args.items}\"\n            display-field=\"${args.displayField}\"\n            id-field=\"${args.idField}\">\n        </omni-select>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`<omni-select label=\"${args.label}\" display-field=\"${args.displayField}\" .items=\"\\${stringItems}\" id-field=\"${args.idField}\"></omni-select>`,\n                jsFragment: `const stringItems = ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan'];`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`<omni-select label=\"${args.label}\" display-field=\"${args.displayField}\" .items=\"stringItems\" id-field=\"${args.idField}\"></omni-select>`,\n                jsFragment: `window.vueData = {\n    stringItems: ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan']\n};`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) => `\n            \n<omni-select\n    id=\"omni-select\"\n    label=\"${args.label}\"\n    display-field=\"${args.displayField}\"\n    id-field=\"${args.idField}\">\n</omni-select>\n<script defer>\n    const stringItems = ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan'];  \n    select = document.getElementById('omni-select');\n\n    select.items = stringItems;\n</script>\n`\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSelect } from \"@capitec/omni-components-react/select\";\n\nconst stringItems = ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan'];    \nconst App = () => <OmniSelect label=\"${args.label}\" display-field=\"${args.displayField}\" id-field=\"${args.idField}\" items={stringItems} />;`\n        }\n    ],\n    name: 'String',\n    description: 'Use a string array as the items source.',\n    args: {\n        label: 'String',\n        items: stringItems,\n        displayField: 'label',\n        idField: 'id'\n    } as Args\n}",
          "description": "Use a string array as the items source."
        },
        {
          "kind": "variable",
          "name": "Selection_Renderer",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select\n            data-testid=\"test-select\"\n            label=\"${ifNotEmpty(args.label)}\"\n            hint=\"${ifNotEmpty(args.hint)}\"\n            error=\"${ifNotEmpty(args.error)}\"\n            .renderSelection=\"${args.renderSelection}\"\n            value=\"${args.value}\"\n            .items=\"${args.items}\"\n            display-field=\"${args.displayField}\"\n            id-field=\"${args.idField}\">\n        </omni-select>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`<omni-select label=\"${args.label}\" .items=\"\\${stringItems}\" .renderSelection=\"\\${renderSelection}\" value=\"${args.value}\"></omni-select>`,\n                jsFragment: `const stringItems = ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan'];\n\nasync function renderSelection(item) {\n    await new Promise((resolve, reject) => {\n        // Setting 2000 ms time\n        setTimeout(resolve, 2000);\n    });\n    const i = document.createElement('i');\n    i.innerText = item;\n    i.style.color = 'blue';\n    return i;\n}`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`<omni-select label=\"${args.label}\" .items=\"stringItems\" :render-selection.camel=\"renderSelection\" value=\"${args.value}\"></omni-select>`,\n                jsFragment: (args) => `window.vueData = {\n    stringItems: ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan'],\n    renderSelection: async (item) => {\n        await new Promise((resolve, reject) => {\n            // Setting 2000 ms time\n            setTimeout(resolve, 2000);\n        });\n        const i = document.createElement('i');\n        i.innerText = item;\n        i.style.color = 'blue';\n        return i;\n    }\n};`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) => `\n            \n<omni-select\n    id=\"omni-select\"\n    value=\"${args.value}\"\n    label=\"${args.label}\">\n</omni-select>\n<script defer>\n    const stringItems = ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan'];  \n    select = document.getElementById('omni-select');\n\n\n    async function renderSelection(item) {\n        await new Promise((resolve, reject) => {\n            // Setting 2000 ms time\n            setTimeout(resolve, 2000);\n        });\n        const i = document.createElement('i');\n        i.innerText = item;\n        i.style.color = 'blue';\n        return i;\n    }\n\n    select.renderSelection = renderSelection;\n    select.items = stringItems;\n</script>\n`\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSelect } from \"@capitec/omni-components-react/select\";\n\nasync function renderSelection(item) {\n    await new Promise((resolve, reject) => {\n        // Setting 2000 ms time\n        setTimeout(resolve, 2000);\n    });\n    const i = document.createElement('i');\n    i.innerText = item;\n    i.style.color = 'blue';\n    return i;\n}\nconst stringItems = ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan'];    \nconst App = () => <OmniSelect label=\"${args.label}\" value=\"${args.value}\" items={stringItems} renderSelection={renderSelection}/>;`\n        }\n    ],\n    name: 'Selection Renderer',\n    description: 'Provide a function to render custom html content for the selection.',\n    args: {\n        label: 'Selection Renderer',\n        items: stringItems,\n        renderSelection: async (item: any) => {\n            await new Promise((resolve, reject) => {\n                // Setting 2000 ms time\n                setTimeout(resolve, 2000);\n            });\n            const i = document.createElement('i');\n            i.innerText = item;\n            i.style.color = 'blue';\n            return i;\n        },\n        value: 'Clark Kent'\n    } as Args\n}",
          "description": "Provide a function to render custom html content for the selection."
        },
        {
          "kind": "variable",
          "name": "Empty_Message",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select\n            data-testid=\"test-select\"\n            label=\"${ifNotEmpty(args.label)}\"\n            .items=\"${args.items}\"\n            display-field=\"${args.displayField}\"\n            empty-message=\"${args.emptyMessage}\"\n            id-field=\"${args.idField}\">\n        </omni-select>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSelect } from \"@capitec/omni-components-react/select\";\n              \nconst App = () => <OmniSelect label=\"${args.label}\" display-field=\"${args.displayField}\" empty-message=\"${args.emptyMessage}\" id-field=\"${args.idField}\"/>;`\n        }\n    ],\n    name: 'Empty Message',\n    description: 'Set a text value to display when there are no items.',\n    args: {\n        label: 'Empty',\n        items: [],\n        emptyMessage: 'No items provided',\n        displayField: 'label',\n        idField: 'id'\n    } as Partial<Args>\n}",
          "description": "Set a text value to display when there are no items."
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select data-testid=\"test-select\" label=\"${ifNotEmpty(args.label)}\" .items=\"${args.items}\" ?disabled=\"${args.disabled}\">\n        </omni-select>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSelect } from \"@capitec/omni-components-react/select\";\n\nconst App = () => <OmniSelect label=\"${args.label}\" disabled/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Disabled.render!(args), undefined, (content) =>\n                    content\n                        .replace(' disabled', ' :disabled=\"true\"')\n                        .replace(' clearable', ' :clearable=\"true\"')\n                        .replace(' searchable', ' :searchable=\"true\"')\n                )\n        }\n    ],\n    name: 'Disabled',\n    description: 'Prevent interaction (pointer events).',\n    args: {\n        label: 'Disabled',\n        disabled: true,\n        items: displayItems as Record<string, unknown>[]\n    } as Args\n}",
          "description": "Prevent interaction (pointer events)."
        },
        {
          "kind": "variable",
          "name": "Custom_Control_Slot",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-select data-testid=\"test-select\" label=\"${ifNotEmpty(args.label)}\" .items=\"${args.items}\">\n            <svg slot=\"arrow\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" style=\"fill: orange;\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>\n            <svg slot=\"more\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" style=\"fill: orange;\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>\n        </omni-select>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`<omni-select label=\"${args.label}\" .items=\"\\${stringItems}\">\n    <svg slot=\"arrow\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" style=\"fill: orange;\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>\n    <svg slot=\"more\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" style=\"fill: orange;\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>\n</omni-select>`,\n                jsFragment: `const stringItems = ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan'];`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        Custom_Control_Slot.render!(args),\n                        (container) => container.firstElementChild?.setAttribute('replace-token', 'x'),\n                        (content) =>\n                            content\n                                .replace('replace-token=\"x\"', '.items=\"stringItems\"')\n                                .replace(' disabled', ' :disabled=\"true\"')\n                                .replace(' clearable', ' :clearable=\"true\"')\n                                .replace(' searchable', ' :searchable=\"true\"')\n                    ),\n                jsFragment: (args) => `window.vueData = {\n    stringItems: ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan']\n};`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) => `\n            \n<omni-select\n    id=\"omni-select\"\n    label=\"${args.label}\">\n        <svg slot=\"arrow\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" style=\"fill: orange;\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>\n        <svg slot=\"more\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" style=\"fill: orange;\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>\n</omni-select>\n<script defer>\n    const stringItems = ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan'];    \n\n    select = document.getElementById('omni-select');\n    select.items = stringItems;\n</script>\n`\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSelect } from \"@capitec/omni-components-react/select\";\n\nconst stringItems = ['Bruce Wayne', 'Clark Kent', 'Barry Allen', 'Arthur Curry', 'Hal Jordan'];           \nconst App = () => <OmniSelect label=\"${args.label}\" items={stringItems}>                    \n                    <svg slot=\"arrow\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" style={{fill: 'orange'}}><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>\n                    <svg slot=\"more\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" style={{fill: 'orange'}}><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z\"/></svg>\n                  </OmniSelect>;`\n        }\n    ],\n    name: 'Custom Control Slot',\n    description: 'Set html content to display within the available control slots.',\n    args: {\n        label: 'Custom slots',\n        items: stringItems\n    } as Args\n}",
          "description": "Set html content to display within the available control slots."
        },
        {
          "kind": "variable",
          "name": "Searchable",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-select data-testid=\"test-select\" label=\"${ifNotEmpty(args.label)}\" .items=\"${args.items}\" display-field=\"${args.displayField}\" id-field=\"${\n        args.idField\n    }\" ?searchable=\"${args.searchable}\">\n    </omni-select>\n`,\n    frameworkSources: [\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`<omni-select label=\"${args.label}\" display-field=\"${args.displayField}\" .items=\"\\${displayItems}\" id-field=\"${args.idField}\" searchable></omni-select>`,\n                jsFragment: `const displayItems = [\n    { id: '1', label: 'Peter Parker' },\n    { id: '2', label: 'James Howlett' },\n    { id: '3', label: 'Tony Stark' },\n    { id: '4', label: 'Steve Rodgers' },\n    { id: '5', label: 'Bruce Banner' },\n    { id: '6', label: 'Wanda Maximoff' },\n    { id: '7', label: 'TChalla' },\n    { id: '8', label: 'Henry P. McCoy' },\n    { id: '9', label: 'Carl Lucas' },\n    { id: '10', label: 'Frank Castle' }\n];`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        Searchable.render!(args),\n                        (container) => container.firstElementChild?.setAttribute('replace-token', 'x'),\n                        (content) =>\n                            content\n                                .replace('replace-token=\"x\"', '.items=\"displayItems\"')\n                                .replace(' disabled', ' :disabled=\"true\"')\n                                .replace(' clearable', ' :clearable=\"true\"')\n                                .replace(' searchable', ' :searchable=\"true\"')\n                    ),\n                jsFragment: (args) => `window.vueData = {\n    displayItems: [\n        { id: '1', label: 'Peter Parker' },\n        { id: '2', label: 'James Howlett' },\n        { id: '3', label: 'Tony Stark' },\n        { id: '4', label: 'Steve Rodgers' },\n        { id: '5', label: 'Bruce Banner' },\n        { id: '6', label: 'Wanda Maximoff' },\n        { id: '7', label: 'TChalla' },\n        { id: '8', label: 'Henry P. McCoy' },\n        { id: '9', label: 'Carl Lucas' },\n        { id: '10', label: 'Frank Castle' }\n    ]\n};`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (\n                args\n            ) => `<omni-select id='omni-select' label=\"${args.label}\" display-field=\"${args.displayField}\" id-field=\"${args.idField}\" searchable></omni-select>\n        <script defer>\n            const displayItems = [\n                { id: '1', label: 'Peter Parker' },\n                { id: '2', label: 'James Howlett' },\n                { id: '3', label: 'Tony Stark' },\n                { id: '4', label: 'Steve Rodgers' },\n                { id: '5', label: 'Bruce Banner' },\n                { id: '6', label: 'Wanda Maximoff' },\n                { id: '7', label: 'TChalla' },\n                { id: '8', label: 'Henry P. McCoy' },\n                { id: '9', label: 'Carl Lucas' },\n                { id: '10', label: 'Frank Castle' }\n            ];  \n            select = document.getElementById('omni-select');\n            select.items = displayItems;\n        </script>`\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSelect } from \"@capitec/omni-components-react/select\";\n\nconst displayItems = [\n    { id: '1', label: 'Peter Parker' },\n    { id: '2', label: 'James Howlett' },\n    { id: '3', label: 'Tony Stark' },\n    { id: '4', label: 'Steve Rodgers' },\n    { id: '5', label: 'Bruce Banner' },\n    { id: '6', label: 'Wanda Maximoff' },\n    { id: '7', label: 'TChalla' },\n    { id: '8', label: 'Henry P. McCoy' },\n    { id: '9', label: 'Carl Lucas' },\n    { id: '10', label: 'Frank Castle' }\n];\nconst App = () => <OmniSelect label=\"${args.label}\" display-field=\"${args.displayField}\" id-field=\"${args.idField}\" items={displayItems} searchable></OmniSelect>`\n        }\n    ],\n    name: 'Searchable',\n    description: 'Adds a search input to limit the options to Select',\n    args: {\n        label: 'Searchable',\n        displayField: 'label',\n        idField: 'id',\n        searchable: true,\n        items: displayItems as Record<string, unknown>[]\n    } as Args\n}",
          "description": "Adds a search input to limit the options to Select"
        },
        {
          "kind": "variable",
          "name": "Custom_Search",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-select data-testid=\"test-select\" label=\"${ifNotEmpty(args.label)}\" .items=\"${args.items}\" ?searchable=\"${args.searchable}\" .filterItems=\"${\n        args.filterItems\n    }\">\n    </omni-select>\n`,\n    frameworkSources: [\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`<omni-select label=\"${args.label}\"  .items=\"\\${stringItems}\" .filterItems=\"\\${customSearch}\" searchable></omni-select>`,\n                jsFragment: `const stringItems = [\n    'Bruce Wayne', \n    'Clark Kent', \n    'Barry Allen', \n    'Arthur Curry', \n    'Hal Jordan'\n]; \n            \nfunction customSearch(filter, items){\n    if(Array.isArray(items) && filter !== null) {\n        return items = items.filter((i) => itemFilter(filter,i));\n    } else {\n        return items;\n    }\n}\nfunction itemFilter(filter, item){\n    return item.includes(filter);\n}\n`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        Custom_Search.render!(args),\n                        (container) => container.firstElementChild?.setAttribute('replace-token', 'x'),\n                        (content) =>\n                            content\n                                .replace('replace-token=\"x\"', '.items=\"stringItems\" :filter-items.camel=\"customSearch\"')\n                                .replace(' disabled', ' :disabled=\"true\"')\n                                .replace(' clearable', ' :clearable=\"true\"')\n                                .replace(' searchable', ' :searchable=\"true\"')\n                    ),\n                jsFragment: (args) => `function itemFilter(filter, item){\n    return item.includes(filter);\n}\n\nwindow.vueData = {\n    stringItems: [\n        'Bruce Wayne', \n        'Clark Kent', \n        'Barry Allen', \n        'Arthur Curry', \n        'Hal Jordan'\n    ],\n    customSearch: (filter, items) => {\n        if(Array.isArray(items) && filter !== null) {\n            return items = items.filter((i) => itemFilter(filter,i));\n        } else {\n            return items;\n        }\n    }\n};`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) => `<omni-select id='omni-select' label=\"${args.label}\" searchable></omni-select>\n    <script defer>\n        const stringItems = [\n            'Bruce Wayne', \n            'Clark Kent', \n            'Barry Allen', \n            'Arthur Curry', \n            'Hal Jordan'\n        ];  \n        function customSearch(filter, items){\n            if(Array.isArray(items) && filter !== null) {\n                return items = items.filter((i) => itemFilter(filter,i));\n            } else {\n                return items;\n            }\n        }\n        function itemFilter(filter, item){\n            return item.includes(filter);\n        }\n        select = document.getElementById('omni-select');\n        select.items = stringItems;\n        select.filterItems = customSearch;\n    </script>`\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSelect } from \"@capitec/omni-components-react/select\";\n\nconst stringItems = [\n    'Bruce Wayne', \n    'Clark Kent', \n    'Barry Allen', \n    'Arthur Curry', \n    'Hal Jordan'\n];\nfunction customSearch(filter, items){\n    if(Array.isArray(items) && filter !== null){\n        return items = items.filter((i) => itemFilter(filter,i));\n    } else {\n        return items;\n    }\n}\nfunction itemFilter(filter, item){\n    return item.includes(filter);\n}\nconst App = () => <OmniSelect label=\"${args.label}\" items={stringItems} filterItems={customSearch} searchable>\n</OmniSelect>`\n        }\n    ],\n    name: 'Custom Search',\n    description: 'Custom search function',\n    args: {\n        label: 'Custom Search',\n        searchable: true,\n        items: stringItems,\n        filterItems: customSearch\n    } as Args\n}",
          "description": "Custom search function"
        },
        {
          "kind": "variable",
          "name": "Server_Side_Filtering",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-select data-testid=\"test-select\" label=\"${ifNotEmpty(args.label)}\" .items=\"${args.items}\" ?searchable=\"${args.searchable}\">\n    </omni-select>\n`,\n    frameworkSources: [\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) => raw`<omni-select label=\"${args.label}\" .items=\"\\${serverSideFilterItems}\" searchable></omni-select>`,\n                jsFragment: `const stringItems = [\n    'Bruce Wayne', \n    'Clark Kent', \n    'Barry Allen', \n    'Arthur Curry', \n    'Hal Jordan'\n];\n\nasync function serverSideFilterItems(filter){\n    await new Promise((r) => setTimeout(() => r(), 2000));\n    return customSearch(filter,stringItems);\n}\n\nfunction customSearch(filter, items){\n    if(Array.isArray(items) && filter !== null) {\n        return items = items.filter((i) => itemFilter(filter,i));\n    } else {\n        return items;\n    }\n}\nfunction itemFilter(filter, item){\n    return item.includes(filter);\n} \n`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        Server_Side_Filtering.render!(args),\n                        (container) => container.firstElementChild?.setAttribute('replace-token', 'x'),\n                        (content) =>\n                            content\n                                .replace('replace-token=\"x\"', '.items=\"serverSideFilterItems\"')\n                                .replace(' disabled', ' :disabled=\"true\"')\n                                .replace(' clearable', ' :clearable=\"true\"')\n                                .replace(' searchable', ' :searchable=\"true\"')\n                    ),\n                jsFragment: (args) => `const stringItems = [\n    'Bruce Wayne', \n    'Clark Kent', \n    'Barry Allen', \n    'Arthur Curry', \n    'Hal Jordan'\n];\n\nasync function serverSideFilterItems(filter){\n    await new Promise((r) => setTimeout(() => r(), 2000));\n    return customSearch(filter,stringItems);\n}\n\nfunction customSearch(filter, items){\n    if(Array.isArray(items) && filter) {\n        return items = items.filter((i) => itemFilter(filter,i));\n    } else {\n        return items;\n    }\n}\nfunction itemFilter(filter, item){\n    return item.includes(filter);\n}\nwindow.vueData = {\n    serverSideFilterItems: serverSideFilterItems\n};`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) => `<omni-select id='omni-select' label=\"${args.label}\" searchable></omni-select>\n    <script defer>\n        const stringItems = [\n            'Bruce Wayne', \n            'Clark Kent', \n            'Barry Allen', \n            'Arthur Curry', \n            'Hal Jordan'\n        ]; \n        async function searchFilter(filter){\n            await new Promise((r) => setTimeout(() => r(), 2000));\n            return customSearch(filter,stringItems);\n        }\n        \n        function customSearch(filter, items){\n            if(Array.isArray(items) && filter) {\n                return items = items.filter((i) => itemFilter(filter,i));\n            } else {\n                return items;\n            }\n        }\n\n        function itemFilter(filter, item){\n            return item.includes(filter);\n        }\n        select = document.getElementById('omni-select');\n        select.items = searchFilter;\n    </script>`\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSelect } from \"@capitec/omni-components-react/select\";\n\nconst stringItems = [\n    'Bruce Wayne', \n    'Clark Kent', \n    'Barry Allen', \n    'Arthur Curry', \n    'Hal Jordan'\n];\nasync function searchFilter(filter){\n    await new Promise((r) => setTimeout(() => r(), 2000));\n    return customSearch(filter,stringItems);\n}\nfunction customSearch(filter, items){\n    if(Array.isArray(items) && filter){\n        return items = items.filter((i) => itemFilter(filter,i));\n    } else {\n        return items;\n    }\n}\nfunction itemFilter(filter, item){\n    return item.includes(filter);\n}\n\nconst App = () => <OmniSelect label=\"${args.label}\" items={searchFilter} searchable></OmniSelect>`\n        }\n    ],\n    name: 'Server Side Filtering',\n    description: 'Select with server side filtering',\n    args: {\n        label: 'Server Side Filtering',\n        searchable: true,\n        items: promiseSearchFilter\n    } as Args\n}",
          "description": "Select with server side filtering"
        },
        {
          "kind": "variable",
          "name": "Custom_Search_Slot",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-select data-testid=\"test-select\" label=\"${ifNotEmpty(args.label)}\" .items=\"${args.items}\" ?searchable=\"${args.searchable}\">\n    <svg slot=\"search-clear\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  width=\"24px\" height=\"24px\" style=\"fill: orange;\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM8.47 8.47a.75.75 0 0 1 1.06 0L12 10.939l2.47-2.47a.75.75 0 0 1 .976-.072l.084.073a.75.75 0 0 1 0 1.06L13.061 12l2.47 2.47a.75.75 0 0 1 .072.976l-.073.084a.75.75 0 0 1-1.06 0L12 13.061l-2.47 2.47a.75.75 0 0 1-.976.072l-.084-.073a.75.75 0 0 1 0-1.06L10.939 12l-2.47-2.47a.75.75 0 0 1-.072-.976Z\" /></svg>\n    </omni-select>\n`,\n    frameworkSources: [\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    raw`<omni-select label=\"${args.label}\" .items=\"\\${stringItems}\" searchable>\n    <svg slot=\"search-clear\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  width=\"24px\" height=\"24px\" style=\"fill: orange;\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM8.47 8.47a.75.75 0 0 1 1.06 0L12 10.939l2.47-2.47a.75.75 0 0 1 .976-.072l.084.073a.75.75 0 0 1 0 1.06L13.061 12l2.47 2.47a.75.75 0 0 1 .072.976l-.073.084a.75.75 0 0 1-1.06 0L12 13.061l-2.47 2.47a.75.75 0 0 1-.976.072l-.084-.073a.75.75 0 0 1 0-1.06L10.939 12l-2.47-2.47a.75.75 0 0 1-.072-.976Z\" /></svg>\n</omni-select>`,\n                jsFragment: `const stringItems = [\n    'Bruce Wayne', \n    'Clark Kent', \n    'Barry Allen', \n    'Arthur Curry', \n    'Hal Jordan'\n];  `\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        Custom_Search_Slot.render!(args),\n                        (container) => container.firstElementChild?.setAttribute('replace-token', 'x'),\n                        (content) =>\n                            content\n                                .replace('replace-token=\"x\"', '.items=\"stringItems\"')\n                                .replace(' disabled', ' :disabled=\"true\"')\n                                .replace(' clearable', ' :clearable=\"true\"')\n                                .replace(' searchable', ' :searchable=\"true\"')\n                    ),\n                jsFragment: `const stringItems = [\n    'Bruce Wayne', \n    'Clark Kent', \n    'Barry Allen', \n    'Arthur Curry', \n    'Hal Jordan'\n];\nwindow.vueData = {\n    stringItems: stringItems\n};`\n            }\n        },\n        {\n            framework: 'HTML',\n            load: (args) => `\n            <omni-select id='omni-select' label=\"${args.label}\" searchable>\n              <svg slot=\"search-clear\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  width=\"24px\" height=\"24px\" style=\"fill: orange;\"><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM8.47 8.47a.75.75 0 0 1 1.06 0L12 10.939l2.47-2.47a.75.75 0 0 1 .976-.072l.084.073a.75.75 0 0 1 0 1.06L13.061 12l2.47 2.47a.75.75 0 0 1 .072.976l-.073.084a.75.75 0 0 1-1.06 0L12 13.061l-2.47 2.47a.75.75 0 0 1-.976.072l-.084-.073a.75.75 0 0 1 0-1.06L10.939 12l-2.47-2.47a.75.75 0 0 1-.072-.976Z\" /></svg>\n            </omni-select>\n    <script defer>\n        const stringItems = [\n            'Bruce Wayne', \n            'Clark Kent', \n            'Barry Allen', \n            'Arthur Curry', \n            'Hal Jordan'\n        ];  \n        select = document.getElementById('omni-select');\n        select.items = stringItems;\n    </script>`\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSelect } from \"@capitec/omni-components-react/select\";\n\nconst stringItems = [\n    'Bruce Wayne', \n    'Clark Kent', \n    'Barry Allen', \n    'Arthur Curry', \n    'Hal Jordan'\n];\nconst App = () => <OmniSelect label=\"${args.label}\" items={stringItems} searchable>\n<svg slot=\"search-clear\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" style={{fill: 'orange'}}><path d=\"M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM8.47 8.47a.75.75 0 0 1 1.06 0L12 10.939l2.47-2.47a.75.75 0 0 1 .976-.072l.084.073a.75.75 0 0 1 0 1.06L13.061 12l2.47 2.47a.75.75 0 0 1 .072.976l-.073.084a.75.75 0 0 1-1.06 0L12 13.061l-2.47 2.47a.75.75 0 0 1-.976.072l-.084-.073a.75.75 0 0 1 0-1.06L10.939 12l-2.47-2.47a.75.75 0 0 1-.072-.976Z\" /></svg>\n</OmniSelect>`\n        }\n    ],\n    name: 'Custom Search Field Slot',\n    description: 'Select component with search field custom slotted icon.',\n    args: {\n        label: 'Custom Search Slot',\n        searchable: true,\n        items: stringItems\n    } as Args\n}",
          "description": "Select component with search field custom slotted icon."
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Clearable"
        },
        {
          "kind": "variable",
          "name": "Custom_Clear_Slot"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Async_Per_Item",
          "declaration": {
            "name": "Async_Per_Item",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Loading_Slot",
          "declaration": {
            "name": "Loading_Slot",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "String_Array",
          "declaration": {
            "name": "String_Array",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Selection_Renderer",
          "declaration": {
            "name": "Selection_Renderer",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Empty_Message",
          "declaration": {
            "name": "Empty_Message",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Control_Slot",
          "declaration": {
            "name": "Custom_Control_Slot",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Searchable",
          "declaration": {
            "name": "Searchable",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Search",
          "declaration": {
            "name": "Custom_Search",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Server_Side_Filtering",
          "declaration": {
            "name": "Server_Side_Filtering",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Search_Slot",
          "declaration": {
            "name": "Custom_Search_Slot",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Clearable",
          "declaration": {
            "name": "Clearable",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Clear_Slot",
          "declaration": {
            "name": "Custom_Clear_Slot",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/select/Select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/select/Select.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Select.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/Switch.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/Switch.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-switch\n      data-testid=\"test-switch\"\n      label=\"${ifNotEmpty(args.label)}\"\n      .data=\"${args.data}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?checked=\"${args.checked}\"\n      ?disabled=\"${args.disabled}\">${unsafeHTML(args['[Default Slot]'])}</omni-switch>\n  `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: '',\n        data: {},\n        hint: '',\n        error: '',\n        checked: false,\n        disabled: false,\n        '[Default Slot]': undefined\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-switch data-testid=\"test-switch\" label=\"${args.label}\"></omni-switch> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSwitch } from \"@capitec/omni-components-react/switch\";\n\nconst App = () => <OmniSwitch${args.label ? ` label='${args.label}'` : ''}/>;`\n        }\n    ],\n    description: 'Set text content to display next to the component.',\n    args: {\n        label: 'Label'\n    }\n}",
          "description": "Set text content to display next to the component."
        },
        {
          "kind": "variable",
          "name": "Hint",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-switch data-testid=\"test-switch\" label=\"${args.label}\" hint=\"${args.hint}\"></omni-switch> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSwitch } from \"@capitec/omni-components-react/switch\";\n\nconst App = () => <OmniSwitch${args.label ? ` label='${args.label}'` : ''}${args.hint ? ` hint='${args.hint}'` : ''}/>;`\n        }\n    ],\n    description: 'Set text content to display as a hint.',\n    args: {\n        label: 'Hint',\n        hint: 'This is a hint'\n    }\n}",
          "description": "Set text content to display as a hint."
        },
        {
          "kind": "variable",
          "name": "Error_Label",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    name: 'Error', // Explicitly named as error, the exported name cannot be 'Error' as that is reserved\n    render: (args: Args) => html` <omni-switch data-testid=\"test-switch\" label=\"${args.label}\" error=\"${args.error}\"></omni-switch> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSwitch } from \"@capitec/omni-components-react/switch\";\n\nconst App = () => <OmniSwitch${args.label ? ` label='${args.label}'` : ''}${args.error ? ` error='${args.error}'` : ''}/>;`\n        }\n    ],\n    description: 'Set text content to display as an error.',\n    args: {\n        label: 'Error',\n        error: 'This is an error state'\n    }\n}",
          "description": "Set text content to display as an error."
        },
        {
          "kind": "variable",
          "name": "Checked",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-switch data-testid=\"test-switch\" label=\"${args.label}\" ?checked=\"${args.checked}\"></omni-switch> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSwitch } from \"@capitec/omni-components-react/switch\";\n\nconst App = () => <OmniSwitch${args.label ? ` label='${args.label}'` : ''}${args.checked ? ` checked` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Checked!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    description: 'Set the component to a checked state.',\n    args: {\n        label: 'Checked',\n        checked: true\n    }\n}",
          "description": "Set the component to a checked state."
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html` <omni-switch data-testid=\"test-switch\" label=\"${args.label}\" ?disabled=\"${args.disabled}\"></omni-switch> `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSwitch } from \"@capitec/omni-components-react/switch\";\n\nconst App = () => <OmniSwitch${args.label ? ` label='${args.label}'` : ''}${args.disabled ? ` disabled` : ''}/>;`\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Disabled!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' checked', ' :checked=\"true\"')\n                )\n        }\n    ],\n    description: 'Prevent interaction (pointer events).',\n    args: {\n        label: 'Disabled',\n        disabled: true\n    }\n}",
          "description": "Prevent interaction (pointer events)."
        },
        {
          "kind": "variable",
          "name": "Slot",
          "default": "{\n    render: () => html`\n        <omni-switch data-testid=\"test-switch\">Slotted</omni-switch>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniSwitch } from \"@capitec/omni-components-react/switch\";\n\nconst App = () => <OmniSwitch>\n                    Slotted\n                  </OmniSwitch>;`\n        }\n    ],\n    name: 'Slot',\n    description: 'Set content to display within.',\n    args: {}\n}",
          "description": "Set content to display within."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checked",
          "declaration": {
            "name": "Checked",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/switch/Switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slot",
          "declaration": {
            "name": "Slot",
            "module": "src/switch/Switch.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tab/Tab.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/tab/Tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control that can be used to display slotted content, for use within an Tab Group component.",
          "name": "Tab",
          "cssProperties": [
            {
              "description": "Tab background.",
              "name": "--omni-tab-background-color"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside the component body.",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tab header label, use the omni-tab-header component for more complex header layouts",
              "attribute": "header",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the tab is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the tab is active.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "header",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tab header label, use the omni-tab-header component for more complex header layouts",
              "fieldName": "header",
              "attribute": "header"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the tab is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicator if the tab is active.",
              "fieldName": "active",
              "attribute": "active"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-tab",
          "import": "```js\nimport '@capitec/omni-components/tab';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tab",
          "declaration": {
            "name": "Tab",
            "module": "/Users/runner/work/omni-components/omni-components/src/tab/Tab.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-tab",
          "declaration": {
            "name": "Tab",
            "module": "/Users/runner/work/omni-components/omni-components/src/tab/Tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/tab/TabHeader.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Control that can be used to display custom slotted content, for use within Tab Group component with associated Tab component.",
          "name": "TabHeader",
          "cssProperties": [
            {
              "description": "Tab header font color.",
              "name": "--omni-tab-header-font-color"
            },
            {
              "description": "Tab header font family.",
              "name": "--omni-tab-header-font-family"
            },
            {
              "description": "Tab header font size.",
              "name": "--omni-tab-header-font-size"
            },
            {
              "description": "Tab header font weight.",
              "name": "--omni-tab-header-font-weight"
            },
            {
              "description": "Tab header height.",
              "name": "--omni-tab-header-height"
            },
            {
              "description": "Tab header width.",
              "name": "--omni-tab-header-width"
            },
            {
              "description": "Tab header disabled cursor.",
              "name": "--omni-tab-header-disabled-cursor"
            },
            {
              "description": "Tab header disabled background color.",
              "name": "--omni-tab-header-disabled-background-color"
            },
            {
              "description": "Tab header active font color.",
              "name": "--omni-tab-header-active-font-color"
            },
            {
              "description": "Tab header tab height.",
              "name": "--omni-tab-header-height"
            },
            {
              "description": "Tab header tab min width.",
              "name": "--omni-tab-header-min-width"
            },
            {
              "description": "Tab header tab max width.",
              "name": "--omni-tab-header-max-width"
            },
            {
              "description": "Tab header tab margin.",
              "name": "--omni-tab-header-margin"
            },
            {
              "description": "Tab header tab hover background.",
              "name": "--omni-tab-header-hover-background-color"
            },
            {
              "description": "Tab header indicator bar height.",
              "name": "--omni-tab-header-indicator-bar-height"
            },
            {
              "description": " Tab header indicator bar border radius.",
              "name": "--omni-tab-header-indicator-bar-border-radius"
            },
            {
              "description": "Tab header indicator bar width.",
              "name": "--omni-tab-header-indicator-bar-width"
            },
            {
              "description": "Tab header indicator height.",
              "name": "--omni-tab-header-indicator-height"
            },
            {
              "description": "Tab header indicator color.",
              "name": "--omni-tab-header-indicator-color"
            },
            {
              "description": "Tab header indicator border radius.",
              "name": "--omni-tab-header-indicator-border-radius"
            },
            {
              "description": "Tab header indicator width.",
              "name": "--omni-tab-header-indicator-width"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render inside the tab header.",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "for",
              "type": {
                "text": "string | undefined"
              },
              "description": "Indicator of which omni-tab element with the matching corresponding id attribute should be displayed.",
              "attribute": "for",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "Data associated with the component."
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "for",
              "type": {
                "text": "string | undefined"
              },
              "description": "Indicator of which omni-tab element with the matching corresponding id attribute should be displayed.",
              "fieldName": "for",
              "attribute": "for"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-tab-header",
          "import": "```js\nimport '@capitec/omni-components/tab';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabHeader",
          "declaration": {
            "name": "TabHeader",
            "module": "/Users/runner/work/omni-components/omni-components/src/tab/TabHeader.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-tab-header",
          "declaration": {
            "name": "TabHeader",
            "module": "/Users/runner/work/omni-components/omni-components/src/tab/TabHeader.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/tab/TabGroup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component that displays content in tabs.",
          "name": "TabGroup",
          "cssProperties": [
            {
              "description": "Tabs tab bar width.",
              "name": "--omni-tab-group-tab-bar-width"
            },
            {
              "description": "Tabs tab bar height.",
              "name": "--omni-tab-group-tab-bar-height"
            },
            {
              "description": "Tabs tab bar bottom border.",
              "name": "--omni-tab-group-tab-bar-border-bottom"
            },
            {
              "description": "Tabs tab bar background color.",
              "name": "--omni-tab-group-tab-bar-background-color"
            },
            {
              "description": "Tab header font color.",
              "name": "--omni-tab-header-font-color"
            },
            {
              "description": "Tab header font family.",
              "name": "--omni-tab-header-font-family"
            },
            {
              "description": "Tab header font size.",
              "name": "--omni-tab-header-font-size"
            },
            {
              "description": "Tab header font weight.",
              "name": "--omni-tab-header-font-weight"
            },
            {
              "description": "Tab header height.",
              "name": "--omni-tab-header-height"
            },
            {
              "description": "Tab header width.",
              "name": "--omni-tab-header-width"
            },
            {
              "description": "Tab header disabled cursor.",
              "name": "--omni-tab-header-disabled-cursor"
            },
            {
              "description": "Tab header disabled background color.",
              "name": "--omni-tab-header-disabled-background-color"
            },
            {
              "description": "Tab header active font color.",
              "name": "--omni-tab-header-active-font-color"
            },
            {
              "description": "Tab header tab height.",
              "name": "--omni-tab-header-height"
            },
            {
              "description": "Tab header tab min width.",
              "name": "--omni-tab-header-min-width"
            },
            {
              "description": "Tab header tab max width.",
              "name": "--omni-tab-header-max-width"
            },
            {
              "description": "Tab header tab margin.",
              "name": "--omni-tab-header-margin"
            },
            {
              "description": "Tab header tab hover background.",
              "name": "--omni-tab-header-hover-background-color"
            },
            {
              "description": "Tab header indicator bar height.",
              "name": "--omni-tab-header-indicator-bar-height"
            },
            {
              "description": " Tab header indicator bar border radius.",
              "name": "--omni-tab-header-indicator-bar-border-radius"
            },
            {
              "description": "Tab header indicator bar width.",
              "name": "--omni-tab-header-indicator-bar-width"
            },
            {
              "description": "Tab header indicator height.",
              "name": "--omni-tab-header-indicator-height"
            },
            {
              "description": "Tab header indicator color.",
              "name": "--omni-tab-header-indicator-color"
            },
            {
              "description": "Tab header indicator border radius.",
              "name": "--omni-tab-header-indicator-border-radius"
            },
            {
              "description": "Tab header indicator width.",
              "name": "--omni-tab-header-indicator-width"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "All omni-tab components that are managed by this component.",
              "name": "[Default Slot]"
            },
            {
              "description": "Optional omni-tab-header components associated with each omni-tab component.",
              "name": "header"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_observer",
              "type": {
                "text": "MutationObserver | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "selectTab",
              "parameters": [
                {
                  "name": "tabHeader",
                  "type": {
                    "text": "TabHeader"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "tab-select",
              "type": {
                "text": "CustomEvent<{ previous: HTMLElement, selected: HTMLElement}>"
              },
              "description": "Dispatched when an omni-tab is selected."
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-tab-group",
          "cssInherit": [
            "omni-tab-header"
          ],
          "import": "```js\nimport '@capitec/omni-components/tab';\n```",
          "customElement": true,
          "attributes": [
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "activeAttribute",
          "type": {
            "text": "string"
          },
          "default": "'active'",
          "description": "Indicates which slot is active"
        },
        {
          "kind": "variable",
          "name": "disabledAttribute",
          "type": {
            "text": "string"
          },
          "default": "'disabled'"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabGroup",
          "declaration": {
            "name": "TabGroup",
            "module": "/Users/runner/work/omni-components/omni-components/src/tab/TabGroup.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-tab-group",
          "declaration": {
            "name": "TabGroup",
            "module": "/Users/runner/work/omni-components/omni-components/src/tab/TabGroup.ts"
          }
        },
        {
          "kind": "js",
          "name": "activeAttribute",
          "declaration": {
            "name": "activeAttribute",
            "module": "/Users/runner/work/omni-components/omni-components/src/tab/TabGroup.ts"
          }
        },
        {
          "kind": "js",
          "name": "disabledAttribute",
          "declaration": {
            "name": "disabledAttribute",
            "module": "/Users/runner/work/omni-components/omni-components/src/tab/TabGroup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tab/Tab.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Basic",
          "default": "{\n    render: () => html`\n    <omni-tab-group data-testid=\"test-tab-group\">\n        <omni-tab header=\"Tab 1\">\n            <div>Tab 1 Content</div>\n        </omni-tab>\n     <omni-tab header=\"Tab 2\">\n        <div>Tab 2 Content</div>\n    </omni-tab>\n    <omni-tab header=\"Tab 3\">\n        <div>Tab 3 Content</div>\n    </omni-tab>\n    </omni-tab-group>\n`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: () => `import { OmniTabGroup, OmniTab } from \"@capitec/omni-components-react/tab\";\nimport { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () =>\n<OmniTabGroup>\n <OmniTab header=\"Tab 1\">\n    <OmniLabel label=\"Label of Tab 1\"/>\n </OmniTab>\n <OmniTab header=\"Tab 2\">\n    <OmniLabel label=\"Label of Tab 2\"/>\n </OmniTab>\n <OmniTab header=\"Tab 3\">\n    <OmniLabel label=\"Label of Tab 3\"/>\n </OmniTab>\n</OmniTabGroup>;`\n        }\n    ],\n    name: 'Basic',\n    description: () => html`\n    <div>\n        This is the recommended use. Headers for each tab is set by the <code>header</code> attribute.\n    <div>\n    `\n}",
          "description": "\n    <div>\n        This is the recommended use. Headers for each tab is set by the <code>header</code> attribute.\n    <div>\n    "
        },
        {
          "kind": "variable",
          "name": "Active",
          "default": "{\n    render: () => html`\n    <omni-tab-group data-testid='test-tab-group'>\n        <omni-tab header=\"Tab 1\">\n            <omni-label label=\"Label of Tab 1\"></omni-label>\n        </omni-tab>\n        <omni-tab header=\"Tab 2\" active>\n            <omni-label label=\"Label of Tab 2\"></omni-label>\n        </omni-tab>\n        <omni-tab header=\"Tab 3\">\n            <omni-label label=\"Label of Tab 3\"></omni-label>\n        </omni-tab>\n    </omni-tab-group>\n`,\n\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) => getSourceFromLit(Active?.render?.(args), undefined, (s) => s.replace(' active', ' :active=\"true\"'))\n        },\n        {\n            framework: 'React',\n            load: () => `import { OmniTabGroup, OmniTab } from \"@capitec/omni-components-react/tab\";\nimport { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () =>\n<OmniTabGroup>\n <OmniTab header=\"Tab 1\">\n     <OmniLabel label='Label of Tab 1'/>\n </OmniTab>\n <OmniTab header=\"Tab 2\" active>\n     <OmniLabel label='Label of Tab 2'/>\n </OmniTab>\n <OmniTab header=\"Tab 3\">\n     <OmniLabel label='Label of Tab 3'/>\n </OmniTab>\n</OmniTabGroup>;`\n        }\n    ],\n    args: {},\n    name: 'Active',\n    description: () => html`\n    <div>\n     Set the <code>active</code> attribute on an <code class=\"language-html\">&lt;omni-tab&gt;</code> to indicate its active. By default, the first slotted one is active.\n    <div>\n    `\n}",
          "description": "\n    <div>\n     Set the <code>active</code> attribute on an <code class=\"language-html\">&lt;omni-tab&gt;</code> to indicate its active. By default, the first slotted one is active.\n    <div>\n    "
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "default": "{\n    render: () => html`\n    <omni-tab-group data-testid=\"test-tab-group\">\n        <omni-tab header=\"Tab 1\">\n            <omni-label label=\"Label of Tab 1\"></omni-label>\n        </omni-tab>\n        <omni-tab header=\"Tab 2\">\n            <omni-label label=\"Label of Tab 2\"></omni-label>\n        </omni-tab>\n        <omni-tab header=\"Tab 3\" disabled>\n            <omni-label label=\"Label of Tab 3\"></omni-label>\n        </omni-tab>\n    </omni-tab-group>\n`,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) => getSourceFromLit(Disabled?.render?.(args), undefined, (s) => s.replace(' disabled', ' :disabled=\"true\"'))\n        },\n        {\n            framework: 'React',\n            load: () => `import { OmniTabGroup, OmniTab } from \"@capitec/omni-components-react/tab\";\nimport { OmniLabel } from \"@capitec/omni-components-react/label\";\n\nconst App = () =>\n<OmniTabGroup>\n <OmniTab header=\"Tab 1\">\n    <OmniLabel label=\"Label of Tab 1\"/>\n </OmniTab>\n <OmniTab header=\"Tab 2\">\n    <OmniLabel label=\"Label of Tab 2\"/>\n </OmniTab>\n <OmniTab header=\"Tab 3\" disabled>\n    <OmniLabel label=\"Label of Tab 3\"/>\n </OmniTab>\n</OmniTabGroup>;`\n        }\n    ],\n    name: 'Disabled',\n    description: () => html`\n    <div>\n     Set the <code>disabled</code> attribute on an <code class=\"language-html\">&lt;omni-tab&gt;</code> to indicate its disabled.\n    <div>\n    `,\n    args: {}\n}",
          "description": "\n    <div>\n     Set the <code>disabled</code> attribute on an <code class=\"language-html\">&lt;omni-tab&gt;</code> to indicate its disabled.\n    <div>\n    "
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Basic",
          "declaration": {
            "name": "Basic",
            "module": "src/tab/Tab.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Active",
          "declaration": {
            "name": "Active",
            "module": "src/tab/Tab.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/tab/Tab.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tab/TabGroup.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/tab/TabGroup.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-tab-group data-testid=\"test-tab-group\">\n        ${args.header ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('header', args.header))}` : nothing}\n        ${args['[Default Slot]'] ? html`${'\\r\\n'}${unsafeHTML(args['[Default Slot]'])}` : nothing}\n    </omni-tab-group>\n`,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' active', ' :active=\"true\"').replace(' disabled', ' :disabled=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    description: () => html`\n        <p>\n        The <code class=\"language-html\">&lt;omni-tab-group&gt;</code> component will display content based on the slotted <code class=\"language-html\">&lt;omni-tab&gt;</code> component(s). \n        </p>\n        <p>\n        For an advanced use case check the <omni-hyperlink href='./components/tab-header'><code class=\"language-html\">&lt;omni-tab-header&gt;</code></omni-hyperlink> example.\n        </p>\n    `,\n    args: {\n        header: '',\n        '[Default Slot]': raw`<omni-tab header=\"Tab 1\">\n    <div>Tab 1 Content</div>\n</omni-tab>\n<omni-tab header=\"Tab 2\">\n    <div>Tab 2 Content</div>\n</omni-tab>\n<omni-tab header=\"Tab 3\">\n    <div>Tab 3 Content</div>\n</omni-tab>`\n    }\n}",
          "description": "\n        <p>\n        The <code class=\"language-html\">&lt;omni-tab-group&gt;</code> component will display content based on the slotted <code class=\"language-html\">&lt;omni-tab&gt;</code> component(s). \n        </p>\n        <p>\n        For an advanced use case check the <omni-hyperlink href='./components/tab-header'><code class=\"language-html\">&lt;omni-tab-header&gt;</code></omni-hyperlink> example.\n        </p>\n    "
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/tab/TabGroup.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tab/TabHeader.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/tab/TabHeader.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Advanced",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n    <omni-tab-group data-testid='test-tab-group'>\n        ${args['[Default Slot]'] ? html`${'\\r\\n'}${unsafeHTML(args['[Default Slot]'])}` : nothing}\n    </omni-tab-group>\n`,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: () => `import { OmniTabGroup, OmniTab, OmniTabHeader } from \"@capitec/omni-components-react/tab\";\nimport { OmniIcon } from \"@capitec/omni-components-react/icon\";\n\nconst App = () =>\n<OmniTabGroup>\n <OmniTabHeader slot=\"header\" for=\"up\">\n  <OmniIcon size=\"default\">\n   <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 28 28\" width=\"100%\" height=\"100%\" fill=\"orange\"><path d=\"M5.47 8.47a.75.75 0 0 0 1.06 1.06l4.72-4.72V21c0 .38.282.693.648.743l.102.007a.75.75 0 0 0 .75-.75V4.81l4.72 4.72a.75.75 0 0 0 .976.073l.084-.073a.75.75 0 0 0 0-1.06l-6-6a.75.75 0 0 0-1.06 0Z\"/></svg>\n  </OmniIcon>\n </OmniTabHeader>\n <OmniTabHeader slot=\"header\" for=\"down\">\n  <OmniIcon size=\"default\">\n   <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 28 28\" width=\"100%\" height=\"100%\" fill=\"green\"><path d=\"M18.53 15.53a.75.75 0 0 0-1.06-1.06l-4.72 4.72V3a.75.75 0 0 0-.648-.743L12 2.25a.75.75 0 0 0-.75.75v16.19l-4.72-4.72a.75.75 0 0 0-.976-.073l-.084.073a.75.75 0 0 0 0 1.06l6 6a.75.75 0 0 0 1.06 0Z\"/></svg>\n  </OmniIcon>\n </OmniTabHeader>\n <OmniTabHeader slot=\"header\" for=\"left\">\n  <OmniIcon size=\"default\">\n   <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 28 28\" width=\"100%\" height=\"100%\" fill=\"purple\"><path d=\"M8.47 5.47a.75.75 0 0 1 1.06 1.06l-4.72 4.72H21a.75.75 0 0 1 .743.648l.007.102a.75.75 0 0 1-.75.75H4.81l4.72 4.72a.75.75 0 0 1 .073.976l-.073.084a.75.75 0 0 1-1.06 0l-6-6a.75.75 0 0 1 0-1.06Z\"/></svg>\n  </OmniIcon>\n </OmniTabHeader>\n <OmniTabHeader slot=\"header\" for=\"right\">\n  <OmniIcon size=\"default\">\n   <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 28 28\" width=\"100%\" height=\"100%\" fill=\"red\"><path d=\"M15.53 5.47a.75.75 0 0 0-1.06 1.06l4.72 4.72H3a.75.75 0 0 0-.743.648L2.25 12c0 .414.336.75.75.75h16.19l-4.72 4.72a.75.75 0 0 0-.073.976l.073.084a.75.75 0 0 0 1.06 0l6-6a.75.75 0 0 0 0-1.06Z\"/></svg>\n  </OmniIcon>\n </OmniTabHeader>\n <OmniTab id=\"up\">\n <div>Up</div>\n</OmniTab>\n<OmniTab id=\"down\">\n <div>Down</div>\n</OmniTab>\n<OmniTab id=\"left\">\n <div>Left</div>\n</OmniTab>\n<OmniTab id=\"right\">\n <div>Right</div>\n</OmniTab>\n</OmniTabGroup>;`\n        }\n    ],\n    name: 'Advanced',\n    args: {\n        '[Default Slot]': raw`\n        <omni-tab-header slot=\"header\" for=\"up\">\n            <omni-icon size=\"default\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 28 28\" width=\"100%\" height=\"100%\" fill=\"orange\"><path d=\"M5.47 8.47a.75.75 0 0 0 1.06 1.06l4.72-4.72V21c0 .38.282.693.648.743l.102.007a.75.75 0 0 0 .75-.75V4.81l4.72 4.72a.75.75 0 0 0 .976.073l.084-.073a.75.75 0 0 0 0-1.06l-6-6a.75.75 0 0 0-1.06 0Z\"/></svg>\n            </omni-icon>\n        </omni-tab-header>\n        <omni-tab-header slot=\"header\" for=\"down\">\n            <omni-icon size=\"default\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 28 28\" width=\"100%\" height=\"100%\" fill=\"green\"><path d=\"M18.53 15.53a.75.75 0 0 0-1.06-1.06l-4.72 4.72V3a.75.75 0 0 0-.648-.743L12 2.25a.75.75 0 0 0-.75.75v16.19l-4.72-4.72a.75.75 0 0 0-.976-.073l-.084.073a.75.75 0 0 0 0 1.06l6 6a.75.75 0 0 0 1.06 0Z\"/></svg>\n            </omni-icon>\n        </omni-tab-header>\n        <omni-tab-header slot=\"header\" for=\"left\">\n            <omni-icon size=\"default\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 28 28\" width=\"100%\" height=\"100%\" fill=\"purple\"><path d=\"M8.47 5.47a.75.75 0 0 1 1.06 1.06l-4.72 4.72H21a.75.75 0 0 1 .743.648l.007.102a.75.75 0 0 1-.75.75H4.81l4.72 4.72a.75.75 0 0 1 .073.976l-.073.084a.75.75 0 0 1-1.06 0l-6-6a.75.75 0 0 1 0-1.06Z\"/></svg>\n            </omni-icon>\n        </omni-tab-header>\n        <omni-tab-header slot=\"header\" for=\"right\">\n            <omni-icon size=\"default\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 28 28\" width=\"100%\" height=\"100%\" fill=\"red\"><path d=\"M15.53 5.47a.75.75 0 0 0-1.06 1.06l4.72 4.72H3a.75.75 0 0 0-.743.648L2.25 12c0 .414.336.75.75.75h16.19l-4.72 4.72a.75.75 0 0 0-.073.976l.073.084a.75.75 0 0 0 1.06 0l6-6a.75.75 0 0 0 0-1.06Z\"/></svg>\n            </omni-icon>\n        </omni-tab-header>\n        <omni-tab id=\"up\">\n            <div>Up</div>\n        </omni-tab>\n        <omni-tab id=\"down\">\n            <div>Down</div>\n        </omni-tab>\n        <omni-tab id=\"left\">\n            <div>Left</div>\n        </omni-tab>\n        <omni-tab id=\"right\">\n            <div>Right</div>\n        </omni-tab>\n        `\n    },\n    description: () => html`\n    <div>\n        For slotting custom content into the header use the <code class=\"language-html\">&lt;omni-tab-header&gt;</code> component that targets the header slot of the <omni-hyperlink href='./components/tab-group'><code class=\"language-html\">&lt;omni-tab-group&gt;</code></omni-hyperlink> component by setting <code class=\"language-js\">slot=\"header\"</code> and ensure you have a <omni-hyperlink href='./components/tab'><code class=\"language-html\">&lt;omni-tab&gt;</code></omni-hyperlink> component which has an <code>id</code> attribute that matches the <code class=\"language-html\">&lt;omni-tab-header&gt;</code> <code>for</code> attribute to display slotted content.\n    <div>\n    `\n}",
          "description": "\n    <div>\n        For slotting custom content into the header use the <code class=\"language-html\">&lt;omni-tab-header&gt;</code> component that targets the header slot of the <omni-hyperlink href='./components/tab-group'><code class=\"language-html\">&lt;omni-tab-group&gt;</code></omni-hyperlink> component by setting <code class=\"language-js\">slot=\"header\"</code> and ensure you have a <omni-hyperlink href='./components/tab'><code class=\"language-html\">&lt;omni-tab&gt;</code></omni-hyperlink> component which has an <code>id</code> attribute that matches the <code class=\"language-html\">&lt;omni-tab-header&gt;</code> <code>for</code> attribute to display slotted content.\n    <div>\n    "
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Advanced",
          "declaration": {
            "name": "Advanced",
            "module": "src/tab/TabHeader.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tab/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Tab.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./TabHeader.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./TabGroup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field/TextField.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field/TextField.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<BaseArgs>"
          },
          "default": "{\n    render: (args: BaseArgs) => html`\n    <omni-text-field\n      data-testid=\"test-text-field\"\n      label=\"${ifNotEmpty(args.label)}\"\n      value=\"${args.value}\"\n      hint=\"${ifNotEmpty(args.hint)}\"\n      error=\"${ifNotEmpty(args.error)}\"\n      ?disabled=\"${args.disabled}\"\n      ?clearable=\"${args.clearable}\"\n      >${args.prefix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n      ${args.clear ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('clear', args.clear))}` : nothing}${\n        args.suffix ? html`${'\\r\\n'}${unsafeHTML(assignToSlot('suffix', args.suffix))}` : nothing\n    }${args.prefix || args.suffix || args.clear ? '\\r\\n' : nothing}</omni-text-field>\n  `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(Interactive!.render!(args), undefined, (s) =>\n                    s.replace(' disabled', ' :disabled=\"true\"').replace(' clearable', ' :clearable=\"true\"')\n                )\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        label: 'Label',\n        value: '',\n        hint: '',\n        error: '',\n        disabled: false,\n        clearable: false,\n        prefix: '',\n        suffix: '',\n        clear: ''\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Label"
        },
        {
          "kind": "variable",
          "name": "Hint"
        },
        {
          "kind": "variable",
          "name": "Error_Label"
        },
        {
          "kind": "variable",
          "name": "Value"
        },
        {
          "kind": "variable",
          "name": "Clearable"
        },
        {
          "kind": "variable",
          "name": "Custom_Clear_Slot"
        },
        {
          "kind": "variable",
          "name": "Prefix"
        },
        {
          "kind": "variable",
          "name": "Suffix"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error_Label",
          "declaration": {
            "name": "Error_Label",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Value",
          "declaration": {
            "name": "Value",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Clearable",
          "declaration": {
            "name": "Clearable",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Clear_Slot",
          "declaration": {
            "name": "Custom_Clear_Slot",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefix",
          "declaration": {
            "name": "Prefix",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffix",
          "declaration": {
            "name": "Suffix",
            "module": "src/text-field/TextField.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/text-field/TextField.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/toast/ToastStack.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A toast container that animates in and stacks toast elements.",
          "name": "ToastStack",
          "cssProperties": [
            {
              "description": "The z-index of the stack.",
              "name": "--omni-toast-stack-z-index"
            },
            {
              "description": "The font color applied to the stack.",
              "name": "--omni-toast-stack-font-color"
            },
            {
              "description": "The position from the bottom toast `position` is set to `bottom`, `bottom-left`, or `bottom-right`.",
              "name": "--omni-toast-stack-anchor-bottom"
            },
            {
              "description": "The position from the bottom toast `position` is set to `top`, `top-left`, or `top-right`.",
              "name": "--omni-toast-stack-anchor-top"
            },
            {
              "description": "The position from the bottom toast `position` is set to `left`, `top-left`, or `bottom-left`.",
              "name": "--omni-toast-stack-anchor-left"
            },
            {
              "description": "The position from the bottom toast `position` is set to `right`, `top-right`, or `bottom-right`.",
              "name": "--omni-toast-stack-anchor-right"
            },
            {
              "description": "The vertical gap between toast elements in the stack.",
              "name": "--omni-toast-stack-gap"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Toast(s) to be displayed",
              "name": "[Default Slot]"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "| 'top'\n        | 'bottom'\n        | 'left'\n        | 'right'\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right'"
              },
              "default": "'bottom'",
              "description": "The position to stack toasts",
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "reverse",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Reverse the order of toast with newest toasts showed on top of the stack. By default newest toasts are showed at the bottom of the stack.",
              "attribute": "reverse",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "toastContainer",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "slotElement",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "toastCloseClickBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "create",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "init",
                  "optional": true,
                  "type": {
                    "text": "ToastStackInit"
                  },
                  "description": "Initialisation context for the element."
                }
              ],
              "description": "Creates a new `<omni-toast-stack>` element with the provided context and appends it to the DOM (either to document body or to provided target parent element).",
              "return": {
                "type": {
                  "text": "ToastStack | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "showToast",
              "privacy": "public",
              "parameters": [
                {
                  "name": "init",
                  "type": {
                    "text": "ShowToastInit"
                  }
                }
              ],
              "description": "Push a toast message onto the toast stack.",
              "return": {
                "type": {
                  "text": "Toast"
                }
              }
            },
            {
              "kind": "method",
              "name": "showInstance",
              "privacy": "public",
              "parameters": [
                {
                  "name": "instance",
                  "type": {
                    "text": "Toast"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "ShowToastOptions"
                  }
                }
              ],
              "description": "Push an existing toast instance onto the toast stack.",
              "return": {
                "type": {
                  "text": "Toast"
                }
              }
            },
            {
              "kind": "method",
              "name": "onSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "closeToast",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "raiseToastRemove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "toast",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "slideIn",
              "privacy": "private",
              "parameters": [
                {
                  "name": "toast",
                  "type": {
                    "text": "Toast"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "toast-remove",
              "type": {
                "text": "CustomEvent<Toast>"
              },
              "description": "Dispatched when the a toast is removed from the stack."
            },
            {
              "type": {
                "text": "CustomEvent<ToastStack>"
              },
              "description": "Dispatched from a toast when it is removed from the stack.",
              "name": "toast-stack-remove"
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "| 'top'\n        | 'bottom'\n        | 'left'\n        | 'right'\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right'"
              },
              "default": "'bottom'",
              "description": "The position to stack toasts",
              "fieldName": "position",
              "attribute": "position"
            },
            {
              "name": "reverse",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Reverse the order of toast with newest toasts showed on top of the stack. By default newest toasts are showed at the bottom of the stack.",
              "fieldName": "reverse",
              "attribute": "reverse"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-toast-stack",
          "globalAttributes": [
            {
              "attribute": " data-toast-duration",
              "description": "Duration milliseconds that a slotted toast must be shown in the stack before it is removed.",
              "type": "number"
            }
          ],
          "import": "```js\nimport '@capitec/omni-components/toast';\n```",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "toastDurationAttribute",
          "type": {
            "text": "string"
          },
          "default": "'data-toast-duration'",
          "description": "Attribute for the duration milliseconds that a slotted toast must be shown in an `<omni-toast-stack>` before it is removed."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToastStack",
          "declaration": {
            "name": "ToastStack",
            "module": "/Users/runner/work/omni-components/omni-components/src/toast/ToastStack.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-toast-stack",
          "declaration": {
            "name": "ToastStack",
            "module": "/Users/runner/work/omni-components/omni-components/src/toast/ToastStack.ts"
          }
        },
        {
          "kind": "js",
          "name": "toastDurationAttribute",
          "declaration": {
            "name": "toastDurationAttribute",
            "module": "/Users/runner/work/omni-components/omni-components/src/toast/ToastStack.ts"
          }
        }
      ],
      "typeAliases": [
        {
          "alias": "ToastStackInit",
          "type": "{\n    /**\n     * The id to apply to the ToastStack element.\n     */\n    id?: string;\n\n    /**\n     * The container to append the ToastStack as child. If not provided will append to a new div element on the document body.\n     */\n    parent?: string | HTMLElement | DocumentFragment | null;\n\n    /**\n     * The position to stack toasts\n     */\n    position?: 'top' | 'bottom' | 'left' | 'right' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n    /**\n     * Reverse the order of toast with newest toasts showed on top of the stack. By default newest toasts are showed at the bottom of the stack.\n     */\n    reverse?: boolean;\n}"
        },
        {
          "alias": "ShowToastInit",
          "type": "{\n    /**\n     * The type of toast to display.\n     */\n    type: 'success' | 'warning' | 'error' | 'info' | 'none';\n\n    /**\n     * The toast title.\n     */\n    header?: string;\n\n    /**\n     * The toast description.\n     */\n    detail?: string;\n\n    /**\n     * If true, will display a close button that fires a `close-click` event when clicked and removes the toast from the stack.\n     */\n    closeable?: boolean;\n\n    /**\n     * If provided will be the time in millisecond the toast is displayed before being automatically removed from the stack.\n     */\n    duration?: number;\n\n    /**\n     * Content to render before toast message area.\n     */\n    prefix?: RenderFunction | RenderResult;\n\n    /**\n     * Content to render inside the component message area.\n     */\n    content?: RenderFunction | RenderResult;\n\n    /**\n     * Content to render as the close button when `closeable`.\n     */\n    close?: RenderFunction | RenderResult;\n}"
        },
        {
          "alias": "ShowToastOptions",
          "type": "{\n    /**\n     * If provided will be the time in milliseconds the toast is displayed before being automatically removed from the stack.\n     */\n    duration?: number;\n\n    /**\n     * If true, will display a close button that fires a `close-click` event when clicked and removes the toast from the stack.\n     */\n    closeable?: boolean;\n}"
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "/Users/runner/work/omni-components/omni-components/src/toast/Toast.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component to visually notify a user of a message.",
          "name": "Toast",
          "cssProperties": [
            {
              "description": "Min Width.",
              "name": "--omni-toast-min-width"
            },
            {
              "description": "Max Width.",
              "name": "--omni-toast-max-width"
            },
            {
              "description": "Width.",
              "name": "--omni-toast-width"
            },
            {
              "description": "The z-index.",
              "name": "--omni-toast-z-index"
            },
            {
              "description": "Border width.",
              "name": "--omni-toast-border-width"
            },
            {
              "description": "Border radius.",
              "name": "--omni-toast-border-radius"
            },
            {
              "description": "Box shadow.",
              "name": "--omni-toast-box-shadow"
            },
            {
              "description": "Container padding.",
              "name": "--omni-toast-padding"
            },
            {
              "description": "Horizontal spacing between icon from `type` and content.",
              "name": "--omni-toast-horizontal-gap"
            },
            {
              "description": "Symmetrical size of icon from `type`.",
              "name": "--omni-toast-icon-size"
            },
            {
              "description": "Font family for header.",
              "name": "--omni-toast-header-font-family"
            },
            {
              "description": "Font size for header.",
              "name": "--omni-toast-header-font-size"
            },
            {
              "description": "Font weight for header.",
              "name": "--omni-toast-header-font-weight"
            },
            {
              "description": "Line height for header.",
              "name": "--omni-toast-header-line-height"
            },
            {
              "description": "Font family for detail.",
              "name": "--omni-toast-detail-font-family"
            },
            {
              "description": "Font size for detail.",
              "name": "--omni-toast-detail-font-size"
            },
            {
              "description": "Font weight for detail.",
              "name": "--omni-toast-detail-font-weight"
            },
            {
              "description": "Line height for detail.",
              "name": "--omni-toast-detail-line-height"
            },
            {
              "description": "Vertical space between detail and header.",
              "name": "--omni-toast-vertical-gap"
            },
            {
              "description": "The default background applied when no `type` is set.",
              "name": "--omni-toast-background"
            },
            {
              "description": "The default font color applied when no `type` is set.",
              "name": "--omni-toast-default-font-color"
            },
            {
              "description": "Border color. *",
              "name": "--omni-toast-border-color"
            },
            {
              "description": "The background applied when  `type` is set to `success`.",
              "name": "--omni-toast-success-background"
            },
            {
              "description": "The font color applied when `type` is set to `success`.",
              "name": "--omni-toast-success-font-color"
            },
            {
              "description": "The border color applied when  `type` is set to `success`.",
              "name": "--omni-toast-success-border-color"
            },
            {
              "description": "The icon color applied when  `type` is set to `success`.",
              "name": "--omni-toast-success-icon-color"
            },
            {
              "description": "The background applied when  `type` is set to `warning`.",
              "name": "--omni-toast-warning-background"
            },
            {
              "description": "The font color applied when `type` is set to `warning`.",
              "name": "--omni-toast-warning-font-color"
            },
            {
              "description": "The border color applied when  `type` is set to `warning`.",
              "name": "--omni-toast-warning-border-color"
            },
            {
              "description": "The icon color applied when  `type` is set to `warning`.",
              "name": "--omni-toast-warning-icon-color"
            },
            {
              "description": "The background applied when  `type` is set to `error`.",
              "name": "--omni-toast-error-background"
            },
            {
              "description": "The font color applied when `type` is set to `error`.",
              "name": "--omni-toast-error-font-color"
            },
            {
              "description": "The border color applied when  `type` is set to `error`.",
              "name": "--omni-toast-error-border-color"
            },
            {
              "description": "The icon color applied when  `type` is set to `error`.",
              "name": "--omni-toast-error-icon-color"
            },
            {
              "description": "The background applied when  `type` is set to `info`.",
              "name": "--omni-toast-info-background"
            },
            {
              "description": "The font color applied when `type` is set to `info`.",
              "name": "--omni-toast-info-font-color"
            },
            {
              "description": "The border color applied when  `type` is set to `info`.",
              "name": "--omni-toast-info-border-color"
            },
            {
              "description": "The icon color applied when  `type` is set to `info`.",
              "name": "--omni-toast-info-icon-color"
            },
            {
              "description": "Padding applied to close button when `closeable`.",
              "name": "--omni-toast-close-padding"
            },
            {
              "description": "Symmetrical size applied to close button when `closeable`.",
              "name": "--omni-toast-close-size"
            }
          ],
          "slots": [
            {
              "description": "Used to define content that is displayed while async rendering is awaiting, or when renderLoading() is implicitly called",
              "name": "loading_indicator",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "description": "Content to render before toast message area.",
              "name": "prefix"
            },
            {
              "description": "Content to render inside the component message area.",
              "name": "[Default Slot]"
            },
            {
              "description": "Content to render as the close button when `closeable`.",
              "name": "close"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'success' | 'warning' | 'error' | 'info' | 'none'"
              },
              "default": "'none'",
              "description": "The type of toast to display.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | undefined"
              },
              "description": "The toast title.",
              "attribute": "header",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "detail",
              "type": {
                "text": "string | undefined"
              },
              "description": "The toast detail.",
              "attribute": "detail",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closeable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will display a close button that fires a `close-click` event when clicked.",
              "attribute": "closeable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stack",
              "type": {
                "text": "ToastStack & {\n        /**\n         * When true, will append toast to the toast stack. Otherwise when false will replace any toast(s). Defaults to true.\n         */\n        stack?: boolean;\n\n        /**\n         * If true, will display a close button that fires a `close-click` event when clicked and removes the toast from the stack.\n         */\n        closeable?: boolean;\n\n        /**\n         * If provided will be the time in milliseconds the toast is displayed before being automatically removed from the stack.\n         * Defaults to 3000ms when not provided.\n         * When set to 0 will amount to no timeout.\n         */\n        duration?: number;\n    } | undefined"
              },
              "privacy": "private",
              "static": true
            },
            {
              "kind": "field",
              "name": "current",
              "privacy": "public",
              "static": true,
              "description": "Global singleton ToastStack used for showing a toast, either by adding to, or replacing.\nUse `Toast.show` function to add or replace toasts to this instance."
            },
            {
              "kind": "method",
              "name": "configure",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "{\n        /**\n         * The position to stack toasts\n         */\n        position?: 'top' | 'bottom' | 'left' | 'right' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n        /**\n         * Reverse the order of toast with newest toasts showed on top of the stack. By default newest toasts are showed at the bottom of the stack.\n         */\n        reverse?: boolean;\n\n        /**\n         * When true, will append toast to the toast stack. Otherwise when false will replace any toast(s). Defaults to true.\n         */\n        stack?: boolean;\n\n        /**\n         * If true, will display a close button that fires a `close-click` event when clicked and removes the toast from the stack.\n         */\n        closeable?: boolean;\n\n        /**\n         * If provided will be the time in millisecond the toast is displayed before being automatically removed from the stack.\n         * Defaults to 3000ms when not provided.\n         * When set to 0 it will never be auto removed.\n         */\n        duration?: number;\n    }"
                  }
                }
              ],
              "description": "Configure the global singleton ToastStack used for showing a toast, either by adding to, or replacing.\nUse `Toast.show` function to add or replace toasts to this instance.",
              "return": {
                "type": {
                  "text": "ToastStack & { stack?: boolean | undefined; closeable?: boolean | undefined; duration?: number | undefined; }"
                }
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "ShowToastInit"
                  }
                }
              ],
              "description": "Show a toast message.",
              "return": {
                "type": {
                  "text": "Toast"
                }
              }
            },
            {
              "kind": "method",
              "name": "_raiseCloseClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "iconTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            },
            {
              "kind": "field",
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAsync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "close-click",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Dispatched when the close button is clicked when `closeable`."
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'success' | 'warning' | 'error' | 'info' | 'none'"
              },
              "default": "'none'",
              "description": "The type of toast to display.",
              "fieldName": "type",
              "attribute": "type"
            },
            {
              "name": "header",
              "type": {
                "text": "string | undefined"
              },
              "description": "The toast title.",
              "fieldName": "header",
              "attribute": "header"
            },
            {
              "name": "detail",
              "type": {
                "text": "string | undefined"
              },
              "description": "The toast detail.",
              "fieldName": "detail",
              "attribute": "detail"
            },
            {
              "name": "closeable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, will display a close button that fires a `close-click` event when clicked.",
              "fieldName": "closeable",
              "attribute": "closeable"
            },
            {
              "name": "dir",
              "type": {
                "text": "string"
              },
              "description": "Used to set the base direction of text for display",
              "fieldName": "dir",
              "attribute": "dir",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              },
              "description": "Used to identify the language of text content on the web",
              "fieldName": "lang",
              "attribute": "lang",
              "inheritedFrom": {
                "name": "OmniElement",
                "module": "/Users/runner/work/omni-components/omni-components/src/core/OmniElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "OmniElement",
            "module": "//Users/runner/work/omni-components/omni-components/src/core/OmniElement.js"
          },
          "tagName": "omni-toast",
          "import": "```js\nimport '@capitec/omni-components/toast';\n```",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Toast",
          "declaration": {
            "name": "Toast",
            "module": "/Users/runner/work/omni-components/omni-components/src/toast/Toast.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "omni-toast",
          "declaration": {
            "name": "Toast",
            "module": "/Users/runner/work/omni-components/omni-components/src/toast/Toast.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/toast/Toast.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/toast/Toast.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    render: (args: Args) => html`\n        <omni-toast\n            data-testid=\"test-toast\"\n            detail=\"${ifNotEmpty(args.detail)}\"\n            header=\"${ifNotEmpty(args.header)}\"\n            type=\"${ifNotEmpty(args.type)}\"\n            ?closeable=\"${args.closeable}\">\n            ${args.prefix ? html`${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n            ${unsafeHTML(args['[Default Slot]'])}\n            ${args.close ? html`${unsafeHTML(assignToSlot('close', args.close))}` : nothing}\n        </omni-toast>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) => getSourceFromLit(Interactive!.render!(args)).replaceAll(' closeable', ' :closeable=\"true\"')\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        closeable: false,\n        detail: 'The toast description',\n        header: 'The toast header',\n        type: 'success',\n        prefix: undefined,\n        '[Default Slot]': undefined,\n        close: undefined\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "Showing_Toasts",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n    <div>\n        Toasts can be shown programmatically using the static <code class=\"language-js\">Toast.show()</code> function. \n    <div>\n    `,\n    render: (args: Args) => html`\n        <omni-button\n            data-testid=\"test-toast-show\"\n            label=\"Show Toast\"\n            @click=\"${() => {\n                Toast.configure({\n                    position: 'bottom',\n                    reverse: false,\n                    stack: true,\n                    closeable: undefined,\n                    duration: undefined\n                });\n                Toast.show({\n                    type: 'success',\n                    header: 'Success!',\n                    detail: 'It was successful.'\n                });\n            }}\"\n            >\n        </omni-button>\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Toast\"></omni-button>`,\n                jsFragment: `import { Toast } from '@capitec/omni-components/toast';\n\ndocument.querySelector('omni-button').addEventListener('click', () => {\n    Toast.show({\n        type: 'success',\n        header: 'Success!',\n        detail: 'It was successful.'\n    });\n});`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Toast\" @click=\"showToast\"></omni-button>`,\n                jsFragment: `import { Toast } from '@capitec/omni-components/toast';\n\nwindow.vueData = {\n    showToast: () => {\n        Toast.show({\n            type: 'success',\n            header: 'Success!',\n            detail: 'It was successful.'\n        });\n    }\n};`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Toast\" @click=\"\\${showToast}\"></omni-button>`,\n                jsFragment: `import { Toast } from '@capitec/omni-components/toast';\n\nconst showToast = () => {\n    Toast.show({\n        type: 'success',\n        header: 'Success!',\n        detail: 'It was successful.'\n    });\n}`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniButton } from \"@capitec/omni-components-react/button\";\nimport { Toast } from '@capitec/omni-components-react/toast';\n\nconst showToast = () => {\n    Toast.show({\n        type: 'success',\n        header: 'Success!',\n        detail: 'It was successful.'\n    });\n};\n\nconst App = () => <OmniButton label=\"Show Toast\" onclick={showToast}/>;`\n        }\n    ],\n    name: 'Showing Toast Programmatically',\n    args: {}\n}",
          "description": "\n    <div>\n        Toasts can be shown programmatically using the static <code class=\"language-js\">Toast.show()</code> function. \n    <div>\n    "
        },
        {
          "kind": "variable",
          "name": "Configure_Toast",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n    <div>\n       Programmatically shown Toasts can be configured using the static <code class=\"language-js\">Toast.configure()</code> function. \n    <div>\n    `,\n    render: (args: Args) => html`\n        <omni-button\n            data-testid=\"test-toast-configure\"\n            label=\"Show Toast\"\n            @click=\"${() => {\n                Toast.configure({\n                    position: 'left',\n                    reverse: true,\n                    stack: true,\n                    closeable: undefined,\n                    // Defaults to 3000ms when not specified. If set to 0 will be infinite (or until close clicked)\n                    duration: undefined\n                });\n                Toast.show({\n                    type: 'success',\n                    header: 'Success!',\n                    detail: 'It was successful.'\n                });\n            }}\"\n            >\n        </omni-button>\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Toast\"></omni-button>`,\n                jsFragment: `import { Toast } from '@capitec/omni-components/toast';\n\nToast.configure({\n    position: 'left',\n    reverse: true,\n    stack: true,\n    closeable: undefined,\n    // Defaults to 3000ms when not specified. If set to 0 will be infinite (or until close clicked)\n    duration: undefined\n});\n\ndocument.querySelector('omni-button').addEventListener('click', () => {\n    Toast.show({\n        type: 'success',\n        header: 'Success!',\n        detail: 'It was successful.'\n    });\n});`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Toast\" @click=\"showToast\"></omni-button>`,\n                jsFragment: `import { Toast } from '@capitec/omni-components/toast';\n\nToast.configure({\n    position: 'left',\n    reverse: true,\n    stack: true,\n    closeable: undefined,\n    // Defaults to 3000ms when not specified. If set to 0 will be infinite (or until close clicked)\n    duration: undefined\n});\n\nwindow.vueData = {\n    showToast: () => {\n        Toast.show({\n            type: 'success',\n            header: 'Success!',\n            detail: 'It was successful.'\n        });\n    }\n};`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Toast\" @click=\"\\${showToast}\"></omni-button>`,\n                jsFragment: `import { Toast } from '@capitec/omni-components/toast';\n\nToast.configure({\n    position: 'left',\n    reverse: true,\n    stack: true,\n    closeable: undefined,\n    // Defaults to 3000ms when not specified. If set to 0 will be infinite (or until close clicked)\n    duration: undefined\n});\n\nconst showToast = () => {\n    Toast.show({\n        type: 'success',\n        header: 'Success!',\n        detail: 'It was successful.'\n    });\n}`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniButton } from \"@capitec/omni-components-react/button\";\nimport { Toast } from '@capitec/omni-components-react/toast';\n\nToast.configure({\n    position: 'left',\n    reverse: true,\n    stack: true,\n    closeable: undefined,\n    // Defaults to 3000ms when not specified. If set to 0 will be infinite (or until close clicked)\n    duration: undefined\n});\n\nconst showToast = () => {\n    Toast.show({\n        type: 'success',\n        header: 'Success!',\n        detail: 'It was successful.'\n    });\n};\n\nconst App = () => <OmniButton label=\"Show Toast\" onclick={showToast}/>;`\n        }\n    ],\n    name: 'Configure Toast Programmatically',\n    args: {}\n}",
          "description": "\n    <div>\n       Programmatically shown Toasts can be configured using the static <code class=\"language-js\">Toast.configure()</code> function. \n    <div>\n    "
        },
        {
          "kind": "variable",
          "name": "Replacing_Toasts",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n    <div>\n        Toasts can be replaced instead of stacked when shown programmatically via the static <code class=\"language-js\">Toast.show()</code> function by using the static <code class=\"language-js\">Toast.configure()</code> function to set <code>stack</code> to <code class=\"language-js\">false</code>. \n    <div>\n    `,\n    render: (args: Args) => html`\n        <omni-button\n            data-testid=\"test-toast-show\"\n            label=\"Show Toast\"\n            @click=\"${() => {\n                Toast.configure({\n                    position: 'bottom',\n                    reverse: false,\n                    stack: false,\n                    closeable: undefined,\n                    duration: undefined\n                });\n                Toast.show({\n                    type: 'success',\n                    header: 'Success!',\n                    detail: 'It was successful.',\n                    closeable: true,\n                    // Defaults to 3000ms (or configured duration via Toast.configure function) when not specified. If set to 0 will be infinite (or until close clicked)\n                    duration: 0\n                });\n            }}\"\n            >\n        </omni-button>\n    `,\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Toast\"></omni-button>`,\n                jsFragment: `import { Toast } from '@capitec/omni-components/toast';\n\nToast.configure({ stack: false });\n\ndocument.querySelector('omni-button').addEventListener('click', () => {\n    Toast.show({\n        type: 'success',\n        header: 'Success!',\n        detail: 'It was successful.',\n        closeable: true,\n        // Defaults to 3000ms (or configured duration via Toast.configure function) when not specified. If set to 0 will be infinite (or until close clicked)\n        duration: 0\n    });\n});`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Toast\" @click=\"showToast\"></omni-button>`,\n                jsFragment: `import { Toast } from '@capitec/omni-components/toast';\n\nToast.configure({ stack: false });\n\nwindow.vueData = {\n    showToast: () => {\n        Toast.show({\n            stack: true,\n            type: 'success',\n            header: 'Success!',\n            detail: 'It was successful.',\n            closeable: true,\n            // Defaults to 3000ms (or configured duration via Toast.configure function) when not specified. If set to 0 will be infinite (or until close clicked)\n            duration: 0\n        });\n    }\n};`\n            }\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: raw`<omni-button label=\"Show Toast\" @click=\"\\${showToast}\"></omni-button>`,\n                jsFragment: `import { Toast } from '@capitec/omni-components/toast';\n\nToast.configure({ stack: false });\n\nconst showToast = () => {\n    Toast.show({\n        type: 'success',\n        header: 'Success!',\n        detail: 'It was successful.',\n        closeable: true,\n        // Defaults to 3000ms (or configured duration via Toast.configure function) when not specified. If set to 0 will be infinite (or until close clicked)\n        duration: 0\n    });\n}`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniButton } from \"@capitec/omni-components-react/button\";\nimport { Toast } from '@capitec/omni-components-react/toast';\n\nToast.configure({ stack: false });\n\nconst showToast = () => {\n    Toast.show({\n        type: 'success',\n        header: 'Success!',\n        detail: 'It was successful.',\n        closeable: true,\n        // Defaults to 3000ms (or configured duration via Toast.configure function) when not specified. If set to 0 will be infinite (or until close clicked)\n        duration: 0\n    });\n};\n\nconst App = () => <OmniButton label=\"Show Toast\" onclick={showToast}/>;`\n        }\n    ],\n    name: 'Replacing Toast Programmatically',\n    args: {}\n}",
          "description": "\n    <div>\n        Toasts can be replaced instead of stacked when shown programmatically via the static <code class=\"language-js\">Toast.show()</code> function by using the static <code class=\"language-js\">Toast.configure()</code> function to set <code>stack</code> to <code class=\"language-js\">false</code>. \n    <div>\n    "
        },
        {
          "kind": "variable",
          "name": "Custom_Slotted_Content",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n    <div>\n        Custom rich html can be slotted to fully customize the contents displayed within the <code class=\"language-html\">&lt;omni-toast&gt;</code>. This can be used to apply extra styling and functionality.\n    <div>\n    `,\n    render: (args: Args) => html`\n        <omni-toast\n            data-testid=\"test-toast\"\n            detail=\"${ifNotEmpty(args.detail)}\"\n            header=\"${ifNotEmpty(args.header)}\"\n            type=\"${ifNotEmpty(args.type)}\"\n            ?closeable=\"${args.closeable}\">\n            ${args.prefix ? html`${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n            ${unsafeHTML(args['[Default Slot]'])}\n            ${args.close ? html`${unsafeHTML(assignToSlot('close', args.close))}` : nothing}\n        </omni-toast>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniToast } from \"@capitec/omni-components-react/toast\";\n\nconst App = () =>   <OmniToast${args.detail ? ` detail=\"${args.detail}\"` : ''}${args.header ? ` header=\"${args.header}\"` : ''}${\n                args.type ? ` type=\"${args.type}\"` : ''\n            }${args.closeable ? ` closeable` : ''}>\n                        <span>Custom Slotted Toast <strong>Content</strong></span>\n                    </OmniToast>;`\n        }\n    ],\n    name: 'Custom Slotted Content',\n    args: {\n        closeable: false,\n        detail: '',\n        header: 'The toast header',\n        type: 'none',\n        prefix: undefined,\n        '[Default Slot]': raw`<span>Custom Slotted Toast <strong>Content</strong></span>`,\n        close: undefined\n    }\n}",
          "description": "\n    <div>\n        Custom rich html can be slotted to fully customize the contents displayed within the <code class=\"language-html\">&lt;omni-toast&gt;</code>. This can be used to apply extra styling and functionality.\n    <div>\n    "
        },
        {
          "kind": "variable",
          "name": "Custom_Slotted_Prefix",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n    <div>\n        <p>Custom rich html can be slotted in the <code class=\"language-js\">'prefix'</code> slot to customize the contents before the <code class=\"language-html\">&lt;omni-toast&gt;</code> content.</p>\n        <p> For any specific <code class=\"language-js\">'type'</code> this will replace its icon that is shown.</p>\n    <div>\n    `,\n    render: (args: Args) => html`\n        <omni-toast\n            data-testid=\"test-toast\"\n            detail=\"${ifNotEmpty(args.detail)}\"\n            header=\"${ifNotEmpty(args.header)}\"\n            type=\"${ifNotEmpty(args.type)}\"\n            ?closeable=\"${args.closeable}\">\n            ${args.prefix ? html`${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n            ${unsafeHTML(args['[Default Slot]'])}\n            ${args.close ? html`${unsafeHTML(assignToSlot('close', args.close))}` : nothing}\n        </omni-toast>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniToast } from \"@capitec/omni-components-react/toast\";\n\nconst App = () =>   <OmniToast${args.detail ? ` detail=\"${args.detail}\"` : ''}${args.header ? ` header=\"${args.header}\"` : ''}${\n                args.type ? ` type=\"${args.type}\"` : ''\n            }${args.closeable ? ` closeable` : ''}>\n                        <svg slot=\"prefix\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" style={{ marginRight: '10px' }}>\n                            <path d=\"M8.138 5.035c5.173-2.112 10.332.032 15.368 6.273a1.12 1.12 0 0 1-.002 1.398c-1.735 2.136-3.489 3.796-5.252 4.966a13.433 13.433 0 0 1-2.846 1.46A9.952 9.952 0 0 1 12 19.75c-3.859 0-7.724-2.391-11.504-7.044a1.119 1.119 0 0 1-.002-1.398C2.002 9.44 3.519 7.938 5.045 6.81A14.573 14.573 0 0 1 7.86 5.153Zm13.684 6.59c-4.56-5.382-8.973-7.018-13.36-5.098-.836.365-1.677.861-2.524 1.488-1.417 1.048-2.845 2.46-4.276 4.234l.2-.244.394.467c3.12 3.629 6.205 5.542 9.179 5.757l.287.016.278.005c.956 0 1.92-.175 2.895-.528a11.942 11.942 0 0 0 2.527-1.3c1.628-1.08 3.273-2.637 4.917-4.66l-.044.05-.158.192ZM12 7.25a4.75 4.75 0 1 1 0 9.5 4.75 4.75 0 0 1 0-9.5Zm0 1.5a3.25 3.25 0 1 0 0 6.5 3.25 3.25 0 0 0 0-6.5Z\" />\n                        </svg>\n                    </OmniToast>;`\n        }\n    ],\n    name: 'Custom Slotted Prefix',\n    args: {\n        closeable: false,\n        detail: 'The toast description',\n        header: 'The toast header',\n        type: 'info',\n        prefix: raw`<svg slot=\"prefix\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" style=\"margin-right: 10px;\">\n    <path d=\"M8.138 5.035c5.173-2.112 10.332.032 15.368 6.273a1.12 1.12 0 0 1-.002 1.398c-1.735 2.136-3.489 3.796-5.252 4.966a13.433 13.433 0 0 1-2.846 1.46A9.952 9.952 0 0 1 12 19.75c-3.859 0-7.724-2.391-11.504-7.044a1.119 1.119 0 0 1-.002-1.398C2.002 9.44 3.519 7.938 5.045 6.81A14.573 14.573 0 0 1 7.86 5.153Zm13.684 6.59c-4.56-5.382-8.973-7.018-13.36-5.098-.836.365-1.677.861-2.524 1.488-1.417 1.048-2.845 2.46-4.276 4.234l.2-.244.394.467c3.12 3.629 6.205 5.542 9.179 5.757l.287.016.278.005c.956 0 1.92-.175 2.895-.528a11.942 11.942 0 0 0 2.527-1.3c1.628-1.08 3.273-2.637 4.917-4.66l-.044.05-.158.192ZM12 7.25a4.75 4.75 0 1 1 0 9.5 4.75 4.75 0 0 1 0-9.5Zm0 1.5a3.25 3.25 0 1 0 0 6.5 3.25 3.25 0 0 0 0-6.5Z\" />\n</svg>`,\n        '[Default Slot]': undefined,\n        close: undefined\n    }\n}",
          "description": "\n    <div>\n        <p>Custom rich html can be slotted in the <code class=\"language-js\">'prefix'</code> slot to customize the contents before the <code class=\"language-html\">&lt;omni-toast&gt;</code> content.</p>\n        <p> For any specific <code class=\"language-js\">'type'</code> this will replace its icon that is shown.</p>\n    <div>\n    "
        },
        {
          "kind": "variable",
          "name": "Closeable",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`Add a close button to the <code class=\"language-html\">&lt;omni-toast&gt;</code>.`,\n    render: (args: Args) => html`\n        <omni-toast\n            data-testid=\"test-toast\"\n            detail=\"${ifNotEmpty(args.detail)}\"\n            header=\"${ifNotEmpty(args.header)}\"\n            type=\"${ifNotEmpty(args.type)}\"\n            ?closeable=\"${args.closeable}\">\n            ${args.prefix ? html`${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n            ${unsafeHTML(args['[Default Slot]'])}\n            ${args.close ? html`${unsafeHTML(assignToSlot('close', args.close))}` : nothing}\n        </omni-toast>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) => getSourceFromLit(Closeable!.render!(args)).replaceAll(' closeable', ' :closeable=\"true\"')\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniToast } from \"@capitec/omni-components-react/toast\";\n\nconst App = () => <OmniToast${args.detail ? ` detail=\"${args.detail}\"` : ''}${args.header ? ` header=\"${args.header}\"` : ''}${\n                args.type ? ` type=\"${args.type}\"` : ''\n            }${args.closeable ? ` closeable` : ''}/>;`\n        }\n    ],\n    name: 'Closeable',\n    args: {\n        closeable: true,\n        detail: 'The toast description',\n        header: 'The toast header',\n        type: 'none',\n        prefix: undefined,\n        '[Default Slot]': undefined,\n        close: undefined\n    }\n}",
          "description": "Add a close button to the <code class=\"language-html\">&lt;omni-toast&gt;</code>."
        },
        {
          "kind": "variable",
          "name": "Custom_Slotted_Close",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n    <div>\n        <p>Custom rich html can be slotted in the <code class=\"language-js\">'close'</code> slot to customize the close button for the <code class=\"language-html\">&lt;omni-toast&gt;</code>.</p>\n    </div>\n    `,\n    render: (args: Args) => html`\n        <omni-toast\n            data-testid=\"test-toast\"\n            detail=\"${ifNotEmpty(args.detail)}\"\n            header=\"${ifNotEmpty(args.header)}\"\n            type=\"${ifNotEmpty(args.type)}\"\n            ?closeable=\"${args.closeable}\">\n            ${args.prefix ? html`${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n            ${unsafeHTML(args['[Default Slot]'])}\n            ${args.close ? html`${unsafeHTML(assignToSlot('close', args.close))}` : nothing}\n        </omni-toast>\n    `,\n    frameworkSources: [\n        {\n            framework: 'Vue',\n            load: (args) => getSourceFromLit(Custom_Slotted_Close!.render!(args)).replaceAll(' closeable', ' :closeable=\"true\"')\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniToast } from \"@capitec/omni-components-react/toast\";\n\nconst App = () =>   <OmniToast${args.detail ? ` detail=\"${args.detail}\"` : ''}${args.header ? ` header=\"${args.header}\"` : ''}${\n                args.type ? ` type=\"${args.type}\"` : ''\n            }${args.closeable ? ` closeable` : ''}>\n                        <svg slot=\"close\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <g transform=\"translate(-2,-1.5)\">\n                                <path d=\"M5 10.75v-1.5h10v1.5Z\"></path>\n                            </g>\n                        </svg>\n                    </OmniToast>;`\n        }\n    ],\n    name: 'Custom Slotted Close',\n    args: {\n        closeable: true,\n        detail: 'The toast description',\n        header: 'The toast header',\n        type: 'none',\n        prefix: undefined,\n        '[Default Slot]': undefined,\n        close: raw`<svg slot=\"close\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g transform=\"translate(-2,-1.5)\">\n        <path d=\"M5 10.75v-1.5h10v1.5Z\"></path>\n    </g>\n</svg>`\n    }\n}",
          "description": "\n    <div>\n        <p>Custom rich html can be slotted in the <code class=\"language-js\">'close'</code> slot to customize the close button for the <code class=\"language-html\">&lt;omni-toast&gt;</code>.</p>\n    </div>\n    "
        },
        {
          "kind": "variable",
          "name": "Type",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n    <div>\n        <p>Set the display type of the <code class=\"language-html\">&lt;omni-toast&gt;</code>.<p>\n        <br/>\n        <span>The <code class=\"language-javascript\">'type'</code> attribute supports the following options:\n            <ul>\n                <li><code class=\"language-javascript\">'success'</code> - Green themed toast with a checkmark icon to indicate success.</li>\n                <li><code class=\"language-javascript\">'warning'</code> - Orange themed toast with a yield icon to indicate warning.</li>\n                <li><code class=\"language-javascript\">'error'</code> - Red themed toast with an exclamation icon to indicate error.</li>\n                <li><code class=\"language-javascript\">'info'</code> - Blue themed toast with an information icon to indicate info.</li>\n                <li><code class=\"language-javascript\">'none'</code> - Default themed toast with no icon. (Default)</li>\n            </ul>\n        </span>\n    <div>\n    `,\n    render: (args: Args) => html`\n        <omni-toast\n            data-testid=\"test-toast\"\n            detail=\"${ifNotEmpty(args.detail)}\"\n            header=\"${ifNotEmpty(args.header)}\"\n            type=\"${ifNotEmpty(args.type)}\"\n            ?closeable=\"${args.closeable}\">\n            ${args.prefix ? html`${unsafeHTML(assignToSlot('prefix', args.prefix))}` : nothing}\n            ${unsafeHTML(args['[Default Slot]'])}\n            ${args.close ? html`${unsafeHTML(assignToSlot('close', args.close))}` : nothing}\n        </omni-toast>\n    `,\n    frameworkSources: [\n        {\n            framework: 'React',\n            load: (args) => `import { OmniToast } from \"@capitec/omni-components-react/toast\";\n\nconst App = () => <OmniToast${args.detail ? ` detail=\"${args.detail}\"` : ''}${args.header ? ` header=\"${args.header}\"` : ''}${\n                args.type ? ` type=\"${args.type}\"` : ''\n            }${args.closeable ? ` closeable` : ''}/>;`\n        }\n    ],\n    name: 'Type',\n    args: {\n        closeable: false,\n        detail: 'The toast description',\n        header: 'The toast header',\n        type: 'warning',\n        prefix: undefined,\n        '[Default Slot]': undefined,\n        close: undefined\n    }\n}",
          "description": "\n    <div>\n        <p>Set the display type of the <code class=\"language-html\">&lt;omni-toast&gt;</code>.<p>\n        <br/>\n        <span>The <code class=\"language-javascript\">'type'</code> attribute supports the following options:\n            <ul>\n                <li><code class=\"language-javascript\">'success'</code> - Green themed toast with a checkmark icon to indicate success.</li>\n                <li><code class=\"language-javascript\">'warning'</code> - Orange themed toast with a yield icon to indicate warning.</li>\n                <li><code class=\"language-javascript\">'error'</code> - Red themed toast with an exclamation icon to indicate error.</li>\n                <li><code class=\"language-javascript\">'info'</code> - Blue themed toast with an information icon to indicate info.</li>\n                <li><code class=\"language-javascript\">'none'</code> - Default themed toast with no icon. (Default)</li>\n            </ul>\n        </span>\n    <div>\n    "
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/toast/Toast.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Showing_Toasts",
          "declaration": {
            "name": "Showing_Toasts",
            "module": "src/toast/Toast.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Configure_Toast",
          "declaration": {
            "name": "Configure_Toast",
            "module": "src/toast/Toast.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Replacing_Toasts",
          "declaration": {
            "name": "Replacing_Toasts",
            "module": "src/toast/Toast.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Slotted_Content",
          "declaration": {
            "name": "Custom_Slotted_Content",
            "module": "src/toast/Toast.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Slotted_Prefix",
          "declaration": {
            "name": "Custom_Slotted_Prefix",
            "module": "src/toast/Toast.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Closeable",
          "declaration": {
            "name": "Closeable",
            "module": "src/toast/Toast.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Custom_Slotted_Close",
          "declaration": {
            "name": "Custom_Slotted_Close",
            "module": "src/toast/Toast.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Type",
          "declaration": {
            "name": "Type",
            "module": "src/toast/Toast.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/toast/ToastStack.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/toast/ToastStack.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Interactive",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n<div>\n    <p>The <code class=\"language-html\">&lt;omni-toast-stack&gt;</code> component can be authored as an element or created via script.</p>\n    <p>This example illustrates the component authored as an element. An important consideration to keep in mind when using this approach is that in order for the element to properly overlay all other content, it needs to be a root level element to avoid <code class=\"language-html\">z-index</code> related issues.</p>\n    <p>Creating the <code class=\"language-html\">&lt;omni-toast-stack&gt;</code> via script can help avoid this issue as it by default parents the newly created instance to the document body. The parent can still be specified to be a different element, however the same considerations will then apply.</p>\n</div>\n    `,\n    render: (args: Args) => {\n        const parent = interactiveStack?.parentElement ?? document.createElement('div');\n        if (interactiveStack) {\n            renderToElement(\n                renderStack(args, (el) => (interactiveStack = el as ToastStack)),\n                parent\n            );\n        }\n        return html`<omni-button @click=\"${() => {\n            if (!interactiveStack) {\n                parent.style.display = 'contents';\n                document.body.appendChild(parent);\n            } else {\n                interactiveStack.innerHTML = args['[Default Slot]'];\n            }\n            renderToElement(\n                renderStack(args, (el) => (interactiveStack = el as ToastStack)),\n                parent\n            );\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\">Show Toasts</omni-button>`;\n    },\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            load: (args) => getSourceFromLit(renderStack(args))\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(renderStack(args)).replaceAll(' closeable', ' :closeable=\"true\"').replaceAll(' reverse', ' :reverse=\"true\"')\n        }\n    ],\n    name: 'Interactive',\n    args: {\n        reverse: false,\n        position: 'bottom',\n        '[Default Slot]': raw`<omni-toast\n    data-toast-duration=\"4000\"\n    detail=\"The toast description\"\n    header=\"The toast message\"\n    type=\"success\"\n    closeable>\n</omni-toast>\n<omni-toast\n    detail=\"The toast description\"\n    header=\"The toast message\"\n    type=\"warning\"\n    closeable>\n</omni-toast>\n<omni-toast\n    data-toast-duration=\"3000\"\n    detail=\"The toast description\"\n    header=\"The toast message\"\n    type=\"info\"\n    >\n</omni-toast>\n<omni-toast\n    data-toast-duration=\"4500\"\n    detail=\"The toast description\"\n    header=\"The toast message\"\n    type=\"error\"\n    closeable>\n</omni-toast>\n<omni-toast\n    data-toast-duration=\"2000\"\n    detail=\"The toast description\"\n    header=\"The toast message\">\n</omni-toast>`\n    }\n}",
          "description": "\n<div>\n    <p>The <code class=\"language-html\">&lt;omni-toast-stack&gt;</code> component can be authored as an element or created via script.</p>\n    <p>This example illustrates the component authored as an element. An important consideration to keep in mind when using this approach is that in order for the element to properly overlay all other content, it needs to be a root level element to avoid <code class=\"language-html\">z-index</code> related issues.</p>\n    <p>Creating the <code class=\"language-html\">&lt;omni-toast-stack&gt;</code> via script can help avoid this issue as it by default parents the newly created instance to the document body. The parent can still be specified to be a different element, however the same considerations will then apply.</p>\n</div>\n    "
        },
        {
          "kind": "variable",
          "name": "Slotted_Toasts",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n        <div>\n            <p>Display slotted <code class=\"language-html\">&lt;omni-toast&gt;</code> elements in order.<p>\n            <p>Slotted toasts can be configured to auto-close after specified milliseconds with the <code class=\"language-js\">data-toast-duration</code> attribute, after which they will be removed from the parent element.</p>\n            <p>Slotted toasts with the <code class=\"language-js\">closeable</code> attribute will be removed from the parent element when their <code class=\"language-js\">close-click</code> event gets fired (usually via click of the close button).</p>    \n        <div>`,\n    render: (args: Args) => {\n        return html`<omni-button @click=\"${() => {\n            const parent = slottedStack?.parentElement ? slottedStack.parentElement : document.createElement('div');\n            if (!slottedStack) {\n                parent.style.display = 'contents';\n                document.body.appendChild(parent);\n            } else {\n                slottedStack.innerHTML = args['[Default Slot]'];\n            }\n            renderToElement(\n                renderStack(args, (el) => (slottedStack = el as ToastStack), 'test-toast-stack-slotted'),\n                parent\n            );\n            slottedStack?.requestUpdate();\n            document.dispatchEvent(\n                new CustomEvent('story-renderer-interactive-update', {\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }}\">Show Toasts</omni-button>`;\n    },\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            load: (args) => getSourceFromLit(renderStack(args))\n        },\n        {\n            framework: 'Vue',\n            load: (args) =>\n                getSourceFromLit(renderStack(args)).replaceAll(' closeable', ' :closeable=\"true\"').replaceAll(' reverse', ' :reverse=\"true\"')\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniToast, OmniToastStack } from \"@capitec/omni-components-react/toast\";\n\nconst App = () => <OmniToastStack position=\"${args.position}\" >\n                    <OmniToast\n                        data-toast-duration=\"15000\"\n                        detail=\"The toast description\"\n                        header=\"The toast message\"\n                        type=\"success\"\n                        closeable>\n                    </OmniToast>\n                    <OmniToast\n                        detail=\"The toast description\"\n                        header=\"The toast message\"\n                        type=\"warning\"\n                        closeable>\n                    </OmniToast>\n                    <OmniToast\n                        data-toast-duration=\"3000\"\n                        detail=\"The toast description\"\n                        header=\"The toast message\"\n                        type=\"info\"\n                        >\n                    </OmniToast>\n                    <OmniToast\n                        data-toast-duration=\"10000\"\n                        detail=\"The toast description\"\n                        header=\"The toast message\"\n                        type=\"error\"\n                        closeable>\n                    </OmniToast>\n                    <OmniToast\n                        data-toast-duration=\"15000\"\n                        detail=\"The toast description\"\n                        header=\"The toast message\">\n                    </OmniToast>\n                  </OmniToastStack>;`\n        }\n    ],\n    name: 'Slotted Toasts',\n    args: {\n        reverse: false,\n        position: 'bottom',\n        '[Default Slot]': raw`<omni-toast\n    data-toast-duration=\"15000\"\n    detail=\"The toast description\"\n    header=\"The toast message\"\n    type=\"success\"\n    closeable>\n</omni-toast>\n<omni-toast\n    detail=\"The toast description\"\n    header=\"The toast message\"\n    type=\"warning\"\n    closeable>\n</omni-toast>\n<omni-toast\n    data-toast-duration=\"3000\"\n    detail=\"The toast description\"\n    header=\"The toast message\"\n    type=\"info\"\n    >\n</omni-toast>\n<omni-toast\n    data-toast-duration=\"10000\"\n    detail=\"The toast description\"\n    header=\"The toast message\"\n    type=\"error\"\n    closeable>\n</omni-toast>\n<omni-toast\n    data-toast-duration=\"15000\"\n    detail=\"The toast description\"\n    header=\"The toast message\">\n</omni-toast>`\n    }\n}",
          "description": "\n        <div>\n            <p>Display slotted <code class=\"language-html\">&lt;omni-toast&gt;</code> elements in order.<p>\n            <p>Slotted toasts can be configured to auto-close after specified milliseconds with the <code class=\"language-js\">data-toast-duration</code> attribute, after which they will be removed from the parent element.</p>\n            <p>Slotted toasts with the <code class=\"language-js\">closeable</code> attribute will be removed from the parent element when their <code class=\"language-js\">close-click</code> event gets fired (usually via click of the close button).</p>    \n        <div>"
        },
        {
          "kind": "variable",
          "name": "Show_From_Script",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n        <div>\n            <p>Create new <code class=\"language-html\">&lt;omni-toast&gt;</code> elements from script.<p>\n            <p>Toasts can be configured to auto-close after specified milliseconds with the <code class=\"language-js\">duration</code> property, after which they will be removed from the parent element.</p>\n            <p>Toasts with the <code class=\"language-js\">closeable</code> property will be removed from the parent element when their <code class=\"language-js\">close-click</code> event gets fired (usually via click of the close button).</p>\n            <p>All <code class=\"language-html\">&lt;omni-toast&gt;</code> attributes can be configured as well as additional render functions that can bed provided for slotted content on the toasts.</p>    \n        <div>`,\n    render: (args: Args) => {\n        return html`<omni-button @click=\"${() => {\n            if (!addedStack) {\n                const parent = document.createElement('div');\n                parent.style.display = 'contents';\n                document.body.appendChild(parent);\n                renderToElement(\n                    renderStack(args, (el) => (addedStack = el as ToastStack), 'test-toast-stack-added'),\n                    parent\n                );\n                document.dispatchEvent(\n                    new CustomEvent('story-renderer-interactive-update', {\n                        bubbles: true,\n                        composed: true\n                    })\n                );\n            }\n            addedStack!.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n            addedStack!.showToast({\n                type: 'info',\n                header: 'Test',\n                detail: 'Test Info',\n                closeable: true,\n                // duration: 15000,\n                prefix: `✅`,\n                close: `❎`,\n                content: raw`<span>My Extra <strong>Content</strong></span>`\n            });\n        }}\">Show Toasts</omni-button>`;\n    },\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => getSourceFromLit(renderStack(args)),\n                jsFragment: `const toastStack = document.querySelector('omni-toast-stack');\ntoastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\ntoastStack.showToast({\n    type: 'info',\n    header: 'Test',\n    detail: 'Test Info',\n    closeable: true,\n    // duration: 15000, // Do not set duration to keep toast until closed by user.\n    prefix: '✅',\n    close: '❎',\n    content: '<span>My Extra <strong>Content</strong></span>'\n});\n                `\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniToastStack } from \"@capitec/omni-components-react/toast\";\n\nconst App = () => {\n    let toastStack = null;\n    const setRef = e => {\n        toastStack = e;\n        \n        toastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n        toastStack.showToast({\n            type: 'info',\n            header: 'Test',\n            detail: 'Test Info',\n            closeable: true,\n            // duration: 15000, // Do not set duration to keep toast until closed by user.\n            prefix: '✅',\n            close: '❎',\n            content: '<span>My Extra <strong>Content</strong></span>'\n        });\n    }\n            \n    return <OmniToastStack ref={setRef} position=\"${args.position}\" />;                    \n}`\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        renderStack(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    ),\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const toastStack = e;\n    toastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n    toastStack.showToast({\n        type: 'info',\n        header: 'Test',\n        detail: 'Test Info',\n        closeable: true,\n        // duration: 15000, // Do not set duration to keep toast until closed by user.\n        prefix: '✅',\n        close: '❎',\n        content: '<span>My Extra <strong>Content</strong></span>'\n    });\n}`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(renderStack(args)).replaceAll(' closeable', ' :closeable=\"true\"').replaceAll(' reverse', ' :reverse=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n\n        let toastStack = document.querySelector('omni-toast-stack');\n\n        // Wait for Vue to complete loading and the Toast Stack to be available\n        while (!toastStack) {\n            await Promise.resolve();\n            toastStack = document.querySelector('omni-toast-stack');\n        }\n        toastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n\n        toastStack.showToast({\n            type: 'info',\n            header: 'Test',\n            detail: 'Test Info',\n            closeable: true,\n            // duration: 15000, // Do not set duration to keep toast until closed by user.\n            prefix: '✅',\n            close: '❎',\n            content: '<span>My Extra <strong>Content</strong></span>'\n        });\n        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Show from script',\n    args: {\n        reverse: false,\n        position: 'bottom',\n        '[Default Slot]': undefined\n    }\n}",
          "description": "\n        <div>\n            <p>Create new <code class=\"language-html\">&lt;omni-toast&gt;</code> elements from script.<p>\n            <p>Toasts can be configured to auto-close after specified milliseconds with the <code class=\"language-js\">duration</code> property, after which they will be removed from the parent element.</p>\n            <p>Toasts with the <code class=\"language-js\">closeable</code> property will be removed from the parent element when their <code class=\"language-js\">close-click</code> event gets fired (usually via click of the close button).</p>\n            <p>All <code class=\"language-html\">&lt;omni-toast&gt;</code> attributes can be configured as well as additional render functions that can bed provided for slotted content on the toasts.</p>    \n        <div>"
        },
        {
          "kind": "variable",
          "name": "Create_From_Script",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n        <div>\n            <p>Create an <code class=\"language-html\">&lt;omni-toast-stack&gt;</code> instance from script.<p>\n            <p>An important consideration to keep in mind when using authoring the element via html is that in order for the element to properly overlay all other content, it needs to be a root level element to avoid <code class=\"language-html\">z-index</code> related issues.</p>\n            <p>Creating the <code class=\"language-html\">&lt;omni-toast-stack&gt;</code> via script as in this example can help avoid this issue as it by default parents the newly created instance to the document body. The parent can still be specified to be a different element, however the same considerations will then apply.</p>\n        <div>`,\n    render: (args: Args) => {\n        if (!createdStack) {\n            createdStack = ToastStack.create({\n                position: 'top',\n                reverse: true\n            });\n            createdStack?.setAttribute('data-testid', 'test-toast-stack-created');\n        }\n        return html`<omni-button @click=\"${() => {\n            createdStack!.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n            createdStack!.showToast({\n                type: 'info',\n                header: 'Test',\n                detail: 'Test Info',\n                closeable: true,\n                // duration: 15000,\n                prefix: `✅`,\n                close: `❎`,\n                content: raw`<span>My Extra <strong>Content</strong></span>`\n            });\n        }}\">Show Toasts</omni-button>`;\n    },\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: raw`<div>HTML Content</div>`,\n                jsFragment: `import { ToastStack } from '@capitec/omni-components/toast';\nconst toastStack = ToastStack.create({\n    position: 'top',\n    reverse: true\n});\n\ntoastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\ntoastStack.showToast({\n    type: 'info',\n    header: 'Test',\n    detail: 'Test Info',\n    closeable: true,\n    // duration: 15000, // Do not set duration to keep toast until closed by user.\n    prefix: '✅',\n    close: '❎',\n    content: '<span>My Extra <strong>Content</strong></span>'\n});`\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { ToastStack } from '@capitec/omni-components-react/toast';\n\nconst App = () => <div>HTML Content</div>;\n\nconst toastStack = ToastStack.create({\n    position: 'top',\n    reverse: true\n});\n\ntoastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\ntoastStack.showToast({\n    type: 'info',\n    header: 'Test',\n    detail: 'Test Info',\n    closeable: true,\n    // duration: 15000, // Do not set duration to keep toast until closed by user.\n    prefix: '✅',\n    close: '❎',\n    content: '<span>My Extra <strong>Content</strong></span>'\n});`\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: raw`<div>HTML Content</div>`,\n                jsFragment: `import { ToastStack } from '@capitec/omni-components/toast';\nconst toastStack = ToastStack.create({\n    position: 'top',\n    reverse: true\n});\n\ntoastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\ntoastStack.showToast({\n    type: 'info',\n    header: 'Test',\n    detail: 'Test Info',\n    closeable: true,\n    // duration: 15000, // Do not set duration to keep toast until closed by user.\n    prefix: '✅',\n    close: '❎',\n    content: '<span>My Extra <strong>Content</strong></span>'\n});`\n            }\n        }\n    ],\n    name: 'Create from script',\n    args: {\n        reverse: false,\n        position: 'bottom',\n        '[Default Slot]': undefined\n    }\n}",
          "description": "\n        <div>\n            <p>Create an <code class=\"language-html\">&lt;omni-toast-stack&gt;</code> instance from script.<p>\n            <p>An important consideration to keep in mind when using authoring the element via html is that in order for the element to properly overlay all other content, it needs to be a root level element to avoid <code class=\"language-html\">z-index</code> related issues.</p>\n            <p>Creating the <code class=\"language-html\">&lt;omni-toast-stack&gt;</code> via script as in this example can help avoid this issue as it by default parents the newly created instance to the document body. The parent can still be specified to be a different element, however the same considerations will then apply.</p>\n        <div>"
        },
        {
          "kind": "variable",
          "name": "Position",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n        <div>\n            <p>Position <code class=\"language-html\">&lt;omni-toast&gt;</code> elements in the stack.<p>\n            <br/>\n            <span>The <code class=\"language-javascript\">'position'</code> attribute supports the following options:\n                <ul>\n                    <li><code class=\"language-javascript\">'top'</code></li>\n                    <li><code class=\"language-javascript\">'bottom'</code> (Default)</li>\n                    <li><code class=\"language-javascript\">'left'</code></li>\n                    <li><code class=\"language-javascript\">'right'</code></li>\n                    <li><code class=\"language-javascript\">'top-left'</code></li>\n                    <li><code class=\"language-javascript\">'top-right'</code></li>\n                    <li><code class=\"language-javascript\">'bottom-left'</code></li>\n                    <li><code class=\"language-javascript\">'bottom-right'</code></li>\n                </ul>\n            </span>\n        <div>`,\n    render: (args: Args) => {\n        return html`<omni-button @click=\"${() => {\n            if (!positionStack) {\n                const parent = document.createElement('div');\n                parent.style.display = 'contents';\n                document.body.appendChild(parent);\n                renderToElement(\n                    renderStack(args, (el) => (positionStack = el as ToastStack), 'test-toast-stack-position'),\n                    parent\n                );\n                document.dispatchEvent(\n                    new CustomEvent('story-renderer-interactive-update', {\n                        bubbles: true,\n                        composed: true\n                    })\n                );\n            }\n            positionStack!.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n            positionStack!.showToast({\n                type: 'info',\n                header: 'Test',\n                detail: 'Test Info',\n                closeable: true,\n                // duration: 15000,\n                prefix: `✅`,\n                close: `❎`,\n                content: raw`<span>My Extra <strong>Content</strong></span>`\n            });\n        }}\">Show Toasts</omni-button>`;\n    },\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => getSourceFromLit(renderStack(args)),\n                jsFragment: `const toastStack = document.querySelector('omni-toast-stack');\ntoastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\ntoastStack.showToast({\n    type: 'info',\n    header: 'Test',\n    detail: 'Test Info',\n    closeable: true,\n    // duration: 15000, // Do not set duration to keep toast until closed by user.\n    prefix: '✅',\n    close: '❎',\n    content: '<span>My Extra <strong>Content</strong></span>'\n});\n                `\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniToastStack } from \"@capitec/omni-components-react/toast\";\n\nconst App = () => {\n    let toastStack = null;\n    const setRef = e => {\n        toastStack = e;\n        \n        toastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n        toastStack.showToast({\n            type: 'info',\n            header: 'Test',\n            detail: 'Test Info',\n            closeable: true,\n            // duration: 15000, // Do not set duration to keep toast until closed by user.\n            prefix: '✅',\n            close: '❎',\n            content: '<span>My Extra <strong>Content</strong></span>'\n        });\n    }\n            \n    return <OmniToastStack ref={setRef} position=\"${args.position}\" />;                    \n}`\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        renderStack(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    ),\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n                \nconst onRef = e => {\n    const toastStack = e;\n    toastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n    toastStack.showToast({\n        type: 'info',\n        header: 'Test',\n        detail: 'Test Info',\n        closeable: true,\n        // duration: 15000, // Do not set duration to keep toast until closed by user.\n        prefix: '✅',\n        close: '❎',\n        content: '<span>My Extra <strong>Content</strong></span>'\n    });\n}`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(renderStack(args)).replaceAll(' closeable', ' :closeable=\"true\"').replaceAll(' reverse', ' :reverse=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n\n        let toastStack = document.querySelector('omni-toast-stack');\n\n        // Wait for Vue to complete loading and the Toast Stack to be available\n        while (!toastStack) {\n            await Promise.resolve();\n            toastStack = document.querySelector('omni-toast-stack');\n        }\n        toastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n\n        toastStack.showToast({\n            type: 'info',\n            header: 'Test',\n            detail: 'Test Info',\n            closeable: true,\n            // duration: 15000, // Do not set duration to keep toast until closed by user.\n            prefix: '✅',\n            close: '❎',\n            content: '<span>My Extra <strong>Content</strong></span>'\n        });\n        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Position',\n    args: {\n        reverse: false,\n        position: 'right',\n        '[Default Slot]': undefined\n    }\n}",
          "description": "\n        <div>\n            <p>Position <code class=\"language-html\">&lt;omni-toast&gt;</code> elements in the stack.<p>\n            <br/>\n            <span>The <code class=\"language-javascript\">'position'</code> attribute supports the following options:\n                <ul>\n                    <li><code class=\"language-javascript\">'top'</code></li>\n                    <li><code class=\"language-javascript\">'bottom'</code> (Default)</li>\n                    <li><code class=\"language-javascript\">'left'</code></li>\n                    <li><code class=\"language-javascript\">'right'</code></li>\n                    <li><code class=\"language-javascript\">'top-left'</code></li>\n                    <li><code class=\"language-javascript\">'top-right'</code></li>\n                    <li><code class=\"language-javascript\">'bottom-left'</code></li>\n                    <li><code class=\"language-javascript\">'bottom-right'</code></li>\n                </ul>\n            </span>\n        <div>"
        },
        {
          "kind": "variable",
          "name": "Reverse",
          "type": {
            "text": "ComponentStoryFormat<Args>"
          },
          "default": "{\n    description: () => html`\n        <div>\n            <p>Reverse <code class=\"language-html\">&lt;omni-toast&gt;</code> elements in the stack.<p>\n            <p>By default newest toasts are showed at the bottom of the stack. When reversed, newest toasts are showed on top of the stack.</p>\n        <div>`,\n    render: (args: Args) => {\n        return html`<omni-button @click=\"${() => {\n            if (!reverseStack) {\n                renderToElement(\n                    renderStack(args, (el) => (reverseStack = el as ToastStack), 'test-toast-stack-reverse'),\n                    document.body\n                );\n                document.dispatchEvent(\n                    new CustomEvent('story-renderer-interactive-update', {\n                        bubbles: true,\n                        composed: true\n                    })\n                );\n            }\n            reverseStack!.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n            reverseStack!.showToast({\n                type: 'info',\n                header: 'Test',\n                detail: 'Test Info',\n                closeable: true,\n                // duration: 15000,\n                prefix: `✅`,\n                close: `❎`,\n                content: raw`<span>My Extra <strong>Content</strong></span>`\n            });\n        }}\">Show Toasts</omni-button>`;\n    },\n    frameworkSources: [\n        {\n            framework: 'HTML',\n            sourceParts: {\n                htmlFragment: (args) => getSourceFromLit(renderStack(args)),\n                jsFragment: `const toastStack = document.querySelector('omni-toast-stack');\ntoastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\ntoastStack.showToast({\n    type: 'info',\n    header: 'Test',\n    detail: 'Test Info',\n    closeable: true,\n    // duration: 15000, // Do not set duration to keep toast until closed by user.\n    prefix: '✅',\n    close: '❎',\n    content: '<span>My Extra <strong>Content</strong></span>'\n});\n                `\n            }\n        },\n        {\n            framework: 'React',\n            load: (args) => `import { OmniToastStack } from \"@capitec/omni-components-react/toast\";\n\nconst App = () => {\n    let toastStack = null;\n    const setRef = e => {\n        toastStack = e;\n        \n        toastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n        toastStack.showToast({\n            type: 'info',\n            header: 'Test',\n            detail: 'Test Info',\n            closeable: true,\n            // duration: 15000, // Do not set duration to keep toast until closed by user.\n            prefix: '✅',\n            close: '❎',\n            content: '<span>My Extra <strong>Content</strong></span>'\n        });\n    }\n            \n    return <OmniToastStack ref={setRef} position=\"${args.position}\" reverse/>;                    \n}`\n        },\n        {\n            framework: 'Lit',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(\n                        renderStack(args),\n                        (container) => container.firstElementChild?.setAttribute('data-replace-token', ''),\n                        (s) => s.replace(' data-replace-token=\"\"', ' ${ref(onRef)}')\n                    ),\n                jsFragment: `import { ref } from 'https://unpkg.com/lit-html/directives/ref.js?module';\n\nconst onRef = e => {\n    const toastStack = e;\n    toastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n    toastStack.showToast({\n        type: 'info',\n        header: 'Test',\n        detail: 'Test Info',\n        closeable: true,\n        // duration: 15000, // Do not set duration to keep toast until closed by user.\n        prefix: '✅',\n        close: '❎',\n        content: '<span>My Extra <strong>Content</strong></span>'\n    });\n}`\n            }\n        },\n        {\n            framework: 'Vue',\n            sourceParts: {\n                htmlFragment: (args) =>\n                    getSourceFromLit(renderStack(args)).replaceAll(' closeable', ' :closeable=\"true\"').replaceAll(' reverse', ' :reverse=\"true\"') +\n                    `\n<!-- Execute function on Vue load -->\n<div style=\"display: none;\">\n{{ (() =>  { run() })() }}\n</div>\n`,\n                jsFragment: `window.vueData = {\n    run: async () => {\n\n        let toastStack = document.querySelector('omni-toast-stack');\n\n        // Wait for Vue to complete loading and the Toast Stack to be available\n        while (!toastStack) {\n            await Promise.resolve();\n            toastStack = document.querySelector('omni-toast-stack');\n        }\n        toastStack.showToast({ type: 'info', header: 'Test', detail: 'Test Info', closeable: true, duration: 15000 });\n\n        toastStack.showToast({\n            type: 'info',\n            header: 'Test',\n            detail: 'Test Info',\n            closeable: true,\n            // duration: 15000, // Do not set duration to keep toast until closed by user.\n            prefix: '✅',\n            close: '❎',\n            content: '<span>My Extra <strong>Content</strong></span>'\n        });\n        \n    }\n};`\n            }\n        }\n    ],\n    name: 'Reverse',\n    args: {\n        reverse: true,\n        position: 'bottom',\n        '[Default Slot]': undefined\n    }\n}",
          "description": "\n        <div>\n            <p>Reverse <code class=\"language-html\">&lt;omni-toast&gt;</code> elements in the stack.<p>\n            <p>By default newest toasts are showed at the bottom of the stack. When reversed, newest toasts are showed on top of the stack.</p>\n        <div>"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/toast/ToastStack.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slotted_Toasts",
          "declaration": {
            "name": "Slotted_Toasts",
            "module": "src/toast/ToastStack.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Show_From_Script",
          "declaration": {
            "name": "Show_From_Script",
            "module": "src/toast/ToastStack.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Create_From_Script",
          "declaration": {
            "name": "Create_From_Script",
            "module": "src/toast/ToastStack.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Position",
          "declaration": {
            "name": "Position",
            "module": "src/toast/ToastStack.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Reverse",
          "declaration": {
            "name": "Reverse",
            "module": "src/toast/ToastStack.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/toast/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Toast.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./ToastStack.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Directives.js"
          }
        }
      ]
    }
  ]
}
