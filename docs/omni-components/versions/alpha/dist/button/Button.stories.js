import"../chunks-js/chunk.IOHAZ6DX.js";import{u as y}from"../chunks-js/chunk.P4DNRGFH.js";import"../chunks-js/chunk.LYPQHKQX.js";import"../chunks-js/chunk.BMVIQMEU.js";import"../chunks-js/chunk.MPJVWYSG.js";import{a as b}from"../chunks-js/chunk.3FTDPY75.js";import"../chunks-js/chunk.VOM777LA.js";import{b as l,c as g}from"../chunks-js/chunk.LME64W74.js";import{a as u}from"../chunks-js/chunk.R4IMIBZU.js";import{c as i}from"../chunks-js/chunk.QC5ZUB6O.js";import{d as n}from"../chunks-js/chunk.YQLTAQFI.js";import"../chunks-js/chunk.XMM72FEY.js";import"../chunks-js/chunk.ZO5UBYOG.js";import"../chunks-js/chunk.CHYIO324.js";import{b as r}from"../chunks-js/chunk.3GEUDTAZ.js";import{h as f,l as d,o as p}from"../chunks-js/chunk.2ZZQBHAA.js";d();p();var m=f(g(),1);var h=["primary","secondary","clear","white"],w=["left","top","right","bottom"],z={title:"UI Components/Button",component:"omni-button",argTypes:{type:{control:"radio",options:h},slotPosition:{control:"radio",options:w},"slot-position":{control:!1},"[Default Slot]":{control:"text"}}},U={render:t=>r`
    <omni-button
      data-testid="test-button"
      type="${t.type}"
      label="${u(t.label)}"
      slot-position="${t.slotPosition}"
      ?disabled=${t.disabled}>
      ${b(t["[Default Slot]"])}
    </omni-button>
  `,name:"Interactive",args:{type:"secondary",label:"Button",slotPosition:"top",disabled:!1,"[Default Slot]":y`<omni-icon icon="@material/thumb_up"></omni-icon>`},play:async t=>{let e=i(t.canvasElement).getByTestId("test-button"),o=m.fn();e.addEventListener("click",()=>o()),await l.click(e,{pointerEventsCheck:0}),await l.click(e,{pointerEventsCheck:0}),await n(o).toBeCalledTimes(2)}},_={render:t=>r` <omni-button type="${t.type}" label="${t.label}" data-testid="test-button"></omni-button> `,name:"Type",description:"Set the type of button to render using different combinations of primary and alternate colours.",args:{type:"primary",label:"Click"},play:async t=>{let o=i(t.canvasElement).getByTestId("test-button").shadowRoot.getElementById("button"),a=o==null?void 0:o.classList.contains("primary");await n(a).toBeTruthy()}},B={render:t=>r` <omni-button label="${t.label}" data-testid="test-button"></omni-button> `,name:"Label",description:"Set a text value to display within.",args:{label:"Click"},play:async t=>{var s;let o=i(t.canvasElement).getByTestId("test-button").shadowRoot.getElementById("label"),a=(o==null?void 0:o.innerText)===((s=B.args)==null?void 0:s.label);await n(a).toBeTruthy()}},G={render:()=>r`
    <omni-button data-testid="test-button">
      <omni-icon size="default" icon="./assets/images/direction.svg"></omni-icon>
    </omni-button>
  `,name:"Slot",description:"Set html content to display within.",args:{},play:async t=>{var s;let o=(s=i(t.canvasElement).getByTestId("test-button").shadowRoot)==null?void 0:s.querySelector("slot"),a=o==null?void 0:o.assignedElements().find(c=>c.tagName.toLowerCase()==="omni-icon");await n(a).toBeTruthy()}},J={render:t=>r` <omni-button disabled label="${t.label}" data-testid="test-button"></omni-button> `,name:"Disabled",description:"Prevent interaction (pointer events).",args:{label:"Disabled"},play:async t=>{var c;let e=i(t.canvasElement).getByTestId("test-button"),o=(c=e.shadowRoot)==null?void 0:c.getElementById("button"),a=o==null?void 0:o.classList.contains("disabled");await n(a).toBeTruthy();let s=m.fn();e.addEventListener("click",T=>{s()}),await n(()=>l.click(e)).rejects.toThrow(/pointer-events: none/),await n(()=>l.click(e)).rejects.toThrow(/pointer-events: none/),await n(s).toBeCalledTimes(0)}};export{J as Disabled,U as Interactive,B as Label,G as Slot,_ as Type,z as default};
//# sourceMappingURL=Button.stories.js.map
