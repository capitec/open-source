{"version":3,"file":"Chip.spec.js","sourceRoot":"","sources":["../../src/chip/Chip.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { test, expect, getStoryArgs, mockEventListener, withCoverage } from '../utils/JestPlaywright.js';\n\ntest(`Chip - Visual and Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/chip/');\n\n        const chip = page.locator('.Interactive').getByTestId('test-chip');\n\n        await expect(chip).toHaveScreenshot('chip-initial.png');\n\n        // mock the click event.\n        const click = await mockEventListener(chip, 'click');\n\n        await chip.click({\n            force: true\n        });\n        await chip.click({\n            force: true\n        });\n\n        await expect(click).toBeCalledTimes(2);\n    });\n});\n\ntest(`Chip - Label Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/chip/');\n\n        const args = await getStoryArgs(page, 'Label');\n        const chip = page.locator('.Label').getByTestId('test-chip');\n\n        await expect(chip).toHaveScreenshot('chip-initial.png');\n        await expect(chip.locator('#label')).toHaveText(args?.label as string);\n    });\n});\n\ntest(`Chip - Closable Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/chip/');\n\n        const chip = page.locator('.Closable').getByTestId('test-chip');\n\n        await expect(chip).toHaveScreenshot('chip-initial.png');\n\n        const remove = await mockEventListener(chip, 'remove');\n\n        const closeButton = chip.locator('#closeButton');\n\n        await closeButton.click({\n            force: true\n        });\n        await closeButton.click({\n            force: true\n        });\n        await chip.click({\n            force: true\n        });\n        await chip.click({\n            force: true\n        });\n        await expect(remove).toBeCalledTimes(2);\n    });\n});\n\ntest(`Chip - Disabled Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/chip/');\n\n        const chip = page.locator('.Disabled').getByTestId('test-chip');\n\n        await expect(chip).toHaveScreenshot('chip-initial.png');\n\n        const chipElement = chip.locator('#chip');\n        await expect(chipElement).toHaveClass(/disabled/);\n\n        const click = await mockEventListener(chip, 'click');\n\n        await chip.click({\n            force: true\n        });\n        await chip.click({\n            force: true\n        });\n\n        await expect(click).toBeCalledTimes(0);\n    });\n});\n\ntest(`Chip - Icon Slot Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/chip/');\n\n        const chip = page.locator('.Chip_Slot_Icon').getByTestId('test-chip');\n\n        await expect(chip).toHaveScreenshot('chip-initial.png');\n\n        const slotElement = chip.locator('slot[name=\"chip_icon\"]');\n        await expect(slotElement).toHaveCount(1);\n\n        const foundSlottedSvgElement = (\n            await slotElement.evaluateHandle((se: HTMLSlotElement) => se.assignedElements().find((e) => e.tagName.toLocaleLowerCase() === 'svg'))\n        ).asElement();\n        await expect(foundSlottedSvgElement).toBeTruthy();\n    });\n});\n\ntest(`Chip - Close Icon Slot Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/chip/');\n\n        const chip = page.locator('.Custom_Close_Icon').getByTestId('test-chip');\n\n        await expect(chip).toHaveScreenshot('chip-initial.png');\n\n        const slotElement = chip.locator('slot[name=\"close_icon\"]');\n        await expect(slotElement).toHaveCount(1);\n\n        const foundSlottedSvgElement = (\n            await slotElement.evaluateHandle((se: HTMLSlotElement) => se.assignedElements().find((e) => e.tagName.toLocaleLowerCase() === 'svg'))\n        ).asElement();\n        await expect(foundSlottedSvgElement).toBeTruthy();\n    });\n});\n"]}