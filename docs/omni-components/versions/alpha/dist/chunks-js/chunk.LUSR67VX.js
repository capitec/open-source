import{u}from"./chunk.K3YYK5GB.js";import{a as d}from"./chunk.3FTDPY75.js";import{b as y,c as g}from"./chunk.LME64W74.js";import{a as m}from"./chunk.R4IMIBZU.js";import{c as l}from"./chunk.QC5ZUB6O.js";import{d as s}from"./chunk.YQLTAQFI.js";import{b as i}from"./chunk.3GEUDTAZ.js";import{h as x,l as c,o as f}from"./chunk.2ZZQBHAA.js";c();f();var h=x(g(),1);var P=e=>{let o={render:t=>i`${d(`<${e}  data-testid="test-field" label="${m(t.label)}"></${e}>`)}`,name:"Label",description:"Set a text value to display as a label.",args:{label:"The Label"},play:async t=>{let a=l(t.canvasElement).getByTestId("test-field");await s(a.shadowRoot.querySelector(".label > span")).toHaveTextContent(o.args.label)}};return o},V=e=>{let o={render:t=>i`${d(`<${e}  data-testid="test-field" label="${m(t.label)}" hint="${t.hint}"></${e}>`)}`,name:"Hint",description:"Set a text value to display as a hint.",args:{label:"Hint",hint:"The Hint label"},play:async t=>{let n=l(t.canvasElement).getByTestId("test-field").shadowRoot.querySelector(".hint-label");await s(n).toBeTruthy(),await s(n).toHaveTextContent(o.args.hint)}};return o},Z=e=>{let o={render:t=>i`${d(`<${e} data-testid="test-field" label="${t.label}" error="${m(t.error)}"></${e}>`)}`,name:"Error",description:"Set a text value to display as an error.",args:{label:"Error",error:"The Error label"},play:async t=>{let n=l(t.canvasElement).getByTestId("test-field").shadowRoot.querySelector(".error-label");await s(n).toBeTruthy(),await s(n).toHaveTextContent(o.args.error)}};return o},q=(e,o="The input value")=>{let t={render:a=>i`${d(`<${e} data-testid="test-field" label="${m(a.label)}" value="${a.value}"></${e}>`)}`,name:"Value",description:"Set the current value of the component.",args:{label:"Value",value:o},play:async a=>{let r=l(a.canvasElement).getByTestId("test-field").shadowRoot.getElementById("inputField");await s(r).toHaveValue(t.args.value)}};return t},D=e=>({render:t=>i`${d(`
            <!-- Note that styles are applied to the slotted content via the style attribute and the --omni-form-label-margin-left css variable is overridden -->
            <${e} data-testid="test-field" style="--omni-form-label-margin-left:40px;" label="${m(t.label)}">
            ${t.prefix}
            </${e}>`)}`,name:"Prefix",description:"Set html content to display as a prefix within the component.",args:{label:"Prefix",prefix:u`<svg slot="prefix" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24px" height="24px" style="fill: orange; margin-left: 10px;"><path d="M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z"/></svg>`},play:async t=>{let n=l(t.canvasElement).getByTestId("test-field").shadowRoot.querySelector("slot[name=prefix]");await s(n).toBeTruthy();let r=n.assignedElements().find(p=>p.tagName.toLocaleLowerCase()==="svg");await s(r).toBeTruthy()}}),j=e=>({render:t=>i`${d(`
            <!-- Note that styles are applied to the slotted content via the style attribute -->
            <${e} data-testid="test-field" label="${m(t.label)}">
            ${t.suffix}
            </${e}>`)}`,name:"Suffix",description:"Set html content to display as a suffix within the component.",args:{label:"Suffix",suffix:u`<svg slot="suffix" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24px" height="24px" style="fill: orange; margin-right:10px;"><path d="M12 2.25c5.385 0 9.75 4.365 9.75 9.75s-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12 6.615 2.25 12 2.25Zm0 1.5a8.25 8.25 0 1 0 0 16.5 8.25 8.25 0 0 0 0-16.5ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 .743.648L17 12a.75.75 0 0 1-.75.75h-3.5v3.5a.75.75 0 0 1-.648.743L12 17a.75.75 0 0 1-.75-.75v-3.5h-3.5a.75.75 0 0 1-.743-.648L7 12a.75.75 0 0 1 .75-.75h3.5v-3.5a.75.75 0 0 1 .648-.743Z"/></svg>`},play:async t=>{let n=l(t.canvasElement).getByTestId("test-field").shadowRoot.querySelector("slot[name=suffix]");await s(n).toBeTruthy();let r=n.assignedElements().find(p=>p.tagName.toLocaleLowerCase()==="svg");await s(r).toBeTruthy()}}),O=e=>({render:t=>i`${d(`<${e} data-testid="test-field" label="${m(t.label)}" disabled></${e}>`)}`,name:"Disabled",description:"Prevent interaction (pointer/input events).",args:{label:"Disabled",disabled:!0},play:async t=>{let a=l(t.canvasElement).getByTestId("test-field"),n=a.attributes.getNamedItem("disabled");await s(n).toBeTruthy();let r=h.fn();a.addEventListener("input",r);let p=a.shadowRoot.getElementById("inputField");await y.type(p,"Value Update 3",{pointerEventsCheck:0}),await s(p.value).toBeFalsy(),await s(r).toBeCalledTimes(0)}});export{P as a,V as b,Z as c,q as d,D as e,j as f,O as g};
//# sourceMappingURL=chunk.LUSR67VX.js.map
