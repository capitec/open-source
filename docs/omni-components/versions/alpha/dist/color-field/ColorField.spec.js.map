{"version":3,"file":"ColorField.spec.js","sourceRoot":"","sources":["../../src/color-field/ColorField.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as jestMock from 'jest-mock';\nimport {\n    testLabelBehaviour,\n    testHintBehaviour,\n    testErrorBehaviour,\n    testValueBehaviour,\n    testClearableBehaviour,\n    testCustomClearableSlotBehaviour,\n    testPrefixBehaviour,\n    testSuffixBehaviour\n} from '../core/OmniInputPlaywright.js';\nimport { test, expect, withCoverage, type Page } from '../utils/JestPlaywright.js';\nimport type { ColorField } from './ColorField.js';\n\ntest(`Color Field - Interactive`, async ({ page, browserName }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/color-field/');\n        await page.evaluate(() => document.fonts.ready);\n\n        await page.waitForSelector('[data-testid]', {});\n\n        const field = page.locator('[data-testid]').first();\n\n        const inputField = field.locator('#inputField');\n\n        await expect(inputField).toHaveAttribute('type', 'color');\n        await expect(field).toHaveScreenshot('color-field.png');\n\n        await field.evaluate(async (f: ColorField) => {\n            f.value = '#F6B73C';\n            await f.updateComplete;\n        });\n        await expect(field).toHaveScreenshot('color-field-value.png');\n    });\n});\n\ntestLabelBehaviour('omni-color-field');\ntestHintBehaviour('omni-color-field');\ntestErrorBehaviour('omni-color-field');\ntestValueBehaviour('omni-color-field');\ntestClearableBehaviour('omni-color-field');\ntestCustomClearableSlotBehaviour('omni-color-field');\ntestPrefixBehaviour('omni-color-field');\ntestSuffixBehaviour('omni-color-field');\n\ntest(`Color Field - Disabled Behaviour`, async ({ page, isMobile }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/color-field/');\n\n        await page.waitForSelector('[data-testid]', {});\n\n        const args = await page.locator('story-renderer[key=Disabled]').evaluate((storyRenderer) => (storyRenderer as any).story.args);\n        const colorField = page.locator('.Disabled').getByTestId('test-field');\n        await colorField.evaluate(async (d: ColorField, args) => {\n            d.value = args.value;\n\n            await d.updateComplete;\n        }, args);\n\n        await expect(colorField).toHaveScreenshot('color-field-initial.png');\n\n        //Click event test.\n        const click = jestMock.fn();\n        await page.exposeFunction('jestClick', () => click());\n        await colorField.evaluate((node) => {\n            node.addEventListener('click', () => (window as any).jestClick());\n        });\n\n        await colorField.click({\n            force: true\n        });\n\n        await expect(click).toBeCalledTimes(0);\n    });\n});\n"]}