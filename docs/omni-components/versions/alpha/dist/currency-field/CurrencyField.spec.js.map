{"version":3,"file":"CurrencyField.spec.js","sourceRoot":"","sources":["../../src/currency-field/CurrencyField.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as jestMock from 'jest-mock';\nimport {\n    testLabelBehaviour,\n    testHintBehaviour,\n    testErrorBehaviour,\n    testValueBehaviour,\n    testClearableBehaviour,\n    testCustomClearableSlotBehaviour,\n    testPrefixBehaviour,\n    testSuffixBehaviour,\n    testDisabledBehaviour\n} from '../core/OmniInputPlaywright.js';\nimport { test, expect, withCoverage /*keyboardPaste, clipboardCopy*/ } from '../utils/JestPlaywright.js';\nimport type { CurrencyField } from './CurrencyField.js';\n\ntest(`Currency Field - Visual and Behaviour`, async ({ page, isMobile }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/currency-field/');\n\n        const args = await page.locator('story-renderer[key=Interactive]').evaluate((storyRenderer) => (storyRenderer as any).story.args);\n        const currencyField = page.locator('.Interactive').getByTestId('test-currency-field');\n\n        await currencyField.evaluate(async (c: CurrencyField) => {\n            c.value = '';\n            await c.updateComplete;\n        });\n\n        await expect(currencyField).toHaveScreenshot('currency-field-initial.png');\n\n        const inputField = currencyField.locator('input#inputField');\n\n        // Simulate click, focus and blur events\n        await inputField.click();\n        await expect(currencyField).toHaveScreenshot('currency-field-clicked.png');\n\n        await inputField.focus();\n        await expect(currencyField).toHaveScreenshot('currency-field-focussed.png');\n\n        await inputField.blur();\n        await expect(currencyField).toHaveScreenshot('currency-field-blurred.png');\n\n        const beforeinput = jestMock.fn();\n        await page.exposeFunction('jestbeforeinput', () => beforeinput());\n        await currencyField.evaluate((node) => {\n            node.addEventListener('beforeinput', () => (window as any).jestbeforeinput());\n        });\n\n        const value = '120000015';\n        await inputField.type(value);\n\n        // Check the following value as input value is formatted to currency value;\n        await expect(inputField).toHaveValue('1,200,000.15');\n        await expect(beforeinput).toBeCalledTimes(value.length);\n\n        // Backspacing to cover the removal of cents and cents separator\n\n        await inputField.press('Backspace');\n        await inputField.press('Backspace');\n\n        await expect(inputField).toHaveValue('12,000.00');\n\n        // Use left arrow key to position the caret after the currency separator.\n        await inputField.press('ArrowLeft');\n        await inputField.press('ArrowLeft');\n        await inputField.press('ArrowLeft');\n        await inputField.press('Backspace');\n\n        await expect(inputField).toHaveValue('1,200.00');\n\n        const number = '88.88';\n        // await clipboardCopy(page, number);\n        // await inputField.focus();\n        // await inputField.click();\n\n        // //Set the selection range of the input component to ensure the entire value is selected.\n        // await inputField.evaluate((i: HTMLInputElement) => i.setSelectionRange(0, 10));\n\n        // await keyboardPaste(page);\n        await currencyField.evaluate((c: CurrencyField, number) => (c.value = number), number);\n\n        await expect(inputField).toHaveValue(number);\n\n        await currencyField.evaluate(async (c: CurrencyField) => {\n            c.value = '';\n            await c.updateComplete;\n        });\n\n        await inputField.type(value);\n\n        // Check the following value as input value is formatted to currency value;\n        await expect(inputField).toHaveValue('1,200,000.15');\n\n        // // Paste invalid numeric value the alpha characters should be stripped and the value should be updated accordingly.\n        // await inputField.evaluate((i: HTMLInputElement) => i.setSelectionRange(3, 10));\n\n        // const invalidNumber = '4abc';\n        const invalidNumber = '124abc.15';\n        // await clipboardCopy(page, invalidNumber);\n        // await keyboardPaste(page);\n        await currencyField.evaluate((c: CurrencyField, invalidNumber) => (c.value = invalidNumber), invalidNumber);\n\n        // TODO: Enable test after fixing currency-field bug\n        test.fixme(true, 'Currency Field currently allows setting non-numeric content via javascript!');\n        await expect(inputField).toHaveValue('124.15');\n\n        //TODO add tests for before input scenarios\n    });\n});\n\ntestLabelBehaviour('omni-currency-field');\ntestHintBehaviour('omni-currency-field');\ntestErrorBehaviour('omni-currency-field');\ntestValueBehaviour('omni-currency-field');\ntestClearableBehaviour('omni-currency-field');\ntestCustomClearableSlotBehaviour('omni-currency-field');\ntestPrefixBehaviour('omni-currency-field');\ntestSuffixBehaviour('omni-currency-field');\ntestDisabledBehaviour('omni-currency-field');\n"]}