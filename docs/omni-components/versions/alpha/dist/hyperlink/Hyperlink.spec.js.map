{"version":3,"file":"Hyperlink.spec.js","sourceRoot":"","sources":["../../src/hyperlink/Hyperlink.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as jestMock from 'jest-mock';\nimport { test, expect, withCoverage } from '../utils/JestPlaywright.js';\n\ntest(`Hyperlink - Visual and Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/hyperlink/');\n\n        const args = await page.locator('story-renderer[key=Interactive]').evaluate((storyRenderer) => (storyRenderer as any).story.args);\n        const hyperlink = page.locator('.Interactive').getByTestId('test-hyperlink');\n\n        await expect(hyperlink).toHaveScreenshot('hyperlink-initial.png');\n\n        const click = jestMock.fn();\n        await page.exposeFunction('jestClick', () => click());\n        await hyperlink.evaluate((node) => {\n            node.addEventListener('click', () => (window as any).jestClick());\n        });\n        await hyperlink.click({\n            force: true\n        });\n        await hyperlink.click({\n            force: true\n        });\n\n        await expect(click).toBeCalledTimes(2);\n    });\n});\n\ntest(`Hyperlink - Label Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/hyperlink/');\n\n        const args = await page.locator('story-renderer[key=Label]').evaluate((storyRenderer) => (storyRenderer as any).story.args);\n        const hyperlink = page.locator('.Label').getByTestId('test-hyperlink');\n\n        await expect(hyperlink).toHaveScreenshot('hyperlink-initial.png');\n\n        await expect(hyperlink.getByText(args.label)).toHaveCount(1);\n    });\n});\n\ntest(`Hyperlink - Size Visual`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/hyperlink/');\n\n        const hyperlink = page.locator('.Size').getByTestId('test-hyperlink');\n\n        await expect(hyperlink).toHaveScreenshot('hyperlink-size.png');\n    });\n});\n\ntest(`Hyperlink - Href Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/hyperlink/');\n\n        const args = await page.locator('story-renderer[key=Href]').evaluate((storyRenderer) => (storyRenderer as any).story.args);\n        const hyperlink = page.locator('.Href').getByTestId('test-hyperlink');\n\n        await expect(hyperlink).toHaveScreenshot('hyperlink-initial.png');\n\n        // Start waiting for popup before clicking. Note no await.\n        const popupPromise = page.waitForEvent('popup');\n\n        await hyperlink.click();\n\n        const newPage = await popupPromise;\n        // Wait for the popup to load.\n        await newPage.waitForLoadState();\n\n        await expect(newPage.url()).toBe(new URL(args.href).toString());\n\n        await newPage.close();\n    });\n});\n\ntest(`Hyperlink - Disabled Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/hyperlink/');\n\n        const args = await page.locator('story-renderer[key=Disabled]').evaluate((storyRenderer) => (storyRenderer as any).story.args);\n        const hyperlink = page.locator('.Disabled').getByTestId('test-hyperlink');\n\n        await expect(hyperlink).toHaveScreenshot('hyperlink-initial.png');\n\n        const click = jestMock.fn();\n        await page.exposeFunction('jestClick', () => click());\n        await hyperlink.evaluate((node) => {\n            node.addEventListener('click', () => (window as any).jestClick());\n        });\n        await hyperlink.click({\n            force: true\n        });\n        await hyperlink.click({\n            force: true\n        });\n\n        await expect(click).toBeCalledTimes(0);\n    });\n});\n\ntest(`Hyperlink - Inline Visual`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/hyperlink/');\n\n        const paragraph = page.locator('.Inline').getByTestId('test-paragraph');\n        await expect(paragraph.locator('omni-hyperlink')).toHaveCount(1);\n\n        await expect(paragraph).toHaveScreenshot('hyperlink-inline.png');\n    });\n});\n"]}