{"version":3,"file":"PasswordField.spec.js","sourceRoot":"","sources":["../../src/password-field/PasswordField.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as jestMock from 'jest-mock';\nimport {\n    testLabelBehaviour,\n    testHintBehaviour,\n    testErrorBehaviour,\n    testValueBehaviour,\n    testClearableBehaviour,\n    testCustomClearableSlotBehaviour,\n    testPrefixBehaviour,\n    testSuffixBehaviour,\n    testDisabledBehaviour\n} from '../core/OmniInputPlaywright.js';\nimport { test, expect, withCoverage, type Page } from '../utils/JestPlaywright.js';\nimport type { PasswordField } from './PasswordField.js';\n\ntest(`Password Field - Interactive`, async ({ page, browserName }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/password-field/');\n        await page.evaluate(() => document.fonts.ready);\n\n        await page.waitForSelector('[data-testid]', {});\n\n        const passwordField = page.locator('[data-testid]').first();\n        passwordField.evaluate(async (t: PasswordField) => {\n            t.value = '';\n            await t.updateComplete;\n        });\n        await expect(passwordField).toHaveScreenshot('password-field.png');\n\n        const interactions = jestMock.fn();\n        await page.exposeFunction('jestInteract', () => interactions());\n        await passwordField.evaluate((node) => {\n            node.addEventListener('input', () => (window as any).jestInteract());\n            node.addEventListener('click', () => (window as any).jestInteract());\n        });\n\n        const showSlotElement = passwordField.locator('slot[name=show]');\n        await expect(showSlotElement).toHaveCount(1);\n        await showSlotElement.click();\n        await expect(passwordField).toHaveScreenshot('password-field-show.png');\n\n        const hideSlotElement = passwordField.locator('slot[name=hide]');\n        await expect(hideSlotElement).toHaveCount(1);\n        await hideSlotElement.click();\n        await expect(passwordField).toHaveScreenshot('password-field-hide.png');\n\n        const inputField = passwordField.locator('#inputField');\n\n        const value = 'Value Update';\n        await inputField.type(value);\n\n        await expect(inputField).toHaveValue(value);\n\n        await expect(interactions).toBeCalledTimes(value.length);\n        await expect(passwordField).toHaveScreenshot('password-field-value.png');\n    });\n});\n\ntestLabelBehaviour('omni-password-field');\ntestHintBehaviour('omni-password-field');\ntestErrorBehaviour('omni-password-field');\ntestValueBehaviour('omni-password-field');\ntestClearableBehaviour('omni-password-field');\ntestCustomClearableSlotBehaviour('omni-password-field');\ntestPrefixBehaviour('omni-password-field');\ntestSuffixBehaviour('omni-password-field');\ntestDisabledBehaviour('omni-password-field');\n\ntest(`Password Field - Custom Icon Slot`, async ({ page, browserName }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/password-field/');\n        await page.evaluate(() => document.fonts.ready);\n\n        const args = await page.locator('story-renderer[key=Custom_Icon_Slot]').evaluate((storyRenderer) => (storyRenderer as any).story.args);\n        const container = page.locator('.Custom_Icon_Slot');\n        const passwordField = container.locator('[data-testid]').first();\n        passwordField.evaluate(async (t: PasswordField) => {\n            t.value = '';\n            await t.updateComplete;\n        });\n        await expect(passwordField).toHaveScreenshot('password-field.png');\n\n        const showSlotElement = passwordField.locator('slot[name=show]');\n        await expect(showSlotElement).toHaveCount(1);\n        await showSlotElement.click({\n            force: true\n        });\n        await expect(passwordField).toHaveScreenshot('password-field-show.png');\n\n        const hideSlotElement = passwordField.locator('slot[name=hide]');\n        await expect(hideSlotElement).toHaveCount(1);\n        await hideSlotElement.click({\n            force: true\n        });\n        await expect(passwordField).toHaveScreenshot('password-field-hide.png');\n\n        const foundSlottedSvgElement = await showSlotElement.evaluate((s: HTMLSlotElement) =>\n            Boolean(s?.assignedElements().find((e) => e.tagName.toLocaleLowerCase() === 'omni-lock-open-icon'))\n        );\n        await expect(foundSlottedSvgElement).toBeTruthy();\n    });\n});\n"]}