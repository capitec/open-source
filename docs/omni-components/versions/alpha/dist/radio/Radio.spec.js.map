{"version":3,"file":"Radio.spec.js","sourceRoot":"","sources":["../../src/radio/Radio.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { test, expect, getStoryArgs, mockEventListener, withCoverage } from '../utils/JestPlaywright.js';\n\ntest(`Radio - Check / Unchecked Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/radio/');\n\n        const radio = page.locator('.Interactive').getByTestId('test-radio');\n\n        await radio.focus();\n        // Take screen shot of radio before it is clicked and changed to a checked state.\n        await expect(radio).toHaveScreenshot('radio-initial.png');\n        const content = radio.locator('#content');\n        const valueChange = await mockEventListener(radio, 'value-change');\n\n        await content.click();\n        await expect(radio).toHaveScreenshot('radio-checked.png');\n        await content.press('Space');\n        await expect(radio).toHaveScreenshot('radio-unchecked.png');\n        await expect(valueChange).toBeCalledTimes(2);\n    });\n});\n\ntest(`Radio - Label Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/radio/');\n\n        await page.waitForSelector('[data-testid]', {});\n        const args = await getStoryArgs(page, 'Label');\n        const radio = page.locator('story-renderer[key=Label]').locator('.Label').getByTestId('test-radio');\n        const label = radio.locator('label');\n        await expect(label).toHaveText(args.label);\n        await expect(radio).toHaveScreenshot('radio-label.png');\n    });\n});\n\ntest(`Radio - Hint Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/radio/');\n\n        await page.waitForSelector('[data-testid]', {});\n        const args = await getStoryArgs(page, 'Hint');\n        const radio = page.locator('.Hint').getByTestId('test-radio');\n        const hint = radio.locator('.hint');\n        await expect(hint).toHaveText(args.hint);\n        await expect(radio).toHaveScreenshot('radio-hint.png');\n    });\n});\n\ntest(`Radio - Error Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/radio/');\n        await page.waitForSelector('[data-testid]', {});\n\n        const args = await getStoryArgs(page, 'Error_Label');\n        const radio = page.locator('.Error_Label').getByTestId('test-radio');\n        const element = radio.locator('.error');\n        await expect(element).toHaveText(args.error);\n        await expect(radio).toHaveScreenshot('radio-error.png');\n    });\n});\n\ntest(`Radio - Disabled Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/radio/');\n        const radio = page.locator('.Disabled').getByTestId('test-radio');\n\n        const disabledElement = radio.locator('.disabled');\n        // Test initial disabled.\n        await expect(disabledElement).toBeVisible();\n        await expect(radio).toHaveScreenshot('radio-disabled.png');\n\n        const click = await mockEventListener(radio, 'click');\n\n        await radio.click({\n            force: true\n        });\n\n        await expect(click).toBeCalledTimes(0);\n\n        await expect(radio).toHaveScreenshot('radio-disabled-click.png');\n    });\n});\n\ntest(`Radio - Slot Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/radio/');\n\n        const radio = page.locator('.Slot').getByTestId('test-radio');\n        const slottedContent = await radio.innerHTML();\n\n        await expect(slottedContent).toEqual('Slotted');\n        await expect(radio).toHaveScreenshot('radio-slot.png');\n    });\n});\n"]}