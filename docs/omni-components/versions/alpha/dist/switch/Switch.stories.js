import"../chunks-js/chunk.RTZAZGF5.js";import{a as k}from"../chunks-js/chunk.JSH3M4FH.js";import{b as d}from"../chunks-js/chunk.XOIHXH3W.js";import{a as s}from"../chunks-js/chunk.XCXCHO25.js";import{b as i}from"../chunks-js/chunk.FVJIJQ42.js";import{c,d as m}from"../chunks-js/chunk.WPESAYH2.js";import"../chunks-js/chunk.TTUIP4EN.js";import{E as l}from"../chunks-js/chunk.LSBYP56E.js";import"../chunks-js/chunk.Z5LIJAXH.js";import"../chunks-js/chunk.H2SV3XAM.js";import"../chunks-js/chunk.U46MGZPC.js";import"../chunks-js/chunk.VW2P7YAN.js";import"../chunks-js/chunk.MYG5FMLT.js";import"../chunks-js/chunk.2EDJFZZN.js";import{a as f}from"../chunks-js/chunk.N3FDHMD3.js";import"../chunks-js/chunk.YX3UUKJ3.js";import"../chunks-js/chunk.XUUOUKOL.js";import"../chunks-js/chunk.LB764BBD.js";import"../chunks-js/chunk.LUCH4Y6K.js";import"../chunks-js/chunk.PNTHLTQK.js";import"../chunks-js/chunk.S2K25ADN.js";import{b as r}from"../chunks-js/chunk.L3RZWW2F.js";import{h as y,m as b,p as S}from"../chunks-js/chunk.BF43NN75.js";b();S();var h=y(k(),1);var z={title:"UI Components/Switch",component:"omni-switch"},E={render:e=>r`
    <omni-switch
      data-testid="test-switch"
      label="${s(e.label)}"
      .data="${e.data}"
      hint="${s(e.hint)}"
      error="${s(e.error)}"
      ?checked="${e.checked}"
      ?disabled="${e.disabled}">${f(e["[Default Slot]"])}</omni-switch>
  `,frameworkSources:[{framework:"Vue",load:e=>l(E.render(e),void 0,t=>t.replace(" disabled",' :disabled="true"').replace(" checked",' :checked="true"'))}],name:"Interactive",args:{label:"",data:{},hint:"",error:"",checked:!1,disabled:!1,"[Default Slot]":void 0},play:async e=>{var a;let t=c(e.canvasElement).getByTestId("test-switch"),n=h.fn();t.addEventListener("value-change",n);let o=(a=t.shadowRoot)==null?void 0:a.getElementById("content");await d.click(o,{pointerEventsCheck:0}),await m.keyDown(o,{key:" ",code:"Space"}),await i(n).toBeCalledTimes(2)}},u={render:e=>r` <omni-switch data-testid="test-switch" label="${e.label}"></omni-switch> `,frameworkSources:[{framework:"React",load:e=>`import { OmniSwitch } from "@capitec/omni-components-react/switch";

const App = () => <OmniSwitch${e.label?` label='${e.label}'`:""}/>;`}],description:"Set text content to display next to the component.",args:{label:"Label"},play:async e=>{var o,a;let n=(o=c(e.canvasElement).getByTestId("test-switch").shadowRoot)==null?void 0:o.querySelector(".label");await i(n).toHaveTextContent((a=u.args)==null?void 0:a.label)}},$={render:e=>r` <omni-switch data-testid="test-switch" label="${e.label}" hint="${e.hint}"></omni-switch> `,frameworkSources:[{framework:"React",load:e=>`import { OmniSwitch } from "@capitec/omni-components-react/switch";

const App = () => <OmniSwitch${e.label?` label='${e.label}'`:""}${e.hint?` hint='${e.hint}'`:""}/>;`}],description:"Set text content to display as a hint.",args:{label:"Hint",hint:"This is a hint"},play:async e=>{var o,a;let n=(o=c(e.canvasElement).getByTestId("test-switch").shadowRoot)==null?void 0:o.querySelector(".hint");await i(n).toHaveTextContent((a=$.args)==null?void 0:a.hint)}},T={name:"Error",render:e=>r` <omni-switch data-testid="test-switch" label="${e.label}" error="${e.error}"></omni-switch> `,frameworkSources:[{framework:"React",load:e=>`import { OmniSwitch } from "@capitec/omni-components-react/switch";

const App = () => <OmniSwitch${e.label?` label='${e.label}'`:""}${e.error?` error='${e.error}'`:""}/>;`}],description:"Set text content to display as an error.",args:{label:"Error",error:"This is an error state"},play:async e=>{var o,a;let n=(o=c(e.canvasElement).getByTestId("test-switch").shadowRoot)==null?void 0:o.querySelector(".error");await i(n).toHaveTextContent((a=T.args)==null?void 0:a.error)}},g={render:e=>r` <omni-switch data-testid="test-switch" label="${e.label}" ?checked="${e.checked}"></omni-switch> `,frameworkSources:[{framework:"React",load:e=>`import { OmniSwitch } from "@capitec/omni-components-react/switch";

const App = () => <OmniSwitch${e.label?` label='${e.label}'`:""}${e.checked?" checked":""}/>;`},{framework:"Vue",load:e=>l(g.render(e),void 0,t=>t.replace(" disabled",' :disabled="true"').replace(" checked",' :checked="true"'))}],description:"Set the component to a checked state.",args:{label:"Checked",checked:!0},play:async e=>{var o;let n=(o=c(e.canvasElement).getByTestId("test-switch").shadowRoot)==null?void 0:o.querySelector(".checked");await i(n).toBeTruthy()}},v={render:e=>r` <omni-switch data-testid="test-switch" label="${e.label}" ?disabled="${e.disabled}"></omni-switch> `,frameworkSources:[{framework:"React",load:e=>`import { OmniSwitch } from "@capitec/omni-components-react/switch";

const App = () => <OmniSwitch${e.label?` label='${e.label}'`:""}${e.disabled?" disabled":""}/>;`},{framework:"Vue",load:e=>l(v.render(e),void 0,t=>t.replace(" disabled",' :disabled="true"').replace(" checked",' :checked="true"'))}],description:"Prevent interaction (pointer events).",args:{label:"Disabled",disabled:!0},play:async e=>{var w,p;let t=c(e.canvasElement).getByTestId("test-switch"),n=h.fn();t.addEventListener("value-change",n);let o=(w=t.shadowRoot)==null?void 0:w.querySelector(".disabled");await i(o).toBeTruthy();let a=(p=t.shadowRoot)==null?void 0:p.getElementById("content");await d.click(a,{pointerEventsCheck:0}),await m.keyDown(a,{key:" ",code:"Space"}),await i(n).toBeCalledTimes(0)}},G={render:()=>r`
        <omni-switch data-testid="test-switch">Slotted</omni-switch>
    `,frameworkSources:[{framework:"React",load:e=>`import { OmniSwitch } from "@capitec/omni-components-react/switch";

const App = () => <OmniSwitch>
                    Slotted
                  </OmniSwitch>;`}],name:"Slot",description:"Set content to display within.",args:{},play:async e=>{let n=c(e.canvasElement).getByTestId("test-switch").innerHTML;await i(n).toEqual("Slotted")}};export{g as Checked,v as Disabled,T as Error_Label,$ as Hint,E as Interactive,u as Label,G as Slot,z as default};
//# sourceMappingURL=Switch.stories.js.map
