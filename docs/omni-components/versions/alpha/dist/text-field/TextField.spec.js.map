{"version":3,"file":"TextField.spec.js","sourceRoot":"","sources":["../../src/text-field/TextField.spec.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,QAAQ,MAAM,WAAW,CAAC;AACtC,OAAO,EACH,kBAAkB,EAClB,iBAAiB,EACjB,kBAAkB,EAClB,kBAAkB,EAClB,sBAAsB,EACtB,gCAAgC,EAChC,mBAAmB,EACnB,mBAAmB,EACnB,qBAAqB,EACxB,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAa,MAAM,4BAA4B,CAAC;AAGnF,IAAI,CAAC,0BAA0B,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE;IAC7D,MAAM,YAAY,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAC3C,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEhD,MAAM,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;QAEhD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,CAAC;QACxD,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAY,EAAE,EAAE;YACtC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACb,MAAM,CAAC,CAAC,cAAc,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,MAAM,MAAM,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;QAE3D,MAAM,OAAO,GAAG,QAAQ,CAAC,EAAE,EAAE,CAAC;QAC9B,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;QACxD,MAAM,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;YAC9B,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAE,MAAc,CAAC,SAAS,EAAE,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAEpD,MAAM,KAAK,GAAG,cAAc,CAAC;QAC7B,MAAM,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE7B,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAE5C,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,MAAM,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;AACtC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;AACrC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;AACtC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;AACtC,sBAAsB,CAAC,iBAAiB,CAAC,CAAC;AAC1C,gCAAgC,CAAC,iBAAiB,CAAC,CAAC;AACpD,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;AACvC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;AACvC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["import * as jestMock from 'jest-mock';\nimport {\n    testLabelBehaviour,\n    testHintBehaviour,\n    testErrorBehaviour,\n    testValueBehaviour,\n    testClearableBehaviour,\n    testCustomClearableSlotBehaviour,\n    testPrefixBehaviour,\n    testSuffixBehaviour,\n    testDisabledBehaviour\n} from '../core/OmniInputPlaywright.js';\nimport { test, expect, withCoverage, type Page } from '../utils/JestPlaywright.js';\nimport type { TextField } from './TextField.js';\n\ntest(`Text Field - Interactive`, async ({ page, browserName }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/text-field/');\n        await page.evaluate(() => document.fonts.ready);\n\n        await page.waitForSelector('[data-testid]', {});\n\n        const textField = page.locator('[data-testid]').first();\n        textField.evaluate(async (t: TextField) => {\n            t.value = '';\n            await t.updateComplete;\n        });\n        await expect(textField).toHaveScreenshot('text-field.png');\n\n        const inputFn = jestMock.fn();\n        await page.exposeFunction('jestInput', () => inputFn());\n        await textField.evaluate((node) => {\n            node.addEventListener('input', () => (window as any).jestInput());\n        });\n\n        const inputField = textField.locator('#inputField');\n\n        const value = 'Value Update';\n        await inputField.type(value);\n\n        await expect(inputField).toHaveValue(value);\n\n        await expect(inputFn).toBeCalledTimes(value.length);\n        await expect(textField).toHaveScreenshot('text-field-value.png');\n    });\n});\n\ntestLabelBehaviour('omni-text-field');\ntestHintBehaviour('omni-text-field');\ntestErrorBehaviour('omni-text-field');\ntestValueBehaviour('omni-text-field');\ntestClearableBehaviour('omni-text-field');\ntestCustomClearableSlotBehaviour('omni-text-field');\ntestPrefixBehaviour('omni-text-field');\ntestSuffixBehaviour('omni-text-field');\ntestDisabledBehaviour('omni-text-field');\n"]}