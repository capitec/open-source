{"version":3,"file":"PinField.spec.js","sourceRoot":"","sources":["../../src/pin-field/PinField.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,kBAAkB,EAClB,iBAAiB,EACjB,kBAAkB,EAClB,kBAAkB,EAClB,sBAAsB,EACtB,gCAAgC,EAChC,mBAAmB,EACnB,mBAAmB,EACnB,qBAAqB,EACxB,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAG3F,IAAI,CAAC,kCAAkC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;IACxD,MAAM,YAAY,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEhD,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,CAAC;QACvD,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAW,EAAE,EAAE;YACpC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACb,MAAM,CAAC,CAAC,cAAc,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,MAAM,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;QAEzD,MAAM,OAAO,GAAG,MAAM,iBAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAE3D,MAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC5D,MAAM,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,eAAe,CAAC,KAAK,EAAE,CAAC;QAC9B,MAAM,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;QAE9D,MAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC5D,MAAM,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,eAAe,CAAC,KAAK,EAAE,CAAC;QAC9B,MAAM,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;QAE9D,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAEnD,MAAM,KAAK,GAAG,MAAM,CAAC;QACrB,MAAM,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE7B,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAE5C,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,kCAAkC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;IACxD,MAAM,YAAY,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEhD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC9C,MAAM,QAAQ,GAAG,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,CAAC;QAC5D,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAW,EAAE,EAAE;YACpC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACb,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC;YAChB,MAAM,CAAC,CAAC,cAAc,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,MAAM,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;QAEzD,MAAM,OAAO,GAAG,MAAM,iBAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAE3D,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAEnD,MAAM,UAAU,GAAG,aAAa,CAAC;QACjC,MAAM,KAAK,GAAG,MAAM,CAAC;QACrB,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAElC,MAAM,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;QAC/D,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAE5C,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAEzD,MAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC5D,MAAM,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,eAAe,CAAC,KAAK,EAAE,CAAC;QAC9B,MAAM,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,CAAC;AAC1E,IAAI,CAAC,4BAA4B,EAAE,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACxE,IAAI,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,CAAC;AAC1E,IAAI,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,CAAC;AAC1E,IAAI,CAAC,iCAAiC,EAAE,sBAAsB,CAAC,gBAAgB,CAAC,CAAC,CAAC;AAClF,IAAI,CAAC,yCAAyC,EAAE,gCAAgC,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACpG,IAAI,CAAC,8BAA8B,EAAE,mBAAmB,CAAC,gBAAgB,CAAC,CAAC,CAAC;AAC5E,IAAI,CAAC,8BAA8B,EAAE,mBAAmB,CAAC,gBAAgB,CAAC,CAAC,CAAC;AAC5E,IAAI,CAAC,gCAAgC,EAAE,qBAAqB,CAAC,gBAAgB,CAAC,CAAC,CAAC","sourcesContent":["import {\n    testLabelBehaviour,\n    testHintBehaviour,\n    testErrorBehaviour,\n    testValueBehaviour,\n    testClearableBehaviour,\n    testCustomClearableSlotBehaviour,\n    testPrefixBehaviour,\n    testSuffixBehaviour,\n    testDisabledBehaviour\n} from '../core/OmniInputPlaywright.js';\nimport { test, expect, mockEventListener, withCoverage } from '../utils/JestPlaywright.js';\nimport type { PinField } from './PinField.js';\n\ntest(`Pin Field - Visual and Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/pin-field/');\n        await page.evaluate(() => document.fonts.ready);\n\n        const pinField = page.locator('[data-testid]').first();\n        pinField.evaluate(async (t: PinField) => {\n            t.value = '';\n            await t.updateComplete;\n        });\n        await expect(pinField).toHaveScreenshot('pin-field.png');\n\n        const inputFn = await mockEventListener(pinField, 'input');\n\n        const showSlotElement = pinField.locator('slot[name=show]');\n        await expect(showSlotElement).toHaveCount(1);\n        await showSlotElement.click();\n        await expect(pinField).toHaveScreenshot('pin-field-show.png');\n\n        const hideSlotElement = pinField.locator('slot[name=hide]');\n        await expect(hideSlotElement).toHaveCount(1);\n        await hideSlotElement.click();\n        await expect(pinField).toHaveScreenshot('pin-field-hide.png');\n\n        const inputField = pinField.locator('#inputField');\n\n        const value = '1234';\n        await inputField.type(value);\n\n        await expect(inputField).toHaveValue(value);\n\n        await expect(inputFn).toBeCalledTimes(value.length);\n        await expect(pinField).toHaveScreenshot('pin-field-value.png');\n    });\n});\n\ntest(`Pin Field - Max Length Behaviour`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/pin-field/');\n        await page.evaluate(() => document.fonts.ready);\n\n        const container = page.locator('.Max_Length');\n        const pinField = container.locator('[data-testid]').first();\n        pinField.evaluate(async (t: PinField) => {\n            t.value = '';\n            t.maxLength = 4;\n            await t.updateComplete;\n        });\n        await expect(pinField).toHaveScreenshot('pin-field.png');\n\n        const inputFn = await mockEventListener(pinField, 'input');\n\n        const inputField = pinField.locator('#inputField');\n\n        const typedValue = '12345678910';\n        const value = '1234';\n        await inputField.type(typedValue);\n\n        await expect(pinField).toHaveScreenshot('pin-field-value.png');\n        await expect(inputField).toHaveValue(value);\n\n        await expect(inputFn).toBeCalledTimes(typedValue.length);\n\n        const showSlotElement = pinField.locator('slot[name=show]');\n        await expect(showSlotElement).toHaveCount(1);\n        await showSlotElement.click();\n        await expect(pinField).toHaveScreenshot('pin-field-show.png');\n    });\n});\n\ntest('Pin Field - Label Behaviour', testLabelBehaviour('omni-pin-field'));\ntest('Pin Field - Hint Behaviour', testHintBehaviour('omni-pin-field'));\ntest('Pin Field - Error Behaviour', testErrorBehaviour('omni-pin-field'));\ntest('Pin Field - Value Behaviour', testValueBehaviour('omni-pin-field'));\ntest('Pin Field - Clearable Behaviour', testClearableBehaviour('omni-pin-field'));\ntest('Pin Field - Custom Clear Slot Behaviour', testCustomClearableSlotBehaviour('omni-pin-field'));\ntest('Pin Field - Prefix Behaviour', testPrefixBehaviour('omni-pin-field'));\ntest('Pin Field - Suffix Behaviour', testSuffixBehaviour('omni-pin-field'));\ntest('Pin Field - Disabled Behaviour', testDisabledBehaviour('omni-pin-field'));\n"]}