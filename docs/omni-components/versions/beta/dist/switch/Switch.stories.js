import"../chunks-js/chunk.7GTL3UTF.js";import{a as S}from"../chunks-js/chunk.IRJIQSYL.js";import{a as c}from"../chunks-js/chunk.PJH7M65U.js";import{a as E}from"../chunks-js/chunk.G3QHRCKP.js";import{b as d}from"../chunks-js/chunk.MHLMY33S.js";import{c as i,d as l}from"../chunks-js/chunk.N6OKW4B2.js";import{d as a}from"../chunks-js/chunk.W54IKPJD.js";import"../chunks-js/chunk.2HYOR3YM.js";import"../chunks-js/chunk.CWNKFZ3E.js";import"../chunks-js/chunk.S2K25ADN.js";import{b as r}from"../chunks-js/chunk.F6MIXR4E.js";import{h as b,m as p,p as y}from"../chunks-js/chunk.BF43NN75.js";p();y();var h=b(S(),1);var j={title:"UI Components/Switch",component:"omni-switch"},N={render:t=>r`
    <omni-switch
      data-testid="test-switch"
      label="${c(t.label)}"
      .data="${t.data}"
      hint="${c(t.hint)}"
      error="${c(t.error)}"
      ?checked="${t.checked}"
      ?disabled="${t.disabled}">${E(t["[Default Slot]"])}</omni-switch>
  `,name:"Interactive",args:{label:"",data:{},hint:"",error:"",checked:!1,disabled:!1,"[Default Slot]":void 0},play:async t=>{var o;let s=i(t.canvasElement).getByTestId("test-switch"),n=h.fn();s.addEventListener("value-change",n);let e=(o=s.shadowRoot)==null?void 0:o.getElementById("content");await d.click(e,{pointerEventsCheck:0}),await l.keyDown(e,{key:" ",code:"Space"}),await a(n).toBeCalledTimes(2)}},g={render:t=>r` <omni-switch data-testid="test-switch" label="${t.label}"></omni-switch> `,description:"Set text content to display next to the component.",args:{label:"Label"},play:async t=>{var e,o;let n=(e=i(t.canvasElement).getByTestId("test-switch").shadowRoot)==null?void 0:e.querySelector(".label");await a(n).toHaveTextContent((o=g.args)==null?void 0:o.label)}},T={render:t=>r` <omni-switch data-testid="test-switch" label="${t.label}" hint="${t.hint}"></omni-switch> `,description:"Set text content to display as a hint.",args:{label:"Hint",hint:"This is a hint"},play:async t=>{var e,o;let n=(e=i(t.canvasElement).getByTestId("test-switch").shadowRoot)==null?void 0:e.querySelector(".hint");await a(n).toHaveTextContent((o=T.args)==null?void 0:o.hint)}},f={name:"Error",render:t=>r` <omni-switch data-testid="test-switch" label="${t.label}" error="${t.error}"></omni-switch> `,description:"Set text content to display as an error.",args:{label:"Error",error:"This is an error state"},play:async t=>{var e,o;let n=(e=i(t.canvasElement).getByTestId("test-switch").shadowRoot)==null?void 0:e.querySelector(".error");await a(n).toHaveTextContent((o=f.args)==null?void 0:o.error)}},P={render:t=>r` <omni-switch data-testid="test-switch" label="${t.label}" ?checked="${t.checked}"></omni-switch> `,description:"Set the component to a checked state.",args:{label:"Checked",checked:!0},play:async t=>{var e;let n=(e=i(t.canvasElement).getByTestId("test-switch").shadowRoot)==null?void 0:e.querySelector(".checked");await a(n).toBeTruthy()}},U={render:t=>r` <omni-switch data-testid="test-switch" label="${t.label}" ?disabled="${t.disabled}"></omni-switch> `,description:"Prevent interaction (pointer events).",args:{label:"Disabled",disabled:!0},play:async t=>{var m,w;let s=i(t.canvasElement).getByTestId("test-switch"),n=h.fn();s.addEventListener("value-change",n);let e=(m=s.shadowRoot)==null?void 0:m.querySelector(".disabled");await a(e).toBeTruthy();let o=(w=s.shadowRoot)==null?void 0:w.getElementById("content");await d.click(o,{pointerEventsCheck:0}),await l.keyDown(o,{key:" ",code:"Space"}),await a(n).toBeCalledTimes(0)}},_={render:()=>r`
        <omni-switch data-testid="test-switch">Slotted</omni-switch>
    `,name:"Slot",description:"Set content to display within.",args:{},play:async t=>{let n=i(t.canvasElement).getByTestId("test-switch").innerHTML;await a(n).toEqual("Slotted")}};export{P as Checked,U as Disabled,f as Error_Label,T as Hint,N as Interactive,g as Label,_ as Slot,j as default};
//# sourceMappingURL=Switch.stories.js.map
