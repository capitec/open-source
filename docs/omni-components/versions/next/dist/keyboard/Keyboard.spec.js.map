{"version":3,"file":"Keyboard.spec.js","sourceRoot":"","sources":["../../src/keyboard/Keyboard.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { test, expect, withCoverage } from '../utils/JestPlaywright.js';\n\ntest(`Keyboard - Visual and Behaviour`, async ({ page, isMobile }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/keyboard/');\n\n        const container = page.locator('.Interactive');\n        const keyboard = container.locator('#keyboard-interactive');\n        const keyboardArea = keyboard.locator('.footer').first();\n\n        const textInput = container.locator('omni-text-field');\n        const currencyInput = container.locator('omni-currency-field');\n\n        await expect(page).toHaveScreenshot('keyboard-page-initial.png');\n        await expect(keyboardArea).not.toBeVisible();\n\n        await textInput.click();\n        await expect(keyboardArea).toBeVisible();\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open.png');\n        await expect(page).toHaveScreenshot('keyboard-page-open.png');\n\n        // Click 1\n        await keyboardArea.getByRole('button', { name: '1' }).click({\n            force: true\n        });\n        // Click Backspace\n        await keyboardArea.locator('div:nth-child(4) > omni-keyboard-button:nth-child(8) > .button').first().click({\n            force: true\n        });\n        // Click f twice\n        await keyboardArea.getByRole('button', { name: 'f' }).click({\n            force: true\n        });\n        await keyboardArea.getByRole('button', { name: 'f' }).click({\n            force: true\n        });\n        // Click Space\n        await keyboardArea.getByRole('button', { name: 'Space' }).click({\n            force: true\n        });\n        // Click Backspace\n        await keyboardArea.locator('div:nth-child(4) > omni-keyboard-button:nth-child(8) > .button').first().click({\n            force: true\n        });\n        // Click Space\n        await keyboardArea.getByRole('button', { name: 'Space' }).click({\n            force: true\n        });\n        // Click Caps Lock\n        await keyboardArea\n            .getByText('1 2 3 4 5 6 7 8 9 0 q w e r t y u i o p a s d f g h j k l z x c v b n m . @ !#$ ')\n            .locator('.fill-space > .button')\n            .first()\n            .click({\n                force: true\n            });\n        // Click H (capital)\n        await keyboardArea.getByRole('button', { name: 'H', exact: true }).click({\n            force: true\n        });\n        // Click Enter\n        await keyboardArea.getByRole('button', { name: 'Enter' }).click({\n            force: true\n        });\n\n        await expect(currencyInput).toBeFocused();\n\n        await expect(textInput.locator('input')).toHaveValue('ff H');\n\n        // Only check screenshot of the omni-text-field if on desktop. It is covered by the keyboard in mobile mode.\n        if (!isMobile) {\n            await expect(textInput).toHaveScreenshot('keyboard-interacted-text-field.png');\n        }\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-number.png');\n        await expect(page).toHaveScreenshot('keyboard-page-interacted-text-field.png');\n\n        await keyboardArea.getByRole('button', { name: '5' }).click({\n            force: true\n        });\n        await keyboardArea\n            .locator('omni-label')\n            .filter({ hasText: /^Close$/ })\n            .click({\n                force: true\n            });\n\n        await expect(currencyInput.locator('input')).toHaveValue('0.05');\n        await expect(currencyInput).toHaveScreenshot('keyboard-interacted-number-field.png');\n        await expect(keyboardArea).not.toBeVisible();\n        await expect(page).toHaveScreenshot('keyboard-page-interacted-number-field.png');\n    });\n});\n\n/*\n    'enter' | 'go' | 'done' | 'next' | 'previous' | 'search' | 'send' \n*/\ntest(`Keyboard - Enter Key Hint Variations`, async ({ page }) => {\n    await withCoverage(page, async () => {\n        await page.goto('/components/keyboard/');\n\n        const container = page.locator('.Enter_Key_Hint_Variations');\n        const keyboard = page.locator('#keyboard-interactive');\n        const keyboardArea = keyboard.locator('.footer').first();\n        const keyboardOnly = keyboardArea.locator('.shadow');\n\n        const firstTextInput = container.locator('omni-text-field').first();\n\n        // Click on the element.\n        await firstTextInput.click();\n        await expect(keyboardArea).toBeVisible();\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-alpha-enter.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-alpha-enter.png');\n\n        // Click Enter\n        await keyboardArea.getByRole('button', { name: 'Enter' }).click({\n            force: true\n        });\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-number-enter.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-number-enter.png');\n\n        // Click Enter\n        await keyboardArea.getByRole('button', { name: 'Enter' }).click({\n            force: true\n        });\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-alpha-go.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-alpha-go.png');\n\n        // Click Enter\n        await keyboardArea.locator('.action-button').click({\n            force: true\n        });\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-number-go.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-number-go.png');\n\n        // Click Enter\n        await keyboardArea.locator('.action-button').click({\n            force: true\n        });\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-alpha-done.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-alpha-done.png');\n\n        // Click Enter\n        await keyboardArea.locator('.action-button').click({\n            force: true\n        });\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-number-done.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-number-done.png');\n\n        // Click Enter\n        await keyboardArea.locator('.action-button').click({\n            force: true\n        });\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-alpha-next.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-alpha-next.png');\n\n        // Click Enter\n        await keyboardArea.locator('.action-button').click({\n            force: true\n        });\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-number-next.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-number-next.png');\n\n        // Click Enter\n        await keyboardArea.locator('.action-button').click({\n            force: true\n        });\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-alpha-previous.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-alpha-previous.png');\n\n        // Explicitly focus element as pressing Enter would cause keyboard to focus previous tabIndex.\n        const previousNumberInput = container.locator('omni-number-field[enterkeyhint=previous]').first();\n        await previousNumberInput.click();\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-number-previous.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-number-previous.png');\n\n        // Explicitly focus element as pressing Enter would cause keyboard to focus previous tabIndex.\n        const searchInput = container.locator('omni-text-field[enterkeyhint=search]').first();\n        await searchInput.click();\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-alpha-search.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-alpha-search.png');\n\n        // Click Enter\n        await keyboardArea.locator('.action-button').click({\n            force: true\n        });\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-number-search.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-number-search.png');\n\n        // Click Enter\n        await keyboardArea.locator('.action-button').click({\n            force: true\n        });\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-alpha-send.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-alpha-send.png');\n\n        // Click Enter\n        await keyboardArea.locator('.action-button').click({\n            force: true\n        });\n\n        await expect(keyboardArea).toHaveScreenshot('keyboard-open-number-send.png');\n        await expect(keyboardOnly).toHaveScreenshot('keyboard-only-open-number-send.png');\n    });\n});\n"]}